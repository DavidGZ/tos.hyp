!begin_node Pause
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPauseÆ - Prozess bis zum Eintreffen eines Signals suspendieren.
!item [Gemdosnummer:]
289
!item [Binding:]
(!link [Bindings fÅr Pause] [Bindings fÅr Pause])
!item [Beschreibung:]
Die Funktion suspendiert den aufrufenden Prozeû, bis ein Signal fÅr diesen
eintrifft. Wenn fÅr dieses Signal ein Signal-Handler mittels Psignal
installiert worden ist, wird der Handler aufgerufen, bevor die Funktion
Pause zurÅckkehrt.

Die Funktion wird nicht zurÅckkehren, wenn der Signal-Handler einen nicht
lokalen Sprung (per longjump) ausfÅhrt, oder das Programm beendet wird.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.50 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion hat kein direktes Ergebnis.
!item [Gruppe:]
Prozessfunktionen
!item [Querverweis:] Psigblock ~  Psignal ~  Psigpause ~  Psigsetmask ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Pause
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Pause ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #289,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pdomain
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPdomainÆ - Prozessumgebung setzen bzw. erfragen.
!item [Gemdosnummer:]
281
!item [Binding:]
(!link [Bindings fÅr Pdomain] [Bindings fÅr Pdomain])
!item [Beschreibung:]
Die Funktion dient dem Setzen bzw. Abfragen der Umgebung, in der der Prozeû
ausgefÅhrt wird. Diese Umgebung beeinfluût das Verhalten des Prozesses zum
Teil drastisch. Es gilt:
!begin_xlist !short [dom]
!item [dom]
Bedeutung
!item [~]
~

!item [-1]
aktuell gÅltige Domain erfragen.

!label TOS-Domain
!label Domain, TOS-
!item [0]
(!B)TOS-Domain(!b) (Default-Wert). In dieser Umgebung verhalten sich alle
Systemaufrufe exakt genauso wie unter dem normalen TOS.

!label MiNT-Domain
!label Domain, MiNT-
!item [1]
(!B)MiNT-Domain(!b). In dieser Umgebung wird das Verhalten von Fread und
Fwrite durch die von Fcntl eingestellten Parameter beeinfluût, wenn diese
auf ein Terminal angewendet werden. Auûerdem werden Dateinamen die per
Fsfirst bzw. Fsnext geliefert werden, anders behandelt.
!end_xlist

(!B)Hinweis:(!b) MiNT-kompatible Prozesse sollten auch mit Dateien umgehen
kînnen, die (!I)nicht(!i) der Standard DOS-Konvention (8+3 Zeichen)
entsprechen.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.0 (05.11.1995)
zur VerfÅgung.
!item [Ergebnis:]
Die Funktion liefert die Umgebung des Prozesses zurÅck, die beim
Funktionsaufruf gÅltig war.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Dpathconf ~  Dopendir
(!ende_liste)


!begin_node Bindings fÅr Pdomain
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pdomain ( WORD dom );
!item [Assembler:]
!begin_verbatim
move.w    dom,-(sp)    ; Offset 2
move.w    #281,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pexec
(!begin_liste) [Beschreibung:]
!item [Name:]
Øprogram executionÆ - Programm laden und ausfÅhren.
!item [Gemdosnummer:]
75
!item [Binding:]
(!link [Bindings fÅr Pexec] [Bindings fÅr Pexec])
!item [Beschreibung:]
Die Funktion lÑdt und startet ein Programm. öber den Parameter (!I)mode(!i)
lassen sich verschiedene Varianten auswÑhlen:
!begin_xlist [mode]
!item [mode]
Bedeutung
!item [~]
~

!item [0]
!begin_verbatim
LONG Pexec (0, BYTE *name, BYTE *cmdline, BYTE *env);
!end_verbatim
(!B)Load and go:(!b) LÑdt und startet das in (!I)name(!i) angegebene
Programm, und Åbergibt die Kommandozeile (!I)cmdline(!i). FÅr den Parameter
(!I)env(!i) gilt:
!begin_xlist !short [NULL]
!item [-1]
=  kein Environment anlegen.
!item [NULL]
=  Environment des Parent vererben.
!end_xlist
Jeder andere Wert ist ein Zeiger auf das zu vererbene Environment.

!item [3]
!begin_verbatim
(!nolink [PD]) *Pexec (3, BYTE* name, BYTE *cmdline, BYTE *env);
!end_verbatim
(!B)Load, don't go:(!b) wird meist zum Starten von Overlays oder zum Laden
von Prgrammen in einem Debugger benutzt. Entspricht (!I)mode(!i) 0, mit dem
Unterschied, daû das Programm nicht sofort gestartet wird, sondern ein
Zeiger auf die Basepage zurÅckgeliefert wird.

!item [4]
!begin_verbatim
LONG Pexec (4, 0L, PD *basepage, 0L);
!end_verbatim
(!B)Just go:(!b) startet ein bereits geladenes Programm. Die Basepage sollte
mit mode 3 oder 5 erzeugt worden sein.

!item [5]
!begin_verbatim
(!nolink [PD]) *Pexec (5, 0L, BYTE *cmdline, BYTE *env);
!end_verbatim
(!B)Create Basepage:(!b) ZunÑchst legt GEMDOS ein neues Environment an. Dann
wird der grîûte zusammenhÑngende Speicherblock alloziert und in den ersten
256 Byte eine Basepage angelegt. FÅr den Parameter (!I)env(!i) gilt:
!begin_xlist !short [NULL]
!item [-1]
=  kein Environment anlegen.
!item [NULL]
=  Environment des Parent vererben.
!end_xlist
Jeder andere Wert ist ein Zeiger auf das zu vererbende Environment.

!item [6]
!begin_verbatim
LONG Pexec (6, 0L, PD *basepage, 0L);
!end_verbatim
(!B)Just go, then free:(!b) Entspricht (!I)mode(!i) 4, mit dem Unterschied,
daû allozierter Speicher dem gestarteten Prozess und nicht dem Starter
gehîrt. Zusammen mit Modus 3 kann damit der gleiche Effekt erzielt werden,
wie durch Modus 0. Dieser Modus steht erst ab (!nolink [GEMDOS])-Version 0.15 zur
VerfÅgung.

!item [7]
!begin_verbatim
PD *Pexec (7, ULONG prgflags, BYTE *cmdline, BYTE *env);
!end_verbatim
(!B)Create Basepage, respecting prgflags:(!b) Analog (!I)mode(!i) 5, nur
kann in (!I)prgflags(!i) die gleiche Information wie im Feld ph_prgflags des
Programm-Headers Åbergeben werden. Dieser Modus wird vom BIOS des TT
benutzt, um GEM zu starten, und steht erst ab GEMDOS Version 0.19 zur
VerfÅgung.

!item [100]
!begin_verbatim
LONG Pexec (100, BYTE *name, BYTE *cmdline, BYTE *env);
!end_verbatim
(!B)Asynchron load and go:(!b) Analog (!I)mode(!i) 0, nur wartet der
Aufrufer nicht, bis das gestartete Programm beendet wird. Der RÅckgabewert
ist ein negativer Fehlercode oder die positive PID des Childs.

!item [101]
da dieser Modus nur MagiC-intern zum Vererben von Pfad- und Dateihandles
benutzt wird, wird auf die Angabe der genauen Syntax an dieser Stelle
verzichtet.

!item [102]
wird (!nolink [MagiC])-intern verwendet, um einen bestimmten Prozess zu entfernen. Auf
die genaue Syntax wird daher an dieser Stelle verzichtet.

!item [104]
!begin_verbatim
LONG Pexec (104, BYTE *name, PD *basepage, 0L);
!end_verbatim
(!B)Asynchron just go:(!b) Analog (!I)mode(!i) 4, nur wartet der Aufrufer
nicht, bis das gestartete Programm beendet wird. Es wird ein Prozess
gestartet, dessen Basepage vorher durch einen Modus von 3, 5 oder 7 gesetzt
wurde. Zu beachten ist, daû das Environment und die Basepage des Childs sich
auch im Besitz des Parents befinden (tatsÑchlich erbt der Child allen
Speicher, der sich im Besitz des Parents befindet). Der Parameter
(!I)name(!i) ist ein Zeiger auf einen String, der den Namen des neuen
Prozesses beschreibt; bei einem NULL-Wert wird der Name des Parent-Prozesses
benutzt. Die Funktion liefert einen negativen Fehlercode, oder die positive
PID des Childs zurÅck.

!item [106]
!begin_verbatim
LONG Pexec (106, BYTE *name, PD *basepage, 0L);
!end_verbatim
(!B)Asynchron go, then free:(!b) Analog (!I)mode(!i) 104, allerdings
befinden sich Environment und Basepage des Childs (!I)nicht(!i) im Besitz des
Parents, und der Child hat keinen Zugriff auf Speicher, welcher dem
Parent-Prozess zugeteilt wurde. Beim Beenden des Childs wird dessen
Speicherplatz wieder freigegeben. In Verbindung mit Modus 3 entspricht Pexec
(106, ...) daher dem Modus 100 (wÑhrend Modus 3 gefolgt von Modus 6 einem
Aufruf von Pexec (0, ...) entspricht).

!item [107]
entspricht im wesentlichen (!I)mode(!i) 7, und wird intern von MagiC
verwendet. Auf die genaue Syntax wird daher an dieser Stelle verzichtet.

!item [108]
wird von (!nolink [MagiC]) intern zum Starten eines Accessories verwendet. Da die genaue
Syntax offiziell nicht dokumentiert ist, sollten eigene Programme besser auf
shel_write zurÅckgreifen.

!item [200]
!begin_verbatim
LONG Pexec (200, BYTE *name, BYTE *cmdline, BYTE *env);
!end_verbatim
(!B)Overlay:(!b) Analog (!I)mode(!i) 100, jedoch Åberschreibt der neue
Prozess den alten vollstÑndig. Der alte Prozess behÑlt zwar seine PID und
die meisten seiner Attribute, aber sein gesamter Speicherplatz wird
freigegeben. WÑhrend Pexec (0, ...) als Unterprogrammaufruf (call...return)
angesehen werden kann, wirkt dieser Modus eher wie ein 'goto'.
!end_xlist
(!B)Hinweis:(!b) Nicht alle Modi sind unter allen Betriebssystemvarianten
verfÅgbar; deshalb sollte der RÅckgabewert der Funktion beachtet werden.
Unbekannte Modi sorgen fÅr ein Funktionsergebnis von EINVFN.

Kommandozeilen werden als String im (!I)Pascal-Format(!i) Åbergeben, d.h. im
ersten Byte befindet sich die LÑnge der Zeile (maximal 124 Zeichen).
!item [Ergebnis:]
Die Funktion liefert als Ergebnis den Abschluûcode des Child-Prozesses. Wenn
ein Overlay geladen wurde, enthÑlt das Ergebnis die Basepage des Overlays.
Bei einem negativen Resultat ist ein Fehler aufgetreten.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] shel_write  ~  (!link [Programmflags][Die Programmflags]) ~
 ARGV-Verfahren
(!ende_liste)


!begin_node Bindings fÅr Pexec
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pexec ( UWORD mode, ... );
!item [Assembler:]
!begin_verbatim
pea       env          ; Offset 12
pea       cmdline      ; Offset  8 
pea       name         ; Offset  4 
move.w    mode,-(sp)   ; Offset  2
move.w    #75,-(sp)    ; Offset  0
trap      #1           ; GEMDOS aufrufen
lea       $10(sp),sp   ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pfork
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPforkÆ - Kopie des aktuellen Prozesses erzeugen.
!item [Gemdosnummer:]
283
!item [Binding:]
(!link [Bindings fÅr Pfork] [Bindings fÅr Pfork])
!item [Beschreibung:]
Die Funktion erzeugt eine Kopie des aktuellen Prozesses. Der Child-Prozeû
erbt dabei eine Kopie des Adreûraums des Parent-Prozesses, d.h. énderungen,
die der Child an Variablen macht, haben keinen Einfluû auf den Parent.

Der neu erzeugte Prozeû beginnt seine Arbeit, wenn die Funktion Pfork
zurÅckkehrt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [ENSMEM :]
!item [E_OK :]
im Child-Prozeû.
!item [>0 :]
neue Prozess-ID im Parent-Prozeû.
!item [ENSMEM :]
nicht genug Speicher vorhanden, um den neuen Prozeû zu erzeugen.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pexec ~  Pvfork  ~ (!link [Threads][Threads in MagiC])
(!ende_liste)


!begin_node Bindings fÅr Pfork
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pfork ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #283,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pgetauid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetauidÆ - User ID eines Prozesses zu Beginn ermitteln.
!item [Gemdosnummer:]
326
!item [Binding:]
(!link [Bindings fÅr Pgetauid] [Bindings fÅr Pgetauid])
!item [Beschreibung:]
Die Funktion ermittelt die Anfangs-User-ID des aktuellen Prozesses. Zusammen
mit Psetauid kann damit in einer Multiuserumgebung festgestellt werden, wer
der zuerst eingeloggte Benutzer war.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Der RÅckgabewert ist die Anfangs-User-ID des Prozesses.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetauid
(!ende_liste)


!begin_node Bindings fÅr Pgetauid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pgetauid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #326,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pgetegid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetegidÆ - effektive Gruppen-ID eines Prozesses ermitteln.
!item [Gemdosnummer:]
313
!item [Binding:]
(!link [Bindings fÅr Pgetegid] [Bindings fÅr Pgetegid])
!item [Beschreibung:]
Die Funktion liefert die effektive Gruppen-ID des aktuellen Prozesses und
Ñhnelt dem Systemaufruf Pgetgid. Der Unterschied besteht darin, daû hier die
effektive Gruppen-ID zurÅckgegeben wird.

Diese ist normalerweise mit der wirklichen Gruppen-ID identisch; falls aber
ein Programm lÑuft, welches das setgid Bit gesetzt hat, ist seine effektive
Gruppen-ID gleich der (wirklichen) ID des Besitzers dieser Programmdatei.

Dateizugriff basiert u.a. auf der effektiven Gruppen-ID, so daû der
setgid-Mechanismus es Benutzern (vor allem dem Super-User) erlaubt, anderen
Usern Zugriff zu erlauben.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Der RÅckgabewert ist die effektive Gruppen-ID des Prozesses.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pgetuid ~  Pgetgid ~  Pgeteuid
(!ende_liste)


!begin_node Bindings fÅr Pgetegid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pgetegid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #313,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pgeteuid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgeteuidÆ - effektive User-ID eines Prozesses ermitteln.
!item [Gemdosnummer:]
312
!item [Binding:]
(!link [Bindings fÅr Pgeteuid] [Bindings fÅr Pgeteuid])
!item [Beschreibung:]
Die Funktion liefert die effektive User-ID des aktuellen Prozesses und
Ñhnelt dem Systemaufruf Pgetuid. Der Unterschied besteht darin, daû hier die
effektive User-ID zurÅckgegeben wird.

Diese ist normalerweise mit der wirklichen User-ID identisch; falls aber ein
Programm lÑuft, welches das setuid Bit gesetzt hat, ist seine effektive
User-ID gleich der (wirklichen) ID des Besitzers dieser Programmdatei.

Dateizugriff basiert u.a. auf der effektiven User-ID, so daû der
setuid-Mechanismus es Benutzern (vor allem dem Super-User) erlaubt, anderen
Usern Zugriff zu erlauben.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Der RÅckgabewert ist die effektive User-ID des Prozesses.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pgetuid ~  Pgetgid ~  Pgetegid
(!ende_liste)


!begin_node Bindings fÅr Pgeteuid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pgeteuid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #312,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pgetgid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetgidÆ - Gruppen ID eines Prozesses ermitteln.
!item [Gemdosnummer:]
276
!item [Binding:]
(!link [Bindings fÅr Pgetgid] [Bindings fÅr Pgetgid])
!item [Beschreibung:]
Die Funktion liefert die wirkliche Gruppen-ID des aktuellen Prozesses
zurÅck. Dies ist eine Zahl zwischen 0 und 255, die die Rechte der
Prozessgruppe festlegt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Der RÅckgabewert ist die wirkliche Gruppen-ID des Prozesses.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pgetuid ~  Pgeteuid ~  Pgetegid
(!ende_liste)


!begin_node Bindings fÅr Pgetgid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pgetgid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #276,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node



!begin_node Pgetgroups
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetgroupsÆ - gets the supplementary group ids for the calling process.

!item [Gemdosnummer:]
327 (0x0147)
!item [Binding:]
(!link [Bindings fÅr Pgetgroups] [Bindings fÅr Pgetgroups])
!item [Beschreibung:]
This function gets the supplementary group ids for the calling process.

(!I)len(!i) specifies the length (in words) of the array to be filled with
the supplementary  group ids available. This value must be a positive number not 
greater than NGROUPS_MAX. If (!I)len(!i) is a zero, the 
call will return the number of supplementary group ids currently 
available for the calling process.

(!I)gidset(!i) is a pointer to a word array to be filled with 
retrieved ids.

The NGROUPS_MAX value is returned by Sysconf().
!item [Ergebnis:]
Returns a number of supplementary group ids for the process on success or 
a negative GEMDOS error code otherwise.

!item [VerfÅgbar:] Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht ab MiNT 1.11 zu VerfÅgung.

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])


!item [Querverweis:] Psetgroups ~  Sysconf
(!ende_liste)


!begin_node Bindings fÅr Pgetgroups
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pgetgroups( WORD len, WORD *gidset);

!item [Assembler:]
!begin_verbatim
peam      gidset       ; Offset 4
move.w    len,-(sp)    ; Offset 2
move.w    #327,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!begin_node Pgetpgrp
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetpgrpÆ - aktuelle Prozess Gruppennummer erfragen.
!item [Gemdosnummer:]
269
!item [Binding:]
(!link [Bindings fÅr Pgetpgrp] [Bindings fÅr Pgetpgrp])
!item [Beschreibung:]
Es wird die Gruppen-Nummer des aktuell aktiven Prozesses zurÅck geliefert.
Prozessgruppen werden gewîhnlich fÅr Job-Control und andere Zwecke benutzt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Prozeû-Gruppen-Nummer des aktiven Prozesses.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pkill ~  Pgetpid ~ Psetpgrp
(!ende_liste)


!begin_node Bindings fÅr Pgetpgrp
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pgetpgrp ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #269,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node



!begin_node Pgetpid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetpidÆ - aktuelle Prozess ID erfragen.
!item [Gemdosnummer:]
267 (0x010b)
!item [Binding:]
(!link [Bindings fÅr Pgetpid] [Bindings fÅr Pgetpid])
!item [Beschreibung:]
Die Funktion liefert die PID des aktuell aktiven Prozesses, also desjenigen,
der momentan die CPU besitzt; es handelt sich dabei um den Dateityp, unter
dem der aktuelle Prozess im Verzeichnis U:\PROC gefÅhrt wird.

A PID is dynamically assigned to a process when it is created.
You should make no assumption on the PID a process may have.
For the kernel, the PID is a WORD but when you program in C, you
should use the pid_t type, which complies with the POSIX standard.
The FreeMiNT kernel's PID is always 0.
	    
	    
The PID is useful when it is important to identify a process
among others in the system. Knowing the PID of a program, it is
possible to do a lot of things: send it a signal with Psignal(), look
for its name in /proc by searching with a "*.xxx" mask (xxx is the
PID of the program which name we wanna know), etc. 

!item [Ergebnis:]
PID des aktiven Prozesses.

!item [VerfÅgbar:]
Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in (!nolink [MagiC]) ab Version 3.0 und unter
MiNT zur VerfÅgung.

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pgetpgrp ~ Pgetppid
(!ende_liste)


!begin_node Bindings fÅr Pgetpid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pgetpid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #267,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node



!begin_node Pgetppid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetppidÆ - Prozess ID fÅr Vater Prozess erfragen.
!item [Gemdosnummer:]
268 (0x010c)
!item [Binding:]
(!link [Bindings fÅr Pgetppid] [Bindings fÅr Pgetppid])
!item [Beschreibung:]
Die Funktion liefert die PID des Parent-Prozesses, des z.Zt. aktiven
Prozesses.


In the FreeMiNT kernel, processes are represented as a tree. The root
of the tree is the kernel itself (PID 0). At boot time, the kernel
launches another process (which can be 'init' in case of a Unix-like
setup, or an AES, a shell or whatever) specified by the INIT or GEM
keyword in the mint.cnf file. This process will launch other processes
(daemons, accessories, programs etc) that are its so-called children.
	    
Therefore, every process (but the kernel, obviously) is created by its
so-called parent. The Pgetppid() (get parent's PID) call allows to
determine the PID of the parent of the calling process. To have a good
illustration of this, you can use the 'ps' command in your shell. You
will see that all accessories's parent is the (!nolink [AES]), and that the daemons
are started by the 'init' program.

!item [Ergebnis:]
Prozess-ID des Parent (positiv). Wenn der aktuelle Prozess direkt vom Kernel
gestartet wurde, wird 0 zurÅck geliefert. Ein RÅckgabewert von -1
signalisiert, daû der Prozess keinen Parent besitzt.

!item [VerfÅgbar:]
Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in (!nolink [MagiC]) ab Version 3.0 und unter
MiNT zur VerfÅgung.

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pgetpgrp ~  Pgetpid
(!ende_liste)


!begin_node Bindings fÅr Pgetppid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pgetppid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #268,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node




!begin_node Pgetpriority
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetpriorityÆ - gets the current priority value for a process
!item [Gemdosnummer:]
344 (0x0158)
!item [Binding:]
(!link [Bindings fÅr Pgetpriority] [Bindings fÅr Pgetpriority])
!item [Beschreibung:]
This function gets the priority of the processes specified by 
(!I)which(!i) and (!I)who(!i). The interpretation of 
parameter (!I)who(!i) depends on (!I)which(!i):

!label PRIO_PROCESS
PRIO_PROCESS (0) reads the priority of process with process 
id (!I)which(!i). A (!I)who(!i) of 0 implies the process 
id of the calling process.

!label PRIO_PGRP
PRIO_PGRP (1) reads the priority of the process group with 
process group id (!I)who(!i). If the priorities of the process 
differ, the lowest valued priority (i. e. the highest CPU usage 
priority) is returned. A (!I)who(!i) of 0 implies the process 
group id of the calling process.

!label PRIO_USER
PRIO_USER (2) reads the priority of the process of the user 
with user id (!I)who(!i). For multiple processes the lowest 
valued priority is returned. A (!I)who(!i) of 0 implies the user 
id of the calling process.

Library functions should first check 
for an error condition and then decrement the returned value by 20.
This call makes calls Pnice and Prenice obsolete.

!item [Ergebnis:]
Return value is either a negative 
error number in case of failure or the requested priority + 20 on 
success.

!item [VerfÅgbar:]
MiNT 1.15.0

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetpriority
(!ende_liste)


!begin_node Bindings fÅr Pgetpriority
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pgetpriority ( WORD which, WORD who);
!item [Assembler:]
!begin_verbatim
move.w    who,-(sp)    ; Offset 4
move.w    which,-(sp)  ; Offset 2
move.w    #344,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Pgetuid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPgetuidÆ - User ID eines Prozesses ermitteln.
!item [Gemdosnummer:]
271
!item [Binding:]
(!link [Bindings fÅr Pgetuid] [Bindings fÅr Pgetuid])
!item [Beschreibung:]
Die Funktion liefert die wirkliche User-ID des aktuellen Prozesses zurÅck.
Dies ist eine Zahl zwischen 0 und 255, die die Zugriffsrechte des Prozesses
festlegt und benutzt werden kann, um in Multi-User-Systemen die einzelnen
Benutzer zu unterscheiden.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Der RÅckgabewert ist die tatsÑchliche User-ID des Prozesses.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pgetgid ~  Pgeteuid ~  Pgetegid
(!ende_liste)


!begin_node Bindings fÅr Pgetuid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pgetuid ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #271,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pkill
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPkillÆ - Signal zu einem Prozess schicken.
!item [Gemdosnummer:]
273
!item [Binding:]
(!link [Bindings fÅr Pkill] [Bindings fÅr Pkill])
!item [Beschreibung:]
Die Funktion sendet das Signal (!I)sig(!i) an einen oder mehrere Prozesse.
FÅr den Parameter (!I)pid(!i) gilt:
!begin_xlist !short [pid]
!item [pid]
Bedeutung
!item [~]
~
!item [> 0]
das Signal wird dem Prozess mit der angegebenen (!I)pid(!i) geschickt.
!item [= 0]
das Signal wird an alle Prozesse der entsprechenden Prozessgruppe geschickt
(dazu gehîrt auch der Aufrufer selbst !).
!item [< 0]
das Signal wird an alle Prozesse mit der Gruppennummer -pid geschickt.
!end_xlist
Das Signal SIGNULL wird von Pkill nicht in der gewohnten Weise behandelt. Es
kann benutzt werden, um die Existenz eines Prozesses zu testen. Dazu schickt
man diesem ein (!nolink [SIGNULL]), und kontrolliert, ob Pkill mit dem Wert 0
zurÅckkehrt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.50 zur VerfÅgung;
allerdings werden hier nur PIDs > 0 unterstÅtzt.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [ERANGE :]
!item [E_OK :]
kein Fehler aufgetreten.
!item [EFILNF :]
falls (!I)pid(!i) > 0 und der angegebene Prozess nicht mehr existiert bzw.
falls (!I)pid(!i) < 0 und die angegebene Prozeûgruppe keine Mitglieder mehr
besitzt.
!item [EACCDN :]
falls (!I)pid(!i) > 0, und der sendende Prozess keine EUID von 0 besitzt
und auûerdem die UID des empfangenden von der des sendenden Prozesses
abweicht.
!item [ERANGE :]
(!I)sig(!i) ist kein gÅltiges Signal.
!end_xlist
(!B)Hinweis:(!b) Wenn der aktuelle Prozess das Signal selbst empfÑngt und
terminiert wird, kehrt die Funktion nicht zurÅck!
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetpgrp ~  Psignal ~  Signale
(!ende_liste)


!begin_node Bindings fÅr Pkill
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pkill ( WORD pid, WORD sig );
!item [Assembler:]
!begin_verbatim
move.w    sig,-(sp)    ; Offset 4
move.w    pid,-(sp)    ; Offset 2
move.w    #273,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pmsg
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPmsgÆ - Empfangen und Senden von Nachrichten.
!item [Gemdosnummer:]
293
!item [Binding:]
(!link [Bindings fÅr Pmsg] [Bindings fÅr Pmsg])
!item [Beschreibung:]
Die Funktion sendet bzw. empfÑngt eine Nachricht zu bzw. von einer Mailbox.
Die jeweils auszufÅhrende Operation kann Åber die Bits des Parameters
(!I)mode(!i) festgelegt werden. Es bedeutet:
!begin_xlist !short [0x0000]
!item [mode]
Operation
!item [~]
~
!item [0x0000]
Lesen
!item [0x0001]
Schreiben
!item [0x0002]
erst Schreiben, dann aus der Mailbox mit der Kennung 0xffffxxxx lesen (dabei
ist xxxx die PID des aktuellen Prozesses).
!item [0x8000]
Durch eine ODER-VerknÅpfung mit diesem Wert kann die Operation im
nicht-blockierenden Modus ausgefÅhrt werden.
!end_xlist
Die (!nolink [Nachrichten]) sind 5 Wîrter lang, und zwar zwei Langworte und ein Short
(in dieser Reihenfolge). Dabei kînnen die 2 Langwîrter vom Prozess mit
beliebiger Information gefÅllt werden, wÑhrend im Short die PID des Senders
einzutragen ist.

Nach dem die Nachricht verschickt worden ist, enthÑlt dieses Short die PID
des Prozesses, der die Nachricht gelesen hat. Umgekehrt enthÑlt dieser nach
dem Lesen einer Nachricht die PID des Prozesses, der die Nachricht
geschrieben hat.

Wenn in (!I)mode(!i) das hîchstwertige Bit gesetzt ist, und es keinen Leser
bzw. Schreiber fÅr die Mailbox (!I)mbox(!i) gibt, wird der Wert -1
zurÅckgeliefert. Anderenfalls wartet eine Leseoperation bis eine Nachricht
geschrieben wurde, bzw. eine Schreiboperation bis ein lesender Prozess
bereit ist.

Im Modus 2 gibt der Schreiber an, daû er auf eine Antwort warten mîchte. Die
Idee dabei ist, daû dieser Prozess sich schlafen legen kann, und zu einem
spÑteren Zeitpunkt von dem Prozess der die Nachricht erhÑlt, wieder
aufgeweckt werden kann. Dabei wird garantiert, daû der Prozess, welcher die
Original-Nachricht erhÑlt beim Schreiben der Antwort nicht blockiert wird.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EINVFN :]
!item [E_OK :]
kein Fehler aufgetreten.
!item [EINVFN :]
ungÅltiger Wert fÅr den Parameter (!I)mode(!i).
!item [-1 :]
Bit-15 ist gesetzt, und Pmsg wÅrde blockieren.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:]
(!ende_liste)


!begin_node Bindings fÅr Pmsg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pmsg ( WORD mode, LONG mbox, VOID *msg );
!item [Assembler:]
!begin_verbatim
pea       msg          ; Offset 8
move.l    mbox,-(sp)   ; Offset 4
move.w    mode,-(sp)   ; Offset 2
move.w    #293,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $C(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pnice
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPniceÆ - PrioritÑt des aktuellen Prozesses verÑndern.
!item [Gemdosnummer:]
266
!item [Binding:]
(!link [Bindings fÅr Pnice] [Bindings fÅr Pnice])
!item [Beschreibung:]
Die Funktion Ñndert die PrioritÑt des aktuellen Prozesses um den Wert
(!I)delta(!i). Eine hîhere PrioritÑt bedeutet, daû der Prozess eine grîûere
Zeitscheibe erhÑlt, also nicht so oft umgeschaltet wird. Analog bedeutet
eine niedrige PrioritÑt, daû die Zeitscheibe des Prozesses verkleinert wird,
und er daher îfter die CPU abgeben muû.

FÅr den Parameter (!I)delta(!i) muû gelten: - 20 <= delta <= 20.

Die Funktion Pnice entspricht Prenice (Pgetpid(), delta) und ist zur
AbwÑrtskompatibilitÑt implementiert.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion liefert die aktuelle Prozeû Umschalt-PrioritÑt zurÅck. Diese
ist per Default auf 0 eingestellt. Grîûere bzw. kleinere Werte bedeuten, daû
der Prozess eine grîûere bzw. kleinere Zeitscheibe besitzt.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Prenice
(!ende_liste)


!begin_node Bindings fÅr Pnice
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pnice ( WORD delta );
!item [Assembler:]
!begin_verbatim
move.w    delta,-(sp)  ; Offset 2
move.w    #266,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Prenice
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPreniceÆ - PrioritÑt eines Prozesses verÑndern.
!item [Gemdosnummer:]
295
!item [Binding:]
(!link [Bindings fÅr Prenice] [Bindings fÅr Prenice])
!item [Beschreibung:]
Die Funktion Ñndert die PrioritÑt des Prozesses mit der Kennung (!I)pid(!i)
um den Wert (!I)delta(!i). Eine hîhere PrioritÑt bedeutet, daû der Prozess
eine grîûere Zeitscheibe erhÑlt, also nicht so oft umgeschaltet wird. Analog
bedeutet eine niedrige PrioritÑt, daû die Zeitscheibe des Prozesses
verkleinert wird, und er daher îfter die CPU abgeben muû.

FÅr den Parameter (!I)delta(!i) muû gelten: - 20 <= delta <= 20.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion liefert die aktuelle Prozeû Umschalt-PrioritÑt zurÅck. Diese
ist per Default auf 0 eingestellt. Grîûere bzw. kleinere Werte bedeuten, daû
der Prozess eine grîûere bzw. kleinere Zeitscheibe besitzt.

Im Fehlerfall liefert die Funktion:
!begin_xlist !short [EFILNF :]
!item [EFILNF :]
der angegebene Prozess existiert nicht.
!item [EACCDN :]
der angegebene Prozess besitzt eine andere User-ID als der aufrufende
Prozess.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pnice
(!ende_liste)


!begin_node Bindings fÅr Prenice
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Prenice ( WORD pid, WORD delta );
!item [Assembler:]
!begin_verbatim
move.w    delta,-(sp)  ; Offset 4
move.w    pid,-(sp)    ; Offset 2
move.w    #295,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Prusage
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPrusageÆ - Informationen Åber Resourcenverbrauch ermitteln.
!item [Gemdosnummer:]
286
!item [Binding:]
(!link [Bindings fÅr Prusage] [Bindings fÅr Prusage])
!item [Beschreibung:]
Die Funktion liefert Informationen Åber den Bedarf an Systemresourcen des
aktuellen Prozesses.

Die Informationen werden im Array (!I)r(!i) nach auûen gereicht; es gilt
folgende Belegung:
!begin_xlist !short
!item [r[0]:]
Prozess-Zeit im Kernel
!item [r[1]:]
Prozess-Zeit im eigenen Programmcode
!item [r[2]:]
Gesamt-Prozesszeit der Childs im Kernel
!item [r[3]:]
Gesamt-Prozesszeit der Childs im eigenen Programmcode
!item [r[4]:]
Speicher der diesem Prozess gehîrt (in Bytes)
!item [r[5]:]
reserviert
!item [r[6]:]
reserviert
!item [r[7]:]
reserviert
!end_xlist
Alle Zeiten sind in Milli-Sekunden angegeben.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion hat kein direktes Ergebnis.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Psetlimit
(!ende_liste)


!begin_node Bindings fÅr Prusage
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Prusage ( LONG *r );
!item [Assembler:]
!begin_verbatim
pea       r            ; Offset 2
move.w    #286,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psemaphore
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsemaphoreÆ - erzeugen, anwenden, zerstîren einer Semaphore.
!item [Gemdosnummer:]
308
!item [Binding:]
(!link [Bindings fÅr Psemaphore] [Bindings fÅr Psemaphore])
!item [Beschreibung:]
Die Funktion implementiert nicht-zÑhlende Semaphore. Nur ein Prozess kann
einen Semaphor zur gleichen Zeit besitzen.

Semaphoren kînnen z.B. benutzt werden, um den Zugriff auf Datenstrukturen im
Shared Memory von unterschiedlichen Teilprozessen zu synchronisieren: So muû
ein Teilprozess, bevor er auf den Speicher zugreift, versuchen, in den
Besitzt des Semaphors zu kommen. Dieser kann z.B. bei der Initialisierung
erzeugt, und bei Programmende wieder entfernt werden.

Semaphore werden durch einen Namen identifiziert. Dieser Name ist ein
Langwort, das auch vier ASCII-Zeichen enthalten kann. Semaphore, deren Namen
mit dem Unterstrich '_' beginnen sind dabei fÅr das Betriebssystem
reserviert.

(!B)Der Parameter (!I)timeout(!i) wird nur im Modus 2 benutzt. Es gilt dabei
die folgende Belegung:(!b)
!begin_xlist !short [timeout]
!item [timeout]
= ~0: sofort zurÅckkehren
!item [~]
= -1: kein Timeout (Forever).
!end_xlist
Andere Werte fÅr (!I)timeout(!i) geben die Wartezeit in Millisekunden an,
bevor ein Timeout eintritt.

(!B)FÅr den Parameter (!I)mode(!i) sind folgende Werte mîglich:(!b)
!begin_xlist !short [mode]
!item [mode]
Bedeutung
!item [~]
~
!item [0]
Semaphore mit Kennung (!I)id(!i) erzeugen (und besitzen).
!item [1]
Semaphore mit Kennung (!I)id(!i) entfernen. Dies klappt nur, wenn der
Aufrufer die Semaphore besitzt.
!item [2]
Besitz der Semaphore mit Kennung (!I)id(!i) beantragen. Dies blockiert den
Aufrufer bis die Semaphore frei wird, oder ein Timeout eintritt.
!item [3]
Semaphore mit Kennung (!I)id(!i) freigeben. Dies klappt nur, wenn der
Aufrufer die Semaphore besitzt.
!end_xlist
(!B)Hinweis:(!b) Wenn ein Prozess eine Semaphore erzeugt, besitzt er sie
auch sofort. Damit andere Prozesse diese nutzen kînnen, muû sie zunÑchst
freigegeben werden. Da fÅr das Erzeugen einer Semphore interner Speicher
angefordert werden muss, sollte die Funktion sparsam verwendet werden.

Wenn ein blockierter Prozess auf eine Semaphore wartet (bevor der Timeout
eintritt), und ein anderer Prozess entfernt die Semaphore, dann kehrt die
Funktion Psemaphore mit der Meldung ERANGE zurÅck, da die angeforderte
Semaphore nicht lÑnger existiert.

Wenn ein Prozess terminiert, werden alle Semaphore die er besitzt,
automatisch freigegeben. Der Besitz einer Semaphore kann nicht vererbt
werden (etwa mit Pfork). Wenn ein Prozess eine Semaphore erzeugt und dann
abstÅrzt, bleibt die Semaphore erhalten, und kann nicht mehr entfernt
werden.

In MagiC sorgen PlausibilitÑtsÅberprÅfungen dafÅr, daû keine
System-Semaphoren freigegeben werden kînnen; auûerdem werden z.Zt. nur die
Modi 2 und 3 unterstÅtzt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in (!nolink [MagiC]) ab Version 3.0 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [ERANGE :]
!item [E_OK :]
kein Fehler aufgetreten.
!item [ERROR :]
es wurde eine Semaphore beantragt, die der Antragsteller bereits besitzt.
!item [EACCDN :]
es wurde versucht eine Semaphore zu erzeugen, die bereits existiert, der
Aufrufer ist nicht im Besitz der Semaphore oder ein Timeout ist eingetreten.
!item [ERANGE :]
der angegebene Semaphor existiert nicht.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Semaphoren in MagiC
(!ende_liste)


!begin_node Bindings fÅr Psemaphore
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psemaphore ( WORD mode, LONG id, LONG timeout );
!item [Assembler:]
!begin_verbatim
move.l    timeout,-(sp)  ; Offset 8
move.l    id,-(sp)       ; Offset 4
move.w    mode,-(sp)     ; Offset 2
move.w    #308,-(sp)     ; Offset 0
trap      #1             ; GEMDOS aufrufen
lea       $C(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psetauid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetauidÆ - User ID eines Prozesses zu Beginn setzen.
!item [Gemdosnummer:]
325
!item [Binding:]
(!link [Bindings fÅr Psetauid] [Bindings fÅr Psetauid])
!item [Beschreibung:]
Die Funktion setzt die Anfangs-User-ID des aktuellen Prozesses. Dies kann
nur einmal geschehen. Zusammen mit Pgetauid kann damit in einer
Multiuser-Umgebung festgestellt werden, wer der zuerst eingeloggte Benutzer
war. Der Parameter (!I)id(!i) ist die gewÅnschte Anfangs-ID.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
z.Zt. unbekannt
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pgetauid
(!ende_liste)


!begin_node Bindings fÅr Psetauid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Psetauid ( WORD id );
!item [Assembler:]
!begin_verbatim
move.w    id,-(sp)     ; Offset 2
move.w    #325,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node




!begin_node Psetegid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetegidÆ - sets the effective group id for the calling process.
!item [Gemdosnummer:]
324 (0x0144)
!item [Binding:]
(!link [Bindings fÅr Psetegid] [Bindings fÅr Psetegid])

!item [Beschreibung:]
(!I)egid(!i) specifies the new effective group id for the calling process.

Prior to MiNT version 1.12 this call contained a bug affecting its functionality.
Setting effective group id needs root privileges.

This call is often used by daemon processes to downgrade their privileges to
user level.

!item [Ergebnis:]
Returns new egid on success or a negative GEMDOS error code otherwise.

!item [VerfÅgbar:]
MiNT 1.11

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pseteuid ~ Psetgid ~ Psetregid
(!ende_liste)


!begin_node Bindings fÅr Psetegid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG  Psetegid ( WORD egid );
!item [Assembler:]
!begin_verbatim
move.w    egid,-(sp)   ; Offset 2
move.w    #324,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Pseteuid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPseteuidÆ - sets the effective user id for the calling process.
!item [Gemdosnummer:]
323 (0x0143)
!item [Binding:]
(!link [Bindings fÅr Pseteuid] [Bindings fÅr Pseteuid])

!item [Beschreibung:]
(!I)euid(!i) specifies the new effective user id for the calling process.

Prior to MiNT version 1.12 this call contained a bug affecting its functionality.
Setting effective user id needs root privileges.

This call is often used by daemon processes to downgrade their privileges to
user level.

!item [Ergebnis:]
Returns new euid on success or a negative GEMDOS error code otherwise.

!item [VerfÅgbar:]
MiNT 1.11

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetegid ~ Psetuid ~ Psetreuid
(!ende_liste)


!begin_node Bindings fÅr Pseteuid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG  Pseteuid ( WORD euid );
!item [Assembler:]
!begin_verbatim
move.w    euid,-(sp)   ; Offset 2
move.w    #323,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Psetgid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetgidÆ - Gruppen ID eines Prozesses verÑndern.
!item [Gemdosnummer:]
277
!item [Binding:]
(!link [Bindings fÅr Psetgid] [Bindings fÅr Psetgid])
!item [Beschreibung:]
Die Funktion setzt die Gruppen-ID des aktuellen Prozesses auf (!I)id(!i).
Dies muû eine Zahl von 0 bis 255 sein.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EACCDN :]
!item [0-255 :]
kein Fehler aufgetreten (die neue ID).
!item [EACCDN :]
der Prozess hat keine Berechtigung, seine ID zu verÑndern.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetuid
(!ende_liste)


!begin_node Bindings fÅr Psetgid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Psetgid ( WORD id );
!item [Assembler:]
!begin_verbatim
move.w    id,-(sp)     ; Offset 2
move.w    #277,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node




!begin_node Psetgroups
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetgroupsÆ - sets the supplementary group ids for the calling process.

!item [Gemdosnummer:]
328 (0x0148)

!item [Binding:]
(!link [Bindings fÅr Psetgroups] [Bindings fÅr Psetgroups])

!item [Beschreibung:]
This function sets the supplementary group ids for the calling process.

(!I)len(!i) specifies the length (in 
words) of the array containing the supplementary group ids to be 
set. This value must be a positive number not greater than 
NGROUPS_MAX. If (!I)len(!i) is a zero, the call will return the 
number of supplementary group ids those have been set.

(!I)gidset(!i) is a pointer to a word array containing the new 
supplementary group ids for the process.

Setting new supplementary group ids needs root privileges.

The NGROUPS_MAX value is returned by Sysconf().
!item [Ergebnis:]
Returns a number of new supplementary group ids for the process on success 
or a negative GEMDOS error code otherwise.

!item [VerfÅgbar:] Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht ab MiNT 1.11 zu VerfÅgung.

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])


!item [Querverweis:] Pgetgroups ~  Sysconf
(!ende_liste)


!begin_node Bindings fÅr Psetgroups
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psetgroups( WORD len, WORD *gidset);

!item [Assembler:]
!begin_verbatim
peam      gidset       ; Offset 4
move.w    len,-(sp)    ; Offset 2
move.w    #328,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Psetlimit
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetlimitÆ - Limits der Systemresourcen setzen/erfragen.
!item [Gemdosnummer:]
287
!item [Binding:]
(!link [Bindings fÅr Psetlimit] [Bindings fÅr Psetlimit])
!item [Beschreibung:]
Die Funktion dient dem Setzen/Abfragen einer Resourcenbegrenzung fÅr den
aktuellen Prozess. Der Parameter (!I)lim(!i) bestimmt die gewÅnschte
Resource-Art:
!begin_xlist !short [lim]
!item [lim]
Bedeutung
!item [~]
~
!item [1]
max. CPU-Zeit fÅr den Prozess (Millisekunden)
!item [2]
max. Gesamtspeicher des Prozesses in Bytes
!item [3]
max. allozierbarer Speicher fÅr den Prozess (in Bytes).
!end_xlist
Der Unterschied zwischen 2 und 3 besteht darin, daû der Gesamtspeicher auch
die TEXT-, DATA- und BSS-Segmente des Prozesses umfaût.

Mit Hilfe dieser Funktion werden die Resource-Begrenzungen sowohl fÅr den
aktuellen Prozess, als auch fÅr alle spÑter erzeugten Childs einzeln
eingestellt. Wenn ein Prozess also ein CPU-Limit einstellt, und danach
mehrere Child-Prozesse erzeugt, dann gilt dieses CPU-Limit auch fÅr jeden
einzelnen Child, und nicht etwa fÅr alle Childs zusammen.

Der Parameter (!I)value(!i) bestimmt den Wert, den eine Resource annehmen
soll. Ein Wert von 0 bedeutet in diesem Zusammenhang, daû die Resource
unbegrenzt ist. Ein negativer Wert lÑût die Resource unverÑndert.

(!B)Hinweis:(!b) Es gibt keine Restriktionen beim Vergrîûern der
Begrenzungen. Jeder Prozess kann jede seiner Begrenzungen beliebig verÑndern
oder sogar auf unbegrenzt setzen.

Speicherbegrenzungen kommen bei Pexec nicht zur Anwendung. Ist z.B. ein
Prozess auf 256Kbyte begrenzt, kann er dennoch mit (!nolink [Pexec]) einen
Tochterprozess starten, der mehr Speicher verbraucht. (!B)Achtung:(!b) Dies
gilt (!I)nicht(!i) in MagiC; hier werden Speicherbegrenzungen bei (!nolink [Pexec])
vererbt!

Speicherbegrenzungen sind nicht rÅckwirkend gÅltig. Besitzt ein Prozess z.B.
256Kbyte und ruft dann Psetlimit auf, um seinen Bedarf auf 128Kbyte zu
reduzieren, dann wird er zwar nicht beendet, aber er kann keinen Speicher
mehr allozieren, bis seine Grîûe unter die angegebenen 128Kbyte fÑllt.

Begrenzungen der CPU-Zeit wirken hingegen rÅckwirkend. VerkÅrzt ein Prozess
seine CPU-Zeit unter den bisher gÅltigen Wert, dann empfÑngt er sofort ein
SIGXCPU-Signal.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.0 (17.09.1996)
zur VerfÅgung; allerdings ist hier z.Zt. nur die Unterfunktion (lim = 3)
implementiert.

(!B)Hinweis zu (!nolink [MagiC]):(!b) Ist ein Programm mit dem Dienstprogramm LIMITMEM
modifiziert worden, hat diese Einstellung Vorrang vor dem Speicherlimit des
aufrufenden Prozesses. Psetlimit wird vom erweiterten shel_write()-Modus
unterstÅtzt; damit kînnen speicherbeschrÑnkte Applikationen auch parallel
gestartet werden.
!item [Ergebnis:]
Die Funktion liefert den alten Begrenzungswert zurÅck.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Prusage  ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psetlimit
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psetlimit ( WORD lim, LONG value );
!item [Assembler:]
!begin_verbatim
move.l    value,-(sp)  ; Offset 4
move.w    lim,-(sp)    ; Offset 2
move.w    #287,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node




!begin_node Psetpgrp
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetpgrpÆ - Prozess Gruppennummer eines Prozesses setzen.
!item [Gemdosnummer:]
270
!item [Binding:]
(!link [Bindings fÅr Psetpgrp] [Bindings fÅr Psetpgrp])
!item [Beschreibung:]
Die Funktion verÑndert die Gruppennummer des Prozesses mit der Kennung
(!I)pid(!i) auf den Wert (!I)newgrp(!i). Der Prozess muû die gleiche UID wie
der aktuelle Prozess besitzen, oder aber ein Child desselben sein.

Falls (!I)pid(!i) = 0 ist, wird die Prozessgruppe des aktuellen Prozesses
gesetzt. Falls (!I)newgrp(!i) = 0 ist, wird die Prozessgruppe auf den Wert
der PID des aktuellen Prozesses gesetzt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EACCDN :]
!item [>= 0 :]
kein Fehler (neue Prozessgruppen-Nummer).
!item [EFILNF :]
der Prozess (!I)pid(!i) existiert nicht.
!item [EACCDN :]
der Prozess (!I)pid(!i) besitzt eine andere UID, und ist kein Child des
aufrufenden Prozesses.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pkill ~  Pgetpgrp ~  Pgetpid
(!ende_liste)


!begin_node Bindings fÅr Psetpgrp
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Psetpgrp ( WORD pid, WORD newgrp );
!item [Assembler:]
!begin_verbatim
move.w    newgrp,-(sp)  ; Offset 4
move.w    pid,-(sp)     ; Offset 2
move.w    #270,-(sp)    ; Offset 0
trap      #1            ; GEMDOS aufrufen
addq.l    #6,sp         ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node




!begin_node Psetpriority
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetpriorityÆ - sets the current priority value for a process.

!item [Gemdosnummer:]
345 (0x0159)

!item [Binding:]
(!link [Bindings fÅr Psetpriority] [Bindings fÅr Psetpriority])

!item [Beschreibung:]
This function  sets the priority (!I)pri(!i) (not an increment but an absolute value)
for the processes specified by (!I)which(!i) and (!I)who(!i). The interpretation
of parameter (!I)who(!i) depends on (!I)which(!i):

PRIO_PROCESS (0) sets the priority of process with process 
id (!I)which(!i). A (!I)who(!i) of 0 implies the process id of the calling process.

PRIO_PGRP (1) sets the priority of the process group with 
process group id (!I)who(!i). A (!I)who(!i) of 0 implies the process group id of
the calling process.

PRIO_USER (2) sets the priority of the process of the user 
with user id (!I)who(!i). A (!I)who(!i) of 0 implies the user 
id of the calling process.

!label PRIO_MIN
!label PRIO_MAX
The (!I)pri(!i) argument is silently changed to the maximum 
(resp. minimum) possible value if it is not in the range between 
PRIO_MIN (-20) and PRIO_MAX (+20).

This call makes calls Pnice and Prenice obsolete.

!item [Ergebnis:]
The function returns E_OK 
on success or a negative error code otherwise. The following error 
conditions are defined:

EINVAL, invalid argument for (!I)who(!i), 
(!I)which(!i) or (!I)pri(!i).

EACCES, the calling process is not an owner of one or more of 
the selected processes. The other selected processes are still affected.
EPERM, the calling process does not have privileges to change 
the priority of one or more of the selected processes. This can only 
happen if an attempt was made to change the priority of a process to a 
positive value.

ESRCH, the combination of (!I)which(!i) and 
(!I)who(!i) does not match any existing process.

The error condition reported is the last error condition encountered 
(in other words if both EACCES and EPERM occur the return 
value is arbitrary).

!item [VerfÅgbar:]
MiNT 1.15.0

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pgetpriority
(!ende_liste)


!begin_node Bindings fÅr Psetpriority
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psetpriority ( WORD which, WORD who, WORD pri );
!item [Assembler:]
!begin_verbatim
move.w    pri,-(sp)    ; Offset 6
move.w    who,-(sp)    ; Offset 4
move.w    which,-(sp)  ; Offset 2
move.w    #345,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Psetregid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetregidÆ - sets the real and/or effective group id for the calling process.

!item [Gemdosnummer:]
335 (0x014f)

!item [Binding:]
(!link [Bindings fÅr Psetregid] [Bindings fÅr Psetregid])

!item [Beschreibung:]
This function sets the real and/or effective group id for the calling process.

(!I)rgid(!i) specifies the new real 
group id and (!I)egid(!i) specifies the new effective group 
id for the calling process. If either argument is -1, only the 
other gets changed

Setting group ids needs root privileges.

This call is often used by daemon processes to downgrade their privileges
to user level.

!item [Ergebnis:]
Returns E_OK on success or a negative error code otherwise.

!item [VerfÅgbar:]
MiNT 1.12

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetreuid ~ Psetegid
(!ende_liste)


!begin_node Bindings fÅr Psetregid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psetregid ( WORD rgid, WORD egid);
!item [Assembler:]
!begin_verbatim
move.w    egid,-(sp)   ; Offset 4
move.w    rgid,-(sp)   ; Offset 2
move.w    #335,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Psetreuid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetregidÆ - sets the real and/or effective user id for the calling process.

!item [Gemdosnummer:]
334 (0x014e)

!item [Binding:]
(!link [Bindings fÅr Psetreuid] [Bindings fÅr Psetreuid])

!item [Beschreibung:]
This function sets the real and/or effective user id for the calling process.

(!I)ruid(!i) specifies the new real user id and (!I)euid(!i) specifies the
new effective  user id for the calling process. If either argument is -1, only 
the other gets changed.

Setting user ids needs root privileges.

This call is often used by daemon processes to downgrade their privileges
to user level.

!item [Ergebnis:]
Returns E_OK on success or a negative GEMDOS error code otherwise.

!item [VerfÅgbar:]
MiNT 1.12

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Psetregid ~ Pseteuid
(!ende_liste)


!begin_node Bindings fÅr Psetreuid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psetreuid ( WORD ruid, WORD euid);
!item [Assembler:]
!begin_verbatim
move.w    euid,-(sp)   ; Offset 4
move.w    ruid,-(sp)   ; Offset 2
move.w    #334,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Psetuid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsetuidÆ - User ID eines Prozesses verÑndern.
!item [Gemdosnummer:]
272
!item [Binding:]
(!link [Bindings fÅr Psetuid] [Bindings fÅr Psetuid])
!item [Beschreibung:]
Die Funktion setzt die User ID des aktuellen Prozesses auf (!I)id(!i). Dies
muû eine Zahl von 0 bis 255 sein. Die Funktion schlÑgt fehl, wenn die
User-ID des Prozesses nicht den Wert 0 besitzt, d.h. einmal gesetzt, kann
die User-ID nicht mehr verÑndert werden.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EACCDN :]
!item [0-255 :]
kein Fehler aufgetreten (die neue ID).
!item [EACCDN :]
der Prozess hat keine Berechtigung, seine ID zu verÑndern.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Psetgid
(!ende_liste)


!begin_node Bindings fÅr Psetuid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Psetuid ( WORD id );
!item [Assembler:]
!begin_verbatim
move.w    id,-(sp)     ; Offset 2
move.w    #272,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psigaction
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigactionÆ - Art der Signalbehandlung verÑndern.
!item [Gemdosnummer:]
311
!item [Binding:]
(!link [Bindings fÅr Psigaction] [Bindings fÅr Psigaction])
!item [Beschreibung:]
Die Funktion Ñndert die Art und Weise, wie auf das Signal (!I)sig(!i)
reagiert werden soll. Der Parameter (!I)act(!i) ist dabei entweder NULL,
oder zeigt auf eine sigaction-Struktur, die das Verhalten des
Signal-Handlings beschreibt. FÅr die Komponente (!I)sa_handler(!i) gilt
dabei:
!begin_xlist !short [sa_handler]
!item [sa_handler]
Bedeutung
!item [~]
~
!item [0]
beim Eintreffen des Signals wird die Default-Aktion fÅr das Signal
ausgefÅhrt.
!item [1]
das Signal (!I)sig(!i) wird ignoriert. Liegt es gerade an, so wird es
gelîscht.
!end_xlist
Jeder andere Wert von (!I)sa_handler(!i) wird als die Adresse einer Funktion
interpretiert, die beim Auftreten des Signals aufgerufen wird. öber den
Stack wird dieser Funktion ein Long-Wert Åbergeben, der der jeweiligen
Signalnummer entspricht. Auf diese Art und Weise ist es mîglich, den
Signal-Handler fÅr mehrere Signale zu benutzen.

Solange ein Signal bearbeitet wird, kann es nicht erneut gesendet werden. Zu
beachten ist ferner, daû (im Gegensatz zu einigen Unix-Versionen) das
Signal-Handling vor der AusfÅhrung des Handlers nicht auf den
Default-Handler zurÅckgesetzt wird.

Der Signalhandler muû entweder mit RTS (Return to Sender) beendet werden,
oder Psigreturn aufrufen, um anzuzeigen, daû die Signalbehandlung
abgeschlossen ist. Anschlieûend wird die Blockierung des Signals aufgehoben.
(!nolink [Psigreturn]) fÅhrt zusÑtzlich einige interne SÑuberungen des Kernels durch,
die notwendig sind, falls der Signal-Handler nicht beendet wird (longjump).

Signalhandler kînnen beliebige BIOS, XBIOS und GEMDOS Aufrufe machen. AES-
oder VDI-Aufrufe sind hingegen nicht gestattet. Dies gilt jedoch nicht in
MagiC; hier gibt es einige Unterschiede zu beachten.

Ein Aufruf von Psigaction hat den Nebeneffekt, daû das Signal demaskiert
(d.h. freigegeben) wird. So kann ein Prozess beim Abarbeiten eines Signals
dieses zurÅcksetzen und es sich erneut zusenden, um sich beispielsweise
selbst zu suspendieren, wÑhrend ein Signal fÅr Job-Control bearbeitet wird.
Die Signalbearbeitung ist gegenÅber Pfork/Pvfork abgesichert.

(!nolink [Signale]), die von einem Prozess ignoriert werden, werden auch vom Child nach
einem Pexec-Aufruf ignoriert. Auûerdem werden Signale, die von einem
Signal-Handler abgefangen werden, im Child-Prozess auf den Defaultwert
zurÅckgesetzt.

Die Komponente (!I)sa_flags(!i) der sigaction-Struktur definiert ein
zusÑtzliches, Signal-spezifisches Verhalten. Wenn (!I)sig(!i) das Signal
SIGCHLD ist, und in (!I)sa_flags(!i) das SA_NOCLDSTOP Bit gesetzt ist, wird
SIGCHLD dem Prozess nur dann gesendet, wenn einer seiner Childs terminiert
(und eben nicht dann, wenn ein Child durch ein Job-Control-Signal
suspendiert wird).

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in (!nolink [MagiC]) ab Version 4.50 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [ERANGE :]
!item [E_OK :]
kein Fehler aufgetreten.
!item [EACCDN :]
Signal kann vom Benutzer nicht abgefangen werden.
!item [ERANGE :]
(!I)sig(!i) ist kein gÅltiges Signal.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pkill ~ Psigblock ~ Psignal ~ Psigreturn ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psigaction
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psigaction ( WORD sig, struct sigaction *act, struct sigaction *oact );
!item [Assembler:]
!begin_verbatim
pea       oact         ; Offset 8
pea       act          ; Offset 4
move.w    sig,-(sp)    ; Offset 2
move.w    #311,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $C(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psigblock
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigblockÆ - Signalmaske verÑndern.
!item [Gemdosnummer:]
278
!item [Binding:]
(!link [Bindings fÅr Psigblock] [Bindings fÅr Psigblock])
!item [Beschreibung:]
Die Funktion fÅgt die in (!I)mask(!i) angegebenen Signale der Menge der
aktuell blockierenden (!nolink [Signale]) hinzu. Dabei reprÑsentiert jedes Bit des
Parameters (!I)mask(!i) ein Signal. Wenn Bit n in (!I)mask(!i) gesetzt ist,
bedeutet dies, daû das Signal mit der Nummer n blockiert wird.

Zu beachten ist, daû manche (!nolink [Signale]) (z.B. SIGKILL) nicht blockiert werden
kînnen. Der Kernel wird diese (!nolink [Signale]) aus (!I)mask(!i) lîschen, bevor die
jeweilige énderung der Signalmengen vorgenommen wird.

Ferner sei darauf hingewiesen, daû blockierte (!nolink [Signale]) auch Åber Pfork/Pvfork
Aufrufe hinweg blockiert bleiben. Nach einem Pexec-Aufruf startet der Child
stets mit einer leeren Menge zu blockierender (!nolink [Signale]), unabhÑngig davon,
welche Signale vom Parent blockiert wurden.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.50 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion liefert die Menge der blockierten (!nolink [Signale]) zurÅck, die vor dem
Aufruf gÅltig waren. öber einen Aufruf von (!nolink [Psigsetmask]) kann so die alte
Menge wieder hergestellt werden.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Psigsetmask ~  Signale
(!ende_liste)


!begin_node Bindings fÅr Psigblock
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psigblock ( LONG mask );
!item [Assembler:]
!begin_verbatim
move.l    mask,-(sp)   ; Offset 2
move.w    #278,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node




!begin_node Psigintr
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigintrÆ - assigns a signal to a particular exception vector.

!item [Gemdosnummer:]
318 (0x013e)

!item [Binding:]
(!link [Bindings fÅr Psigintr] [Bindings fÅr Psigintr])
!item [Beschreibung:]
This function assigns a signal to a particular exception vector. When
the exception occurs, the kernel will send the signal to the process.

(!I)vec(!i) specifies the exception vector. This is the same value as
specified for Setexc() call. (!I)sig(!i) specifies the signal number that is 
supposed to be delivered when an exception assigned to the vector 
(!I)vec(!i) occurs. When both (!I)sig(!i) and (!I)vec(!i) are zero, all 
handlers installed by your program are removed.

You should install a signal handler 
prior to making this call, otherwise your process will most probably 
get killed by the first occurrance of the interrupt assigned to 
vec vector. (!nl)
Also notice that the function is not available on machines 
equipped with 68000 and 68010 processors.

This function has been totally rewritten as of MiNT version 1.15.1. However,
the only change visible to programs is that the old value of vec is no longer
returned (it had little use anyway). Also, since long stack frames are needed, a 
68020 or newer processor is required.

The handler set up by Psigintr gets removed when your process terminates.

!item [Ergebnis:]
Eeturns E_OK on success, or a negative GEMDOS error code otherwise: 

EBADARG, a signal or vector number was specified outside the 
allowed range. Only autovectors ($60-$7c), traps ($80-$bc) and 
user defined interrupts ($0100-$03fc) are allowed (other interrupts 
already generate fixed signals).

ENOMEM, the kernel ran out of memory while trying to allocate 

RAM for internal structures needed by this call.

ENXIO, the interrupt you want to register has no service 
routine (!nolink [installed]).

ENOSYS, the function is not available (wrong architecture).

!item [VerfÅgbar:]
When a 'MiNT' cookie with a version of at least 1.11 exists. As of MiNT version 
1.15.1 this call is available only on machines equipped with 68020 
processor or newer.

!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])

!item [Querverweis:] Pause ~ Pkill ~ Psigsetmask ~ Psignal ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psigintr
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG  Psigintr ( WORD vec, WORD sig );
!item [Assembler:]
!begin_verbatim
move.w    sig,-(sp)    ; Offset 4
move.w    vec,-(sp)    ; Offset 2
move.w    #318,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node




!begin_node Psignal
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsignalÆ - Art der Signalbehandlung verÑndern.
!item [Gemdosnummer:]
274
!item [Binding:]
(!link [Bindings fÅr Psignal] [Bindings fÅr Psignal])
!item [Beschreibung:]
Die Funktion Ñndert die Art und Weise, wie auf das Signal (!I)sig(!i)
reagiert werden soll. Der Parameter (!I)handler(!i) kann 3 verschiedene
Werte annehmen:
!begin_xlist !short [handler]
!item [handler]
Bedeutung
!item [~]
~
!item [0]
Das Signal wird mit der Default-Aktion beantwortet.
!item [1]
Das Signal wird ignoriert. Liegt es gerade an, so wird es gelîscht.
!end_xlist
Jeder andere Wert wird als die Adresse einer Benutzerfunktion interpretiert,
die beim Auftreten des Signals (!I)sig(!i) aufgerufen wird. Dieser Funktion
wird (Åber den Stack) ein Long-Wert Åbergeben, welcher der Signalnummer
entspricht. Auf diese Art ist es mîglich, den Signal-Handler fÅr mehrere
Signale zu benutzen.

Solange ein Signal bearbeitet wird, kann es nicht erneut gesendet werden. Zu
beachten ist ferner, daû (im Gegensatz zu einigen Unix-Versionen) das
Signal-Handling vor der AusfÅhrung des Handlers nicht auf den
Default-Handler zurÅckgesetzt wird.

Der Signalhandler muû entweder mit RTS (Return to Sender) beendet werden,
oder Psigreturn aufrufen, um anzuzeigen, daû die Signalbehandlung
abgeschlossen ist. Anschlieûend wird die Blockierung des Signals aufgehoben.
(!nolink [Psigreturn]) fÅhrt zusÑtzlich einige interne SÑuberungen des Kernels durch,
die notwendig sind, falls der Signal-Handler nicht beendet wird (longjump).

Signalhandler kînnen beliebige BIOS, XBIOS und GEMDOS Aufrufe machen. AES-
oder VDI-Aufrufe sind hingegen nicht gestattet.  Dies gilt jedoch nicht in
MagiC; hier gibt es einige Unterschiede zu beachten.

Ein Aufruf von Psignal hat den Nebeneffekt, daû das Signal demaskiert (d.h.
freigegeben) wird. So kann ein Prozess beim Abarbeiten eines Signals dieses
zurÅcksetzen und es sich erneut zusenden, um sich beispielsweise selbst zu
suspendieren, wÑhrend ein Signal fÅr Job-Control bearbeitet wird. Die
Signalbearbeitung ist gegenÅber Pfork/Pvfork abgesichert.

Signale, die von einem Prozess ignoriert werden, werden auch vom Child nach
einem Pexec-Aufruf ignoriert. Auûerdem werden Signale, die von einem
Signal-Handler abgefangen werden, im Child-Prozess auf den Defaultwert
zurÅckgesetzt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in (!nolink [MagiC]) ab Version 4.50 zur VerfÅgung.

!item [Ergebnis:]
Die Funktion liefert den alten Wert des Signal-Handlers zurÅck. Dies ist
entweder 0, 1 oder die Adresse des Handlers.

Im Fehlerfall werden folgende Werte zurÅckgeliefert:
!begin_xlist !short [ERANGE :]
!item [EACCDN :]
das Signal kann nicht abgefangen werden.
!item [ERANGE :]
(!I)sig(!i) ist kein gÅltiges Signal.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pkill  ~ Psigaction ~  Psigblock ~  Psigreturn ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psignal
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psignal ( WORD sig, LONG handler );
!item [Assembler:]
!begin_verbatim
move.l    handler,-(sp)  ; Offset 4
move.w    sig,-(sp)      ; Offset 2
move.w    #274,-(sp)     ; Offset 0
trap      #1             ; GEMDOS aufrufen
addq.l    #8,sp          ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psigpause
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigpauseÆ - Prozess bis zum Eintreffen eines Signals suspendieren.
!item [Gemdosnummer:]
310
!item [Binding:]
(!link [Bindings fÅr Psigpause] [Bindings fÅr Psigpause])
!item [Beschreibung:]
Die Funktion setzt die neue Signalmaske (!I)mask(!i), und suspendiert den
aufrufenden Prozess, bis ein Signal eintrifft, welches nicht maskiert ist
oder ignoriert wird.

Falls per Psignal fÅr dieses Signal ein Handler installiert wurde, wird
dieser aufgerufen, bevor die Funktion zurÅckkehrt. Falls der Handler einen
longjump in einen anderen Programmteil ausfÅhrt oder der Prozess terminiert,
wird die Funktion niemals zurÅckkehren.

(!B)Hinweis:(!b) Wenn die Funktion zurÅckkehrt, wird die Signalmaske auf den
Wert zurÅckgesetzt, der vor dem Aufruf von Psigpause gÅltig war. Die von der
Funktion gesetzte Signalmaske ist also nur temporÑr gÅltig. In MagiC kann es
Probleme geben wenn mehrere Threads gleichzeitig diese Funktion aufrufen, da
die Signalmaske hier prozessglobal ist.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in (!nolink [MagiC]) ab Version 4.50 zur VerfÅgung.

!item [Ergebnis:]
Die Funktion hat kein direktes Ergebnis.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pause ~  Psigblock ~  Psignal ~  Psigsetmask ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psigpause
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Psigpause ( LONG mask );
!item [Assembler:]
!begin_verbatim
move.w    mask,-(sp)   ; Offset 2
move.w    #310,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psigpending
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigpendingÆ - feststellen welche (!nolink [Signale]) abgeschickt, aber nicht
bearbeitet wurden.
!item [Gemdosnummer:]
291
!item [Binding:]
(!link [Bindings fÅr Psigpending] [Bindings fÅr Psigpending])
!item [Beschreibung:]
Die Funktion liefert die Signale, die dem aufrufenden Prozess zwar gesendet,
aber nicht bearbeitet wurden. (z.B. weil sie per Psigblock blockiert sind
oder weil sie gerade in Bearbeitung sind).

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.50 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion liefert die gewÅnschten (!nolink [Signale]) zurÅck.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Psigblock ~  Psignal ~  Psigsetmask ~ Signale
(!ende_liste)


!begin_node Bindings fÅr Psigpending
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psigpending ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #291,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psigreturn
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigreturnÆ - Verlassen eines Signal Handlers.
!item [Gemdosnummer:]
282
!item [Binding:]
(!link [Bindings fÅr Psigreturn] [Bindings fÅr Psigreturn])
!item [Beschreibung:]
Die Funktion bereitet das Verlassen eines Signal-Handlers vor. Da dies
automatisch geschieht wenn der Handler zurÅckkehrt, ist ein Aufruf von
Psigreturn nur notwendig, falls der Handler einen nicht-lokalen Sprung
durchfÅhrt (etwa per longjump).

Der Aufruf hat keine Wirkung, wenn z.Zt. kein Signal bearbeitet wird.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.50 zur VerfÅgung.

In (!nolink [MagiC]) wird der Thread der aktiven Signalbehandlung zum Haupt-Thread des
Prozesses und anschlieûend entfernt. Alle anderen Signalbehandlungen werden
ebenfalls entfernt (Verschachtelung). Die gesperrten Semaphoren des
Haupt-Thread werden freigegeben, der Supervisor-Stack wird auf den Wert bei
Prozeûstart zurÅckgesetzt.
!item [Ergebnis:]
Die Funktion besitzt unter MiNT/MultiTOS (!I)kein(!i) direktes Ergebnis; in
(!nolink [MagiC]) wird der Wert EACCDN zurÅckgeliefert falls der Aufrufer (!I)keine(!i)
Signalbehandlungsroutine ist, und anderenfalls der Wert E_OK.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Psignal ~  Signale ~  Signalhandler in MagiC
(!ende_liste)


!begin_node Bindings fÅr Psigreturn
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Psigreturn ( VOID );
(!nl)
LONG Psigreturn ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #282,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Psigsetmask
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPsigsetmaskÆ - Signalmaske ersetzen.
!item [Gemdosnummer:]
279
!item [Binding:]
(!link [Bindings fÅr Psigsetmask] [Bindings fÅr Psigsetmask])
!item [Beschreibung:]
Die Funktion ersetzt die Menge der aktuell zu blockierenden Signale
vollstÑndig durch die im Parameter (!I)mask(!i) spezifizierten (!nolink [Signale]).

Zu beachten ist, daû manche (!nolink [Signale]) (z.B. SIGKILL) nicht blockiert werden
kînnen. Der Kernel wird diese (!nolink [Signale]) aus (!I)mask(!i) lîschen, bevor die
jeweilige énderung der Signalmengen vorgenommen wird.

Ferner sei darauf hingewiesen, daû blockierte Signale auch Åber Pfork/Pvfork
Aufrufe hinweg blockiert bleiben. Nach einem Pexec-Aufruf startet der Child
stets mit einer leeren Menge zu blockierender (!nolink [Signale]), unabhÑngig davon,
welche (!nolink [Signale]) vom Parent blockiert wurden.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 4.50 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion liefert die Menge der blockierten (!nolink [Signale]) zurÅck, die vor dem
Aufruf gÅltig waren.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Psigblock ~  Signale ~  Signalhandler in MagiC
(!ende_liste)


!begin_node Bindings fÅr Psigsetmask
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Psigsetmask ( LONG mask );
!item [Assembler:]
!begin_verbatim
move.l    mask,-(sp)   ; Offset 2
move.w    #279,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pterm
(!begin_liste) [Beschreibung:]
!item [Name:]
Øprocess terminationÆ - beendet ein TOS-Programm.
!item [Gemdosnummer:]
76
!item [Binding:]
(!link [Bindings fÅr Pterm] [Bindings fÅr Pterm])
!item [Beschreibung:]
Die GEMDOS-Routine Pterm beendet den laufenden Prozess, und entfernt diesen
aus dem Speicher. Es gilt:
!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [retcode]
Status, der an das aufrufende Programm zurÅckgegeben wird.
!begin_xlist !short [-32 =]
!item [-32 =]
sollte nicht benutzt werden, da man diesen Wert bei per Control-C
abgebrochenen Programmen erhÑlt.
!item [-1 =]
sollte nicht benutzt werden, da dieser Wert ab (!nolink [GEMDOS]) 0.15 bei einem
Programmabsturz zurÅckgeliefert wird.
!item [0 =]
kein Fehler aufgetreten
!item [1 =]
allgemeiner Fehler
!item [2 =]
Fehler in den Parametern
!end_xlist
!end_xlist
(!B)Hinweis zu (!nolink [MagiC]):(!b) Bevor irgendwelche Maûnahmen ergriffen werden,
wird Åber Setexc der Vektor etv_term ermittelt und Åber diesen gesprungen.
Anschlieûend wird der Prozeû ordentlich abgerÑumt (einschlieûlich
(!nolink [VDI])-Workstations, Informierung aller XFSs Åber xfs_pterm, schlieûen aller
geîffneten Dateien und aktuellen Pfade und Lîschen der Prozeûdatei im
Verzeichnis U:\PROC).
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pexec ~  Pterm0 ~  Ptermres ~
                     (!link [XFS-Konzept in MagiC][Das XFS-Konzept von MagiC])
(!ende_liste)


!begin_node Bindings fÅr Pterm
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Pterm ( UWORD retcode );
!item [Assembler:]
!begin_verbatim
move.w    retcode,-(sp)  ; Offset 2
move.w    #76,-(sp)      ; Offset 0
trap      #1             ; GEMDOS aufrufen
addq.l    #4,sp          ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pterm0
(!begin_liste) [Beschreibung:]
!item [Name:]
Øprocess terminationÆ - beendet ein TOS-Programm.
!item [Gemdosnummer:]
0
!item [Binding:]
(!link [Bindings fÅr Pterm0] [Bindings fÅr Pterm0])
!item [Beschreibung:]
Die GEMDOS-Routine Pterm0 beendet ein TOS-Programm und kehrt nicht wieder
zurÅck. Die Routine liefert den Return-Code 0 zurÅck.

(!B)Hinweis:(!b) In MagiC wird diese Funktion direkt als Pterm(0)
ausgefÅhrt.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pexec ~  Pterm ~  Ptermres
(!ende_liste)


!begin_node Bindings fÅr Pterm0
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Pterm0 ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #0,-(sp)     ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Ptermres
(!begin_liste) [Beschreibung:]
!item [Name:]
Øterminate and stay residentÆ - Programm beenden, aber im Speicher behalten.
!item [Gemdosnummer:]
49
!item [Binding:]
(!link [Bindings fÅr Ptermres] [Bindings fÅr Ptermres])
!item [Beschreibung:]
Die GEMDOS-Routine Ptermres beendet ein Programm, das Programm wird jedoch
im Speicher gehalten. Es gilt:
!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [keepcnt]
Anzahl der Bytes, die resident gehalten werden sollen (gilt ab Anfang der
Basepage, Minimum sind 128 Bytes).
!item [retcode]
Status, der an das aufrufende Programm zurÅckgegeben wird.
!begin_xlist !short [-32 =]
!item [-32 =]
sollte nicht benutzt werden, da man diesen Wert bei per Control-C
abgebrochenen Programmen erhÑlt.
!item [-1 =]
sollte nicht benutzt werden, da dieser Wert ab (!nolink [GEMDOS]) 0.15 bei einem
Programmabsturz zurÅckgeliefert wird.
!item [0 =]
kein Fehler aufgetreten
!item [1 =]
allgemeiner Fehler
!item [2 =]
Fehler in den Parametern
!end_xlist
!end_xlist
(!B)Hinweis:(!b) Im Netzwerk werden alle Lockings des Prozesses aufgehoben.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pexec ~  Pterm ~  Pterm0
(!ende_liste)


!begin_node Bindings fÅr Ptermres
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Ptermres ( LONG keepcnt, WORD retcode );
!item [Assembler:]
!begin_verbatim
move.w    retcode,-(sp)  ; Offset 6
move.l    keepcnt,-(sp)  ; Offset 2
move.w    #49,-(sp)      ; Offset 0
trap      #1             ; GEMDOS aufrufen
addq.l    #8,sp          ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pumask
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPumaskÆ - Datei und Verzeichnis Erstellungsmaske setzen.
!item [Gemdosnummer:]
307
!item [Binding:]
(!link [Bindings fÅr Pumask] [Bindings fÅr Pumask])
!item [Beschreibung:]
Die Funktion Ñndert die Datei-/Verzeichnis Erstellungsmaske des aktuellen
Prozesses auf (!I)mode(!i). Der neue Wert der Maske wird an Child-Prozesse
vererbt.

Wenn eine neue Datei (per Fcreate) oder ein neues Verzeichnis (per Dcreate)
erzeugt wird, werden die Zugriffsrechte normalerweise so gesetzt, daû ein
voller Zugriff erlaubt ist. (Ausnahme: neue Dateien sind normalerweise nicht
ausfÅhrbar).

Mit Hilfe von Pumask kann festgelegt werden, welche Zugriffsrechte bei der
Erzeugung einer Datei nicht (!) erlaubt sein sollen.

Explizite Fchmod-Aufrufe werden von Pumask nicht beeinfluût.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 5.04 zur VerfÅgung;
die Maske wird allerdings von keinem der internen XFS von (!nolink [MagiC]) ausgewertet
und hat ihren Sinn ausschlieûlich bei UNIX-Ñhnlichen Dateisystemen.
!item [Ergebnis:]
Die Funktion liefert den Wert der alten Erstellungsmaske.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Dcreate ~  Fchmod ~  Fcreate
(!ende_liste)


!begin_node Bindings fÅr Pumask
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pumask ( WORD mode );
!item [Assembler:]
!begin_verbatim
move.w    mode,-(sp)   ; Offset 2
move.w    #307,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pusrval
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPusrvalÆ - spezifische Informationen eines Prozesses setzen bzw. abfragen.
!item [Gemdosnummer:]
280
!item [Binding:]
(!link [Bindings fÅr Pusrval] [Bindings fÅr Pusrval])
!item [Beschreibung:]
Die Funktion erlaubt das Setzen bzw. Abfragen von Prozessspezifischen
Informationen. Diese werden in einem Langwort gespeichert, und an alle
Child-Prozesse weitervererbt.

Die Bedeutung des Wertes kann vom aufrufenden Programm frei bestimmt werden;
er wird direkt und nur vom Kernel eingetragen.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 5.04 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion liefert den alten Wert zurÅck.
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:]
(!ende_liste)


!begin_node Bindings fÅr Pusrval
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pusrval ( LONG val );
!item [Assembler:]
!begin_verbatim
move.l    val,-(sp)    ; Offset 2
move.w    #280,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #6,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pvfork
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPvforkÆ - Kopie des aktuellen Prozesses erstellen.
!item [Gemdosnummer:]
275
!item [Binding:]
(!link [Bindings fÅr Pvfork] [Bindings fÅr Pvfork])
!item [Beschreibung:]
Die Funktion erzeugt eine Kopie des aktuellen Prozesses. Parent- und
Childprozess teilen sich denselben Adressraum, d.h. jede énderung, die der
Child an Variablen vornimmt, betreffen auch den Parent. Der neue Prozess
beginnt seine Arbeit, wenn die Funktion Pvfork zurÅckkehrt.

Da sich beide Prozesse den gleichen Adressraum (und Stack) teilen, gÑbe es
Probleme, wenn beide zur gleichen Zeit laufen wÅrden. Deshalb wird der
Parent angehalten, bis der Child-Prozess entweder beendet wird oder sich
mittels Pexec (Modus 200) selbst mit einem neuen Prozess in einem neuen
Adressraum Åberschreibt.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [ENSMEM :]
!item [E_OK :]
im Child-Prozess.
!item [>0 :]
neue Prozess-ID im Parent-Prozess.
!item [ENSMEM :]
nicht genug Speicher vorhanden, um den neuen Prozeû zu erzeugen.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pexec ~  Pfork ~  (!nolink [Threads][Threads in MagiC])
(!ende_liste)


!begin_node Bindings fÅr Pvfork
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
WORD Pvfork ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #275,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pwait
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPwaitÆ -  auf Childprozess warten, Exitcode ermitteln.
!item [Gemdosnummer:]
265
!item [Binding:]
(!link [Bindings fÅr Pwait] [Bindings fÅr Pwait])
!item [Beschreibung:]
Diese Funktion ist Ñquivalent zu Pwait3 (2, NULL) und wird aus GrÅnden der
AbwÑrtskompatibilitÑt angeboten.

Laut POSIX sollte die Bibliotheksfunktion 'wait' als Pwaitpid (-1, 0, NULL)
implementiert werden. Daher sollte Pwait fÅr eine POSIX-kompatible
Bibliothek nicht benutzt werden.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 5.04 zur VerfÅgung
und ist hier als Pwaitpid (-1, 2, NULL) implementiert.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EFILNF :]
!item [>0 :]
Exit-Status und PID des Childs
!item [0 :]
falls Bit-0 des Parameters flag gesetzt ist, und die Funktion beim Warten
auf das Exit bzw. Stop des Childs blockiert werden wÅrde.
!item [EFILNF :]
es existieren keine Childs.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pwait3 ~  Pwaitpid
(!ende_liste)


!begin_node Bindings fÅr Pwait
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pwait ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #265,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pwait3
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPwait3Æ - auf Childprozess warten, Exitcode ermitteln.
!item [Gemdosnummer:]
284
!item [Binding:]
(!link [Bindings fÅr Pwait3] [Bindings fÅr Pwait3])
!item [Beschreibung:]
Diese Funktion ist Ñquivalent zu einem Aufruf von Pwaitpid
(-1, flag, rusage) und ermittelt damit den Exit-Status sowie die
CPU-Auslastung eines terminierten oder beendeten Child-Prozesses.

(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 5.04 zur VerfÅgung.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EFILNF :]
!item [>0 :]
Exit-Status und PID des Childs
!item [0 :]
falls Bit-0 des Parameters (!I)flag(!i) gesetzt ist, und die Funktion beim
Warten auf das Exit bzw. Stop des Childs blockiert werden wÅrde.
!item [EFILNF :]
es existieren keine Childs.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pwait ~  Pwaitpid
(!ende_liste)


!begin_node Bindings fÅr Pwait3
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pwait3 ( WORD flag, LONG *rusage );
!item [Assembler:]
!begin_verbatim
pea       rusage       ; Offset 4
move.w    flag,-(sp)   ; Offset 2
move.w    #284,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node


!begin_node Pwaitpid
(!begin_liste) [Beschreibung:]
!item [Name:]
ØPwaitpidÆ - auf Childprozess warten, Exitcode ermitteln.
!item [Gemdosnummer:]
314
!item [Binding:]
(!link [Bindings fÅr Pwaitpid] [Bindings fÅr Pwaitpid])
!item [Beschreibung:]
Die Funktion versucht den Exit-Code von Childprozessen, die gestoppt oder
beendet worden sind, zu ermitteln. Falls Bit-1 des Parameters (!I)flag(!i)
gesetzt ist, werden z.Zt. gestoppte, anderenfalls gerade beendete bzw. durch
Tracing gestoppte Childprozesse gemeldet.

Ein gestoppter Prozess wird i.d.R. einmal gemeldet (sofern er nicht neu
gestartet, und wieder gestoppt wurde). Ebenso wird ein beendetet Prozess nur
einmal gemeldet.

Wenn Childs vorhanden sind, die weder gestoppt oder beendet sind (oder auf
ein solches Ereignis warten), wird das weitere Verhalten der Funktion durch
Bit-0 des Parameters (!I)flag(!i) gesteuert. Dabei gilt:
!begin_xlist !short [Bit-0 = 0:]
!item [Bit-0 = 0:]
warten, bis Child stoppt oder beendet wird.
!item [Bit-0 = 1:]
sofort zurÅckkehren.
!end_xlist
(!B)öber den Parameter (!I)pid(!i) kînnen die Childs genauer spezifiziert
werden. Es gilt:(!b)
!begin_xlist !short [< -1]
!item [pid]
Bedeutung
!item [~]
~
!item [-1]
Status fÅr alle Childs abfragen
!item [>0]
(!I)pid(!i) ist die Prozess-Kennung des Childs, dessen Status erfragt werden
soll
!item [=0]
Status fÅr alle Childs abfragen, deren Gruppen-ID gleich der des aufrufenden
Prozesses ist.
!item [< -1]
Status fÅr alle Childs abfragen, deren Gruppen-ID dem Absolutwert (Betrag)
von (!I)pid(!i) entspricht.
!end_xlist
(!B)öber den Parameter (!I)rusage(!i) werden Informationen Åber den
Verbrauch an CPU-Zeit des Childs abgelegt:(!b)
!begin_xlist !short
!item [rusage[0]:]
Zeitverbrauch im User-Space (msec)
!item [rusage[1]:]
Zeitverbrauch im Kernel-Space (msec)
!end_xlist
Falls ein Child gefunden wurde, wird dessen PID in den oberen 16-Bit und
sein Exit-Status in den unteren 16-Bit des RÅckgabewertes abgelegt. Wenn der
Prozess durch das Signal mit der Nummer n gestoppt oder beendet wurde, ist
sein Exit-Status 256*n+x mit:
!begin_xlist !short [x = 127,]
!item [x = 127,]
falls der Prozess gestoppt wurde.
!item [x = 0,]
falls der Prozess beendet wurde.
!end_xlist
(!B)Achtung:(!b) Diese Funktion ist optional, daher darf ein Aufruf mit
EINVFN beantwortet werden. Sie steht in MagiC ab Version 5.04 zur VerfÅgung;
allerdings werden angehaltene Child-Prozesse noch nicht erkannt, sondern nur
beendete Childs. DarÅber hinaus werden im Parameter (!I)rusage(!i) z.Zt.
immer nur Null-Werte zurÅckgegeben.

Auch Prozeûgruppen werden z.Zt. noch nicht richtig unterstÅtzt, da die
Funktion Psetpgrp() noch fehlt.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EFILNF :]
!item [>0 :]
Exit-Status und PID des Childs
!item [0 :]
falls Bit-0 des Parameters (!I)flag(!i) gesetzt ist, und die Funktion beim
Warten auf das Exit bzw. Stop des Childs blockiert werden wÅrde.
!item [EFILNF :]
es existieren keine Childs.
!end_xlist
!item [Gruppe:]
(!link [Prozessfunktionen][Prozessfunktionen des GEMDOS])
!item [Querverweis:] Pwait ~  Pwait3
(!ende_liste)


!begin_node Bindings fÅr Pwaitpid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
LONG Pwaitpid ( WORD pid, WORD flag, LONG *rusage );
!item [Assembler:]
!begin_verbatim
pea       rusage       ; Offset 6
move.w    flag,-(sp)   ; Offset 4
move.w    pid,-(sp)    ; Offset 2
move.w    #314,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $A(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node
