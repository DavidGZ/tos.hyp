!iflang [english]

!begin_node Pwaitpid
(!begin_liste) [Availability]
!item [Name:]
ØPwaitpidÆ - auf Childprozess warten, Exitcode ermitteln.
!item [Opcode:]
314
!item [Syntax:]
int32_t Pwaitpid ( int16_t pid, int16_t flag, int32_t *rusage );

!item [Description:]
Die Funktion versucht den Exit-Code von Childprozessen, die gestoppt oder
beendet worden sind, zu ermitteln. Falls Bit-1 des Parameters (!I)flag(!i)
gesetzt ist, werden z.Zt. gestoppte, anderenfalls gerade beendete bzw. durch
Tracing gestoppte Childprozesse gemeldet.

Ein gestoppter Prozess wird i.d.R. einmal gemeldet (sofern er nicht neu
gestartet, und wieder gestoppt wurde). Ebenso wird ein beendetet Prozess nur
einmal gemeldet.

Wenn Childs vorhanden sind, die weder gestoppt oder beendet sind (oder auf
ein solches Ereignis warten), wird das weitere Verhalten der Funktion durch
Bit-0 des Parameters (!I)flag(!i) gesteuert. Dabei gilt:
!begin_xlist !short [Bit-0 = 0]
!item [Bit-0 = 0:]
warten, bis Child stoppt oder beendet wird.
!item [Bit-0 = 1:]
sofort zurÅckkehren.
!end_xlist
(!B)öber den Parameter (!I)pid(!i) kînnen die Childs genauer spezifiziert
werden. Es gilt:(!b)
!begin_xlist !short [< -1]
!item [pid]
Bedeutung
!item [~]
~
!item [-1]
Status fÅr alle Childs abfragen
!item [>0]
(!I)pid(!i) ist die Prozess-Kennung des Childs, dessen Status erfragt werden
soll
!item [=0]
Status fÅr alle Childs abfragen, deren Gruppen-ID gleich der des aufrufenden
Prozesses ist.
!item [< -1]
Status fÅr alle Childs abfragen, deren Gruppen-ID dem Absolutwert (Betrag)
von (!I)pid(!i) entspricht.
!end_xlist
(!B)öber den Parameter (!I)rusage(!i) werden Informationen Åber den
Verbrauch an CPU-Zeit des Childs abgelegt:(!b)
!begin_xlist !short
!item [rusage[0]:]
Zeitverbrauch im User-Space (msec)
!item [rusage[1]:]
Zeitverbrauch im Kernel-Space (msec)
!end_xlist
Falls ein Child gefunden wurde, wird dessen PID in den oberen 16-Bit und
sein Exit-Status in den unteren 16-Bit des RÅckgabewertes abgelegt. Wenn der
Prozess durch das Signal mit der Nummer n gestoppt oder beendet wurde, ist
sein Exit-Status 256*n+x mit:
!begin_xlist !short [x = 127]
!item [x = 127,]
falls der Prozess gestoppt wurde.
!item [x = 0,]
falls der Prozess beendet wurde.
!end_xlist
(!B)Achtung:(!b)
In MagiC werden angehaltene Child-Prozesse noch nicht
erkannt, sondern nur beendete Childs. DarÅber hinaus werden im
Parameter (!I)rusage(!i) z.Zt. immer nur Null-Werte zurÅckgegeben.

Auch Prozeûgruppen werden z.Zt. noch nicht richtig unterstÅtzt, da die
Funktion Psetpgrp() noch fehlt.
!item [(!nolink [Return]) Value:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EFILNF:]
!item [>0~~~ :]
Exit-Status und PID des Childs
!item [~0~~~ :]
falls Bit-0 des Parameters (!I)flag(!i) gesetzt ist, und die Funktion beim
Warten auf das Exit bzw. Stop des Childs blockiert werden wÅrde.
!item [EFILNF:]
es existieren keine Childs.
!end_xlist

!item [Availability:]
Available when a 'MiNT' cookie with a version of at least 0.96 exists
and MagiC since version 5.04.

!item [Group:]
Process Functions

!item [See Also:] (!link [Binding] [Bindings for Pwaitpid]) ~ Pwait ~ Pwait3
(!ende_liste)


!begin_node Bindings for Pwaitpid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pwaitpid ( int16_t pid, int16_t flag, int32_t *rusage );
!item [Assembler:]
!begin_verbatim
pea       rusage       ; Offset 6
move.w    flag,-(sp)   ; Offset 4
move.w    pid,-(sp)    ; Offset 2
move.w    #314,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       $A(sp),sp    ; correct stack
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node

!else

!begin_node Pwaitpid
(!begin_liste) [Beschreibung]
!item [Name:]
ØPwaitpidÆ - auf Childprozess warten, Exitcode ermitteln.
!item [Gemdosnummer:]
314
!item [Deklaration:]
int32_t Pwaitpid ( int16_t pid, int16_t flag, int32_t *rusage );

!item [Beschreibung:]
Die Funktion versucht den Exit-Code von Childprozessen, die gestoppt oder
beendet worden sind, zu ermitteln. Falls Bit-1 des Parameters (!I)flag(!i)
gesetzt ist, werden z.Zt. gestoppte, anderenfalls gerade beendete bzw. durch
Tracing gestoppte Childprozesse gemeldet.

Ein gestoppter Prozess wird i.d.R. einmal gemeldet (sofern er nicht neu
gestartet, und wieder gestoppt wurde). Ebenso wird ein beendetet Prozess nur
einmal gemeldet.

Wenn Childs vorhanden sind, die weder gestoppt oder beendet sind (oder auf
ein solches Ereignis warten), wird das weitere Verhalten der Funktion durch
Bit-0 des Parameters (!I)flag(!i) gesteuert. Dabei gilt:
!begin_xlist !short [Bit-0 = 0]
!item [Bit-0 = 0:]
warten, bis Child stoppt oder beendet wird.
!item [Bit-0 = 1:]
sofort zurÅckkehren.
!end_xlist
(!B)öber den Parameter (!I)pid(!i) kînnen die Childs genauer spezifiziert
werden. Es gilt:(!b)
!begin_xlist !short [< -1]
!item [pid]
Bedeutung
!item [~]
~
!item [-1]
Status fÅr alle Childs abfragen
!item [>0]
(!I)pid(!i) ist die Prozess-Kennung des Childs, dessen Status erfragt werden
soll
!item [=0]
Status fÅr alle Childs abfragen, deren Gruppen-ID gleich der des aufrufenden
Prozesses ist.
!item [< -1]
Status fÅr alle Childs abfragen, deren Gruppen-ID dem Absolutwert (Betrag)
von (!I)pid(!i) entspricht.
!end_xlist
(!B)öber den Parameter (!I)rusage(!i) werden Informationen Åber den
Verbrauch an CPU-Zeit des Childs abgelegt:(!b)
!begin_xlist !short
!item [rusage[0]:]
Zeitverbrauch im User-Space (msec)
!item [rusage[1]:]
Zeitverbrauch im Kernel-Space (msec)
!end_xlist
Falls ein Child gefunden wurde, wird dessen PID in den oberen 16-Bit und
sein Exit-Status in den unteren 16-Bit des RÅckgabewertes abgelegt. Wenn der
Prozess durch das Signal mit der Nummer n gestoppt oder beendet wurde, ist
sein Exit-Status 256*n+x mit:
!begin_xlist !short [x = 127]
!item [x = 127,]
falls der Prozess gestoppt wurde.
!item [x = 0,]
falls der Prozess beendet wurde.
!end_xlist
(!B)Achtung:(!b)
In MagiC werden angehaltene Child-Prozesse noch nicht
erkannt, sondern nur beendete Childs. DarÅber hinaus werden im
Parameter (!I)rusage(!i) z.Zt. immer nur Null-Werte zurÅckgegeben.

Auch Prozeûgruppen werden z.Zt. noch nicht richtig unterstÅtzt, da die
Funktion Psetpgrp() noch fehlt.
!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:
!begin_xlist !short [EFILNF:]
!item [>0~~~ :]
Exit-Status und PID des Childs
!item [~0~~~ :]
falls Bit-0 des Parameters (!I)flag(!i) gesetzt ist, und die Funktion beim
Warten auf das Exit bzw. Stop des Childs blockiert werden wÅrde.
!item [EFILNF:]
es existieren keine Childs.
!end_xlist

!item [VerfÅgbar:]
Available when a 'MiNT' cookie with a version of at least 0.96 exists
and MagiC since version 5.04.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:] (!link [Binding] [Bindings fÅr Pwaitpid]) ~ Pwait ~ Pwait3
(!ende_liste)


!begin_node Bindings fÅr Pwaitpid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pwaitpid ( int16_t pid, int16_t flag, int32_t *rusage );
!item [Assembler:]
!begin_verbatim
pea       rusage       ; Offset 6
move.w    flag,-(sp)   ; Offset 4
move.w    pid,-(sp)    ; Offset 2
move.w    #314,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $A(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7gd.htm">GFA-H-Util GEMDOS</A>
!end_raw
!endif
(!ende_liste)
!end_node
!end_node
!endif
