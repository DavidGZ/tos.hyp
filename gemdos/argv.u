!iflang [english]


!begin_node ARGV procedure
!label Command lines, extended
!html_name gemdos_argv

The ARGV procedure serves for passing extended command lines, and was
specified officially in the autumn of 1989 by (!I)Ken Badertscher(!i) (of
Atari USA). The procedure works as follows:

The environmental variable ARGV indicates that this procedure is being used;
the value of the variables does (!I)not(!i) play a part in this, only its
presence is decisive. The ARGV variable must be the last environmental
variable, so that the called program can continue to use the "front" part as
its normal environment.

The extended command line is now simply written as a series of strings
(NULL-terminated !) after ARGV in the environment. The first string here
contains the name of the launched program, in the same way that it is passed
with (!nolink [Pexec]) (and corresponds to the so far unused argv[0]). The
following strings contain the individual parameters, in which space
characters may appear too; the end of the list is indicated by a double 0,
as for a normal environment.

Beyond that one passes the value 127 with (!nolink [Pexec]) as the
length-byte (first byte of the command line), which due to the existing
length restriction to 125 bytes could not be accepted until now. This allows
the called program to make sure that the values passed in the environment
are really valid and have not been left behind by a program that does not
know the ARGV standard, perhaps.

Depending on whether one wants to pass parameters to programs via ARGV or
just to read them, one proceeds in one of the following two ways:

(!bullet) ARGV with a launched program
!label ARGV with a launched program

First establish whether the variable ARGV is present in the environment. If
this is the case (!I)and(!i) the command line length-byte has the value 127,
then one finds after the first 0 following ARGV (since the variable could
have a value) the individual command line parameters. At the end one should
set the first letter of 'ARGV' to 0 so that the environment takes the
standard form again.

(!bullet) ARGV at the caller
!label ARGV at the caller

First a new environment has to be created for the program to be called. To
do this, calculate, say, the length of the environment already present, add
the length of the command line and allocate a corresponding number of bytes.
Then copy the existing environment (and during this remove any existing ARGV
variable), followed by the command line parameters one after the other (each
NULL-terminated). A final NULL concludes the environment. At the end pass
the magic value 127 in the length-byte of the command line.

(!bullet) Extension of the ARGV procedure
!label ARGV procedure, extended

A problem with the original definition of the ARGV procedure was not being
able to pass (!I)empty(!i) parameters (two zeros following each other will
terminate the environment !). To be able to pass these nevertheless, the
procedure was extended as follows:

!begin_itemize
!item Empty parameters are set in the command line in (!I)single(!i)
quotation marks, and appear in the environment as (!I)exactly(!i) one space.
!item A value is defined for the variable ARGV: if this starts with 'NULL:',
the rest of the line contains comma-separated positions of the empty
parameters. (!B)Example:(!b) ARGV=NULL:3,5,9 means that argv[3], argv[5] and
argv[9] are empty. The startup code should then be responsible for deleting
the corresponding parameters.
!end_itemize

(!B)Note:(!b) To ensure maximum compatibility to old programs, the extended
ARGV procedure should be used (!I)only when(!i) empty parameters actually
have to be passed. In all other cases one should fall back to the original
definiton.

(!bullet) ARGV procedure as of MagiC 3.0
!label ARGV procedure as of MagiC 3.0
!label MagiC, MagiC, ARGV procedure in

From (!nolink [MagiC]) 3 onwards the ARGV procedure is supported by Pexec in
three different ways:

!begin_itemize
!item (!B)If the length-byte of the command line is 127(!b),
(!nolink [Pexec]) assumes that the calling program supports ARGV and the
environment has been manipulated accordingly already; the environment is not
changed, therefore.
!item (!B)If the length-byte is 254(!b), (!nolink [MagiC]) expects directly
after it the string "ARGV=", followed by a NULL-byte and a list of
parameters terminated by two NULL-bytes. By passing "ARGV=NULL..." etc. one
can also use the extended ARGV procedure that permits passing of empty
parameters (see above).

(!nolink [Pexec]) deletes any ARGV present and enters the new environment.
The command line consists only of the value 127 as an indicator that the
parameters lie in the environment. This procedure is suitable if it is
certain that the called program can handle the ARGV procedure.
!item (!B)If the length-byte is 255(!b), (!nolink [MagiC]) expects directly
after it a space-separated and NULL-byte terminated list of parameters (as
the command line is passed generally). (!nolink [Pexec]) deletes any ARGV
that may be present, creates a list of arguments from the command line and
enters these as ARGV into the environment. The program file path that was
passed to (!nolink [Pexec]) will be taken as argv[0]. If this path is
invalid the result will be rubbish, so one should pass a sensible program
name even with mode 5 of (!nolink [Pexec]) (create basepage). With mode 7,
argv[0] will simply be called "NONAME", since no name is passed in this
case.

The command line has 127 as a length-byte as an indicator of the presence of
ARGV. If the length of the command line is < 127, then it will also be
copied to the basepage, otherwise the command line consists only of the
value 127. This procedure is suitable if the called program is not certain
that it understands ARGV.
!end_itemize
!end_node


!else


!begin_node ARGV-Verfahren
!label Kommandozeilen, erweiterte
!html_name gemdos_argv

Das ARGV-Verfahren dient zur (!Uumlaut)bergabe erweiterter Kommandozeilen, und
wurde im Herbst 1989 von (!I)Ken Badertscher(!i) (Atari-USA) offiziell
spezifiziert. Das Verfahren arbeitet wie folgt:

Die Environmentvariable ARGV zeigt an, da(!sharps) dieses Verfahren angewendet
wird; der Wert der Variablen spielt dabei (!I)keine(!i) Rolle, allein die
Anwesenheit ist entscheidend. Die ARGV-Variable muss die letzte
Environmentvariable sein, damit das aufgerufene Programm den "vorderen"
Teil als sein normales Environment weiterbenutzen kann.

Die erweiterte Kommandozeile wird nun einfach als Folge von Strings
(Null-Terminiert !) hinter ARGV in das Environment geschrieben. Der
erste String enth(!aumlaut)lt dabei den Namen des gestarteten Programms, wie
man ihn auch bei (!nolink [Pexec]) (!uumlaut)bergibt (und entspricht dem bislang
nicht genutzten argv[0]). Die weiteren Strings enthalten die einzelnen
Parameter, in denen auch Leerzeichen auftauchen d(!uumlaut)rfen; das Ende der
Liste wird wie bei einem normalen Environment durch eine doppelte 0
gekennzeichnet.

Dar(!uumlaut)ber hinaus (!uumlaut)bergibt man bei (!nolink [Pexec]) als L(!aumlaut)ngenbyte (erstes
Byte in der Kommandozeile) den Wert 127, der wegen der existierenden
L(!aumlaut)ngenbeschr(!aumlaut)nkung auf 125 Bytes bislang nicht angenommen werden konnte.
Dies erm(!oumlaut)glicht es dem aufgerufenen Programm, sicherzustellen, da(!sharps) die
im Environment (!uumlaut)bergebenen Werte tats(!aumlaut)chlich g(!uumlaut)ltig sind und nicht etwa
von einem Programm, das den ARGV-Standard nicht kennt, (!uumlaut)briggelassen
wurden.

Je nachdem, ob man per ARGV Parameter an andere Programme (!uumlaut)bergeben,
oder diese selbst lesen m(!oumlaut)chte, behandelt man einen der folgenden
zwei Punkte:

(!bullet) ARGV beim gestarteten Programm
!label ARGV beim gestarteten Programm

Zun(!aumlaut)chst stellt man fest, ob die Variable ARGV im Environment vorhanden
ist. Wenn dies der Fall ist, (!I)und(!i) das Kommandozeilen-L(!aumlaut)ngenbyte
den Wert 127 besitzt, dann findet man nach der ersten 0 nach ARGV (denn
diese Variable k(!oumlaut)nnte ja einen Wert haben), die einzelnen
Kommandozeilenparameter. Zum Schlu(!sharps) sollte man den ersten Buchstaben von
ARGV auf 0 den Wert 0 setzen, damit das Environment wieder die Standardform
besitzt.

(!bullet) ARGV beim Aufrufer
!label ARGV beim Aufrufer

Zun(!aumlaut)chst mu(!sharps) ein neues Environment f(!uumlaut)r das aufzurufende Programm erzeugt
werden. Dazu berechnet man z.B. die L(!aumlaut)nge des bereits vorhandenen
Environments, addiert die L(!aumlaut)nge der Kommandozeile und alloziert
entsprechend viele Bytes. Dann wird das bestehende Environment kopiert
(und dabei eine evtl. bereits bestehende ARGV-Variable entfernt), die
neue ARGV-Variable und die Kommandozeilenparameter nacheinander angeh(!aumlaut)ngt
(jeweils null-terminiert). Eine letzte Null schlie(!sharps)t das Environment dann
endg(!uumlaut)ltig ab. Zu guter letzt (!uumlaut)bergibt man im L(!aumlaut)ngenbyte der Kommandozeile
den magischen Wert 127.

(!bullet) Erweiterung des ARGV-Verfahrens
!label ARGV-Verfahren, erweitertes

Ein Problem mit der urspr(!uumlaut)nglichen Definition des ARGV-Verfahrens besteht
darin, (!I)leere(!i) Parameter (!uumlaut)bergeben zu k(!oumlaut)nnen (zwei aufeinanderfolgende
Nullen schlie(!sharps)en ja das Environment ab !). Um diese dennoch (!uumlaut)bergeben zu
k(!oumlaut)nnen, wurde das Verfahren wie folgt erweitert:

!begin_itemize
!item leere Parameter werden in der Kommandozeile in (!I)einfache(!i)
Anf(!uumlaut)hrungsstriche gesetzt, und tauchen im Environment als (!I)genau(!i)
ein Leerzeichen auf.
!item f(!uumlaut)r die Variable ARGV wird ein Wert definiert: falls diese mit
'NULL:' beginnt, enth(!aumlaut)lt der Rest der Zeile (durch Kommata getrennt) die
Positionen der leeren Parameter. (!B)Beispiel:(!b) ARGV=NULL:3,5,9
bedeutet, da(!sharps) argv[3], argv[5] und argv[9] leer sind. Der Startup-Code
sollte sich dann darum k(!uumlaut)mmern, die entsprechenden Parameter zu l(!oumlaut)schen.
!end_itemize

(!B)Hinweis:(!b) Um maximale Kompatibilit(!aumlaut)t zu alten Programmen zu
gew(!aumlaut)hrleisten, sollte das erweiterte ARGV-Verfahren (!I)nur dann(!i)
eingesetzt werden, wenn tats(!aumlaut)chlich leere Parameter (!uumlaut)bergeben werden
m(!uumlaut)ssen. In allen anderen F(!aumlaut)llen sollte man stattdessen auf die
urspr(!uumlaut)ngliche Definiton zur(!uumlaut)ckgreifen.

(!bullet) ARGV-Verfahren ab MagiC 3.0
!label ARGV-Verfahren in MagiC
!label MagiC, ARGV-Verfahren in

Ab (!nolink [MagiC])-3 wird das ARGV-Verfahren bereits von Pexec auf drei
verschiedene Arten unterst(!uumlaut)tzt:

!begin_itemize
!item (!B)Ist das L(!aumlaut)ngenbyte der Kommandozeile 127(!b), geht
(!nolink [Pexec]) davon aus, da(!sharps) das aufrufende Programm ARGV unterst(!uumlaut)tzt
und das Environment bereits entsprechend manipuliert ist; das Environment
wird daher nicht ge(!aumlaut)ndert.
!item (!B)Ist das L(!aumlaut)ngenbyte 254(!b), erwartet (!nolink [MagiC]) direkt
dahinter die Zeichenkette "ARGV=", gefolgt von einem Nullbyte und von einer
durch zwei Nullbytes abgeschlossenen Liste von Parametern. Durch (!Uumlaut)bergaben
von "ARGV=NULL..." usw. kann man auch das erweiterte ARGV-Verfahren
verwenden, das die (!Uumlaut)bergabe von leeren Parametern erm(!oumlaut)glicht (s.o).

(!nolink [Pexec]) l(!oumlaut)scht ein evntl. vorhandenes ARGV und tr(!aumlaut)gt das neue ins
Environment ein. Die Kommandozeile besteht nur aus dem Wert 127 als
Indikator, da(!sharps) die Parameter im Environment liegen. Das Verfahren ist
geeignet, wenn das aufgerufene Programm mit Sicherheit das ARGV-Verfahren
beherrscht.
!item (!B)Ist das L(!aumlaut)ngenbyte 255(!b), erwartet (!nolink [MagiC]) direkt
dahinter eine durch Leerstellen getrennte und durch ein Nullbyte
abgeschlossene Liste von Parametern (wie i.a. die Kommandozeile (!uumlaut)bergeben
wird). (!nolink [Pexec]) l(!oumlaut)scht ein evntl. vorhandenes ARGV, erstellt aus
der Kommandozeile eine Argumentliste und tr(!aumlaut)gt diese als ARGV ins
Environment ein. Als argv[0] wird der Programmdatei-Pfad genommen, der
(!nolink [Pexec]) (!uumlaut)bergeben wurde. Ist dieser Pfad ung(!uumlaut)ltig, gibt es M(!uumlaut)ll,
deshalb sollte man auch bei Modus 5 von (!nolink [Pexec]) (Basepage
erstellen) einen sinnvollen Programmnamen (!uumlaut)bergeben. Bei Modus 7 hei(!sharps)t
argv[0] dann einfach "NONAME", weil hier kein Name (!uumlaut)bergeben wird.

Die Kommandozeile hat als L(!aumlaut)ngenbyte 127 als Indikator f(!uumlaut)r das
Vorhandensein von ARGV. Ist die L(!aumlaut)nge der Kommandozeile < 127, wird diese
au(!sharps)erdem in die Basepage kopiert, ansonsten besteht die Kommandozeile nur
aus dem Wert 127. Das Verfahren ist geeignet, wenn das aufrufende Programm
nicht sicher ist, da(!sharps) das aufgerufene Programm ARGV versteht.
!end_itemize
!end_node


!endif
