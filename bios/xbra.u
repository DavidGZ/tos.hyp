# ########################################################################
# @(#)XBRA-Verfahren
# @(#)02.10.1999 by Rolf Kotzian
# ########################################################################
!begin_node XBRA-Verfahren
!label Vektoren verbiegen

Das XBRA-Verfahren ("eXtended BRAner") geht auf eine Idee von (!I)Moshe
Braner(!i) zurÅck, und sollte von allen Programmen benutzt werden, die
Vektoren verbiegen.

Das Prinzip besteht darin, daû jedes vektorverbiegende Programm direkt
vor seiner eigenen Einsprungadresse (also genau vor der Adresse
auf die der Vektor gesetzt wurde), die folgende Struktur plaziert:

!label XBRA-Struktur
!begin_verbatim
typedef struct
{
    BYTE xb_magic[4];   /* "XBRA" = 0x58425241       */
    BYTE xb_id[4];      /* ID aus vier ASCII-Zeichen */
    LONG xb_oldvec;     /* alter Wert des Vektors    */
} XBRA;
!end_verbatim

Die Komponente (!I)xb_magic(!i) erlaubt eine sichere Erkennung der
XBRA-Struktur; (!I)xb_id(!i) ist die ID des jeweiligen Programms, welches
den Vektor verbiegt.

Mit Hilfe dieses Verfahrens ist es fÅr ein Programm leicht mîglich
festzustellen, ob es schon installiert ist (das geht allerdings
auch Åber den Cookie-Jar), und sich wieder aus der Vektorkette zu
entfernen. Wichtig ist jedoch, daû sich (!B)alle (!)(!b) Programme an
dieses Verfahren halten, da sonst die Vektorkette unterbrochen wird.

(!B)Hinweis zu (!nolink [MagiC]):(!b) Programme, die sich in irgendwelche
Systemvektoren hÑngen, sollten sich auch in den etv_term-Vektor
einklinken. Falls das Programm abnormal beendet wird, springt das
Betriebssystem zunÑchst Åber den (!nolink [etv_term])-Vektor. Bei dieser Gelegenheit
kann man sich dann in Ruhe aus allen verÑnderten Vektoren zurÅckziehen; da
MagiC fÅr jede Applikation einen eigenen (!nolink [etv_term])-Vektor verwendet,
kann es dabei nicht zu Kollisionen kommen.

Das XBRA-Verfahren hat sich im laufe der Zeit durchgesetzt, so
daû es mittlerweile als schlechter Programmierstil gilt, wenn man
es (!I)nicht(!i) benutzt.

!label XBRA-Liste
Um Doppelbelegungen bei den XBRA-Kennungen zu vermeiden, wird von
Julian Reschke die sogenannte (!I)"XBRA-Liste"(!i) gefÅhrt, in der alle
offiziell gemeldeten Kennungen eingetragen werden.

(!B)Tip:(!b) Quelltexte fÅr die wichtigsten Funktionen im Umgang mit dem
XBRA-Verfahren befinden sich in verschiedenen Mailboxen.

Querverweis: Cookie-Jar  ~
(!link [System-Cookies][Die Liste der wichtigsten Cookies]) ~
(!link [Reset-Vektor][Einklinken in den Reset-Vektor])

!end_node
