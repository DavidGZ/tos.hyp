!begin_node Die Systemvariablen

Da die Systemvariablen und -vektoren die unterste Schicht des
Betriebssystems darstellen, sollten Anwenderprogramme nur wenn unbedingt
notwendig auf diese zugreifen. (!B)Konkret:(!b)

!begin_itemize
!item keine Systemvariablen verÑndern, die nicht verÑndert werden dÅrfen.
!item keine Systemvariablen benutzen, wenn statt dessen auch eine Funktion
      des Betriebssystems aufgerufen werden kînnte (Beispiel: Mfpint).
!end_itemize

Die folgende Liste enthÑlt alle Systemvariablen des TOS:

!begin_xlist [xy_variable~~LONG $___]
!item [Variable~~~~~Adresse]
Beschreibung

!label _autopath
!label Systemvariable, _autopath
!label AUTO-Ordner, Zugriffspfad fÅr
!item [_autopath~~~~LONG $4ca]
Zeiger auf Zugriffspfad fÅr den AUTO-Ordner (unbenutzt und nicht offiziell
dokumentiert).

!label _bootdev
!label Systemvariable, _bootdev
!label Bootlaufwerks, Nummer des
!item [_bootdev~~~~~WORD $446]
enthÑlt normalerweise die Nummer des Laufwerks, von dem gebootet worden ist.
Auûerdem wird diese Variable noch beim Booten benutzt, um das Bootlaufwerk
zu wÑhlen (das klappt i.a. aber nur dann, wenn kein Festplattentreiber
gebootet wird). Wenn man also die Variable auf 1 setzt, keine autobootfÑhige
Festplatte angeschlossen hat und einen Reset auslîst, wird von Laufwerk B
gebootet!

!label _bufl
!label Systemvariable, _bufl
!label GEMDOS-Pufferlisten
!label Pufferlisten des GEMDOS
!item [_bufl~~~~~~~~LONG $4b2]
zwei Zeiger auf GEMDOS-Pufferlisten.

!label _cmdload
!label Systemvariable, _cmdload
!label COMMAND.PRG, Starten von
!item [_cmdload~~~~~WORD $482]
wenn dieses Register nicht 0 ist, wird versucht, anstelle von GEM das
Programm COMMAND.PRG zu starten. Das Register kann durch ein Programm in
einem ausfÅhrbaren Bootsektor gesetzt werden.

!label _dskbufp
!label Systemvariable, _dskbufp
!item [_dskbufp~~~~~LONG $4c6]
Zeiger auf einen 1024 Bytes groûen Puffer zum Lesen und Schreiben auf
Disketten oder Festplatten (z.B. beim Bootversuch). Der Zeiger wird auch
vom VDI benutzt.

!label _drvbits
!label Systemvariable, _drvbits
!label Laufwerke des BIOS, angemeldete
!item [_drvbits~~~~~LONG $4c2]
Bit-Tabelle Åber die angemeldeten Laufwerke des BIOS. Es gilt:

Bit-0 = Laufwerk A (!nl)
Bit-1 = Laufwerk B (!nl)
Bit-2 = Laufwerk C (usw.)

Die Variable wird in TOS 1.00 beim Reset nicht gelîscht. Eigene Treiber
sollten daher bei einem Reset die selbst eingetragenen Bits lîschen;
anderenfalls kann es passieren, daû Laufwerkskennungen plîtzlich
"verschwinden".

!label _frclock
!label Systemvariable, _frclock
!item [_frclock~~~~~LONG $466]
analog _vbclock, mit dem Unterschied, daû die ZÑhlung nicht durch vblsem
angehalten wird.

!label _fverify
!label Systemvariable, _fverify
!label Verify ausfÅhren ?
!label Verify einschalten
!label Verify ausschalten
!item [_fverify~~~~~WORD $444]
legt fest, ob das (!nolink [BIOS]) beim Schreiben auf Disketten per Rwabs einen Verify
durchfÅhren soll, oder nicht. Dabei gilt:

0 = kein Verify

Im Normalfall ist das Verify eingeschaltet.

!label _hz_200
!label Systemvariable, _hz_200
!item [_hz_200~~~~~~LONG $4ba]
bisherige Anzahl der 200-Hz Interrupts.

!label _longframe
!label Systemvariable, _longframe
!label Stackframes der CPU
!label CPU, Stackframes der
!item [_longframe~~~WORD $59e]
Wenn dieses Flag (!I)nicht(!i) null ist, dann ist eine CPU mit langen
Stackframes (also (!I)kein(!i) 68000er) installiert. Dieser Wert ist z.B.
dann von Interesse, wenn eine Routine in einen Exception-Vektor eingeklinkt
werden soll, und die zu untersuchenden Werte auf dem Stack Åbergeben werden.
Falls diese Variable den Wert 0 besitzt findet man die Parameter bei
(!B)Offset 6(!b), anderenfalls bei Offset 8.

!label _md
!label Systemvariable, _md
!item [_md~~~~~~~~~~LONG $49e]
offiziell nicht dokumentiert, und wohl auch unbenutzt.

!label _membot
!label Systemvariable, _membot
!item [_membot~~~~~~LONG $432]
Unteres Ende des unter GEMDOS freien ST-kompatiblen Speichers (also der
Anfang der ursprÅnglichen TPA). Die Variable wird von der (!nolink [BIOS])-Funktion
Getmpb verwendet.

!label _memtop
!label Systemvariable, _memtop
!item [_memtop~~~~~~LONG $436]
Analog zu _membot das Ende des freien ST-kompatiblen Speicherbereiches.

!label _nflops
!label Systemvariable, _nflops
!label Diskettenlaufwerke, Anzahl der
!item [_nflops~~~~~~WORD $4a6]
Zahl der angeschlossenen Diskettenlaufwerke

!label _p_cookies
!label Systemvariable, _p_cookies
!item [_p_cookies~~~LONG $5a0]
Zeiger auf den Cookie-Jar.

!label _prtabt
!label Systemvariable, _prtabt
!item [_prtabt~~~~~~WORD $4f0]
Flag fÅr Abbruch des Druckvorgangs. Es ist jedoch ungenutzt.

!label _shell_p
!label Systemvariable, _shell_p
!item [_shell_p~~~~~LONG $4f6]
Dieser Zeiger wird vom ROM nicht genutzt, d.h. Programme die ihn selbst
benutzen, mÅssen ihn im Falle eines Resets und bei Programm-Ende selbst
lîschen. Normalerweise wird _shell_p von UNIX-Ñhlichen Shells gesetzt, und
zeigt auf eine Routine, die eine Kommandozeile abarbeitet. Die Adresse der
Zeichenkette wird auf dem Stack (4(sp)) Åbergeben, das Ergebnis der
Operation erhÑlt man in Register D0.

!label _sysbase
!label Systemvariable, _sysbase
!item [_sysbase~~~~~LONG $4f2]
zeigt auf eine OSHEADER-Struktur.

!label _timr_ms
!label Systemvariable, _timr_ms
!item [_timr_ms~~~~~WORD $442]
Zeit in Millisekunden, die normalerweise zwischen zwei Aufrufen des
System-Timers vergeht. Dieser Wert wird auch von der BIOS-Funktion Tickcal
zurÅckgeliefert.

!label _v_bas_ad
!label Systemvariable, _v_bas_ad
!label Bildspeicher, Anfang des
!item [_v_bas_ad~~~~LONG $44e]
Zeiger auf den Anfang des Bildspeichers, der beim ST auf einer
256-Byte-Grenze beginnen muss. Beim STE und TT ist es eine 2- bzw. 8-Byte
Grenze.

!label _vbl_list
!label Systemvariable, _vbl_list
!label Vertical-Blank-Routinen
!item [_vbl_list~~~~LONG $4ce]
ursprÅngliche Liste der Vertical-Blank Routinen. Man sollte immer nur Åber
_vqlqueue zugreifen.

!label _vbclock
!label Systemvariable, _vbclock
!label Vertical Blanks, Anzahl der
!item [_vbclock~~~~~LONG $462]
Anzahl der erfolgten Vertical-Blanks.

!label _vblqueue
!label Systemvariable, _vqlqueue
!item [_vblqueue~~~~LONG $456]
Zeiger auf Zeigertabelle fÅr Vertical-Blank-Prozesse.

!label bell_hook
!label Systemvariable, bell_hook
!item [bell_hook~~~~LONG $5ac]
Zeiger auf eine Routine zur Ausgabe des Ping-GerÑusches. Das BIOS sorgt
selbsttÑtig fÅr die Abfrage des Flags in con_term und ruft diese Routine
nur dann auf, wenn das GerÑusch wirklich erklingen soll. Die Routine wird
im Supervisor-Modus aufgerufen per RTS abgeschlossen, und darf die Register
D0-D2 und A0-A2 verÑndern. Auch BIOS Aufrufe vom "innern" der Routine aus
sind erlaubt. (ab TOS 1.06, ab KAOS 1.4.2)

!label colorptr
!label Systemvariable, colorptr
!item [colorptr~~~~~LONG $45a]
Zeiger auf eine Farbpalette, die beim nÑchsten Vertical-Blank in die
ST-Hardware Farbregister geladen wird (ab Adresse $ffff8240). Damit wird
ein unschînes Zucken auf dem Bildschirm vermieden. Steht in colorptr eine
Null, so passiert nichts. Nach öbertragung der Farbwerte wird der Zeiger
gelîscht.

!label con_state
!label Systemvariable, con_state
!item [con_state~~~~LONG $4a8]
interner Zeiger fÅr Bildschirm-Ausgaberoutinen (offiziell nicht
dokumentiert).

!label conterm
!label Systemvariable, conterm
!label CON: Attribut-Bits des GerÑtes
!item [conterm~~~~~~BYTE $484]
Attribut-Bits fÅr das BIOS-GerÑt "CON:". Es gilt:
!begin_xlist [Bit-n =] !short
!item [Bit-0 =]
Tastenklick ein/aus
!item [Bit-1 =]
Tastenwiederholung ein/aus
!item [Bit-2 =]
Glocke bei Ausgabe von CTRL-G
!item [Bit-3 =]
bei Bconin den aktuellen Wert von Kbshift in den Bits 24..31 zurÅckgeben.
!end_xlist

!label criticret
!label Systemvariable, criticret
!item [criticret~~~~LONG $48a]
offiziell nicht dokumentiert, und auch wohl unbenutzt.

!label defshiftmd
!label Systemvariable, defshiftmd
!item [defshiftmd~~~BYTE $44a]
Standard-Farbgrafik-Auflîsung. Schaltet der Computer auf Farbbetrieb um
(nach einem Reset, durch Wechseln der Stecker oder durch Einschalten), wird
in die angegebene Auflîsung geschaltet.

!label end_os
!label Systemvariable, end_os
!label Betriebssystems, Ende des
!item [end_os~~~~~~~LONG $4fa]
Zeiger auf das erste, nicht fÅr TOS-interne Variablen benutzte Byte (also
das erste Byte des freien Speichers).

!label etv_critic
!label Systemvariable, etv_critic
!item [etv_critic~~~LONG $404]
logischer (!nolink [GEMDOS])-Vektor 257. Sollte immer nur per Setexc gesetzt werden.

!label etv_term
!label Systemvariable, etv_term
!item [etv_term~~~~~LONG $408]
logischer (!nolink [GEMDOS])-Vektor 258. Sollte immer nur per (!nolink [Setexc]) gesetzt werden.
Programme, die sich in irgendwelche (!link [Systemvektoren][Die Systemvektoren]) hÑngen, sollten sich
auch in (!I)diesen(!i) Vektor einklinken. Falls das Programm abnormal
beendet wird, springt das Betriebssystem zunÑchst Åber diesen Vektor, so
daû man sich in Ruhe aus allen verÑnderten Vektoren zurÅckziehen kann. Da
MagiC fÅr jede Applikation einen (!I)eigenen(!i) etv_term-Vektor verwendet,
kann es dabei (!I)nicht(!i) zu Kollisionen kommen.

!label etv_timer
!label Systemvariable, etv_timer
!item [etv_timer~~~~LONG $400]
logischer (!nolink [GEMDOS])-Vektor 256. Sollte immer nur per (!nolink [Setexc])
gesetzt werden.

!label etv_xtra
!label Systemvariable, etv_xtra
!item [etv_xtra~~~~~LONG $40c]
reserviert fÅr die logischen Vektoren 259-263 des GEMDOS, und z.Zt.
unbenutzt.

!label exec_os
!label Systemvariable, exec_os
!item [exec_os~~~~~~LONG $4fe]
Zeiger auf das erste Byte des Textsegmentes des Shell-Programms.

!label flock
!label Systemvariable, flock
!label DMA-Chip, Zugriff auf
!item [flock~~~~~~~~WORD $43e]
wenn hier ein Wert ungleich 0 steht, dann darf (!I)nicht(!i) auf den
DMA-Chip zugegriffen werden. DMA-GerÑtetreiber mÅssen also zunÑchst
abfragen, ob der DMA-Chip blockiert worden ist, und flock dann, wenn sie
mit der Arbeit beginnen, selbst setzen.

!label hdv_boot
!label Systemvariable, hdv_boot
!label Bootsektors, Laden des
!item [hdv_boot~~~~~LONG $47a]
Vektor zur Routine zum Laden des Bootsektors. Diese Routine wird vom BIOS
benutzt, um festzustellen, ob ein Bootsektor vorhanden und ob er ausfÅhrbar
ist.

!label hdv_bpb
!label Systemvariable, hdv_bpb
!label BPB, Ermitteln des
!item [hdv_bpb~~~~~~LONG $472]
Vektor zur Routine, die den BPB eines (!nolink [BIOS])-Laufwerkes ermittelt. Die
GerÑtenummer wird auf dem Stack (4(sp)) Åbergeben.

!label hdv_init
!label Systemvariable, hdv_init
!item [hdv_init~~~~~LONG $46a]
Vektor zu den Initialisierungsroutinen fÅr die Diskettenlaufwerke. Wird vor
dem Lesen der Bootsektoren ausgelesen, und kann daher nur von
reset-residenten Programmen oder ROM-Modulen verÑndert werden. Zu den
Aufgaben gehîren:
!begin_itemize
!item Initialisierung der Diskettenlaufwerke (_nflops wird entsprechend
gesetzt).
!item öbertragung von seekrate in die internen Variablen des (!nolink [BIOS]).
!end_itemize

!label hdv_mediach
!label Systemvariable, hdv_mediach
!label Media-Change-Status bestimmen
!item [hdv_mediach~~LONG $47e]
Vektor zur Routine zur Bestimmung des Media-Change-Status eines
(!nolink [BIOS])-Laufwerks. Die (!nolink [BIOS])-GerÑtenummer wird auf dem Stack
(4(sp)) Åbergeben.

!label hdv_rw
!label Systemvariable, hdv_rw
!item [hdv_rw~~~~~~~LONG $476]
Vektor zur Routine zum Lesen und Schreiben von Blîcken auf BIOS-Laufwerken.
Auf dem Stack werden die gleichen Parameter wie bei Rwabs Åbergeben
(beginnend mit 4(sp); rwflag).

!label kcl_hook
!label Systemvariable, kcl_hook
!label Tastaturklicks, GerÑusch bei
!item [kcl_hook~~~~~LONG $5b0]
Zeiger auf eine Routine zur Ausgabe des Tastenklick-GerÑusches. (!nolink [Das BIOS])
sorgt selbsttÑtig fÅr die Abfrage des Flags in con_term und ruft diese
Routine nur dann auf, wenn das GerÑusch wirklich erklingen soll. Die
Routine wird im Supervisor-Mode aufgerufen, per RTS abgeschlossen und darf
die Register D0-D2 und A0-A2 verÑndern und sollte nicht allzu viel Zeit
verbrauchen. (ab TOS 1.06, ab KAOS 1.4.2)

!label memcntrl
!label Systemvariable, memcntrl
!item [memcntrl~~~~~BYTE $424]
enthÑlt die untersten vier Bits des Speicher-Kontrollregisters ($ffff8001)

!label memval2
!label Systemvariable, memval2
!item [memval2~~~~~~LONG $43a]
sollte den Magic-Wert $237698aa enthalten. Haben sowohl memval2 als auch
memvalid den geforderten Wert, (und ab TOS 1.02 auch memval3), wird beim
nÑchsten Reset nur ein Warmstart ausgelîst.

!label memval3
!label Systemvariable, memval3
!item [memval3~~~~~~LONG $51a]
siehe auch memval und memval2. In diesem Fall ist der magische Wert
$5555aaaa. (ab TOS 1.02)

!label memvalid
!label Systemvariable, memvalid
!item [memvalid~~~~~LONG $420]
sollte die magische Zahl $752019f3 enthalten.

!label nvbls
!label Systemvariable, nvbls
!item [nvbls~~~~~~~~WORD $454]
Anzahl der EintrÑge, auf die _vblqueue zeigt. Identisch mit der Maximalzahl
von gleichzeitig installierbaren Vertical-Blank-Routinen (Standardwert: 8).

!label palmode
!label Systemvariable, palmode
!label Fernsehnorm, NTSC-
!label Fernsehnorm, PAL-
!item [palmode~~~~~~WORD $448]
legt laut Atari die Fernsehnorm fest. Es gilt:

0 = NTSC-Modus (60 Hz) (!nl)
1 = PAL-Modus~ (50 Hz)

TatsÑchlich wird diese Systemvariable nicht berÅcksichtigt. Eine énderung
der Bildwiederholfrequenz ist nur Åber die entsprechenden Hardwareregister
mîglich.

!label phystop
!label Systemvariable, phystop
!item [phystop~~~~~~LONG $42e]
Zeiger auf das erste Byte Åber dem physikalischen Ende des ST-kompatiblen
RAM-Bereichs.

!label prt_cnt
!label Systemvariable, prt_cnt
!label Alternate-Help, ZÑhler fÅr
!item [prt_cnt~~~~~~WORD $4ee]
ZÑhler fÅr die Alternate-Help TastendrÅcke. Es gilt:
!begin_xlist [+0 =] !short
!item [-1 =]
normaler Status
!item [~0 =]
Hardcopy beginnen
!item [>0 =]
Hardcopy abbrechen und auf Wert -1 zurÅcksetzen.
!end_xlist
Diese Variable muss man auch vor einem Aufruf von Prtblk setzen.

!label prv_aux
!label Systemvariable, prv_aux
!item [prv_aux~~~~~~LONG $512]
Zeiger auf eine Routine zur Ausgabe auf dem seriellen Port (ebenfalls fÅr
Hardcopy Routine). Das auszugebende Zeichen steht in 6(sp).

!label prv_auxo
!label Systemvariable, prv_auxo
!item [prv_auxo~~~~~LONG $50e]
Zeiger auf eine Routine zum Feststellen des Status der seriellen
Schnittstelle (ebenfalls fÅr Hardcopy-Funktion).

!label prv_lst
!label Systemvariable, prv_lst
!item [prv_lst~~~~~~LONG $50a]
Zeiger auf eine Routine zur Ausgabe auf dem parallelen Port (ebenfalls fÅr
Hardcopy Routine). Das auszugebende Zeichen steht in 6(sp).

!label prv_lsto
!label Systemvariable, prv_lsto
!item [prv_lsto~~~~~LONG $506]
Zeiger auf eine Routine zum Feststellen des Status des parallelen Ports
(ebenfalls fÅr Hardcopy-Routine).

!label pun_ptr
!label Systemvariable, pun_ptr
!item [pun_ptr~~~~~~LONG $516]
zeigt bei erfolgreicher Installation eines AHDI-kompatiblen
Festplattentreibers auf eine PUN_INFO-Struktur.

!label ramtop
!label Systemvariable, ramtop
!label Fast-RAM, Ende des
!item [ramtop~~~~~~~LONG $5a4]
Zeiger auf das Ende des Fast-RAM's im Atari-TT (nicht offiziell
dokumentiert).

!label ramvalid
!label Systemvariable, ramvalid
!item [ramvalid~~~~~LONG $5a8]
Magic-Wert der anzeigt, ob ramtop einen sinnvollen Wert enthÑlt. Muû
$1357bd13 sein. Nicht offiziell dokumentiert.

!label resvalid
!label Systemvariable, resvalid
!item [resvalid~~~~~LONG $426]
wenn diese Adresse bei einem Reset den Wert $31415926 enthÑlt, wird durch
resvector gesprungen.

!label resvector
!label Systemvariable, resvector
!item [resvector~~~~LONG $42a]
wird bei der Systeminitialisierung benutzt. EnthÑlt den Vektor fÅr einen
Reset, falls resvalid den korrekten Wert beinhaltet. Zum Zeitpunkt des
Aufrufs sind die Hardwareregister noch nicht gesetzt, und auch der
Stackpointer ist noch nicht initialisiert.

!label sav_context
!label Systemvariable, sav_context
!item [sav_context~~LONG $4ae]
sollte eigentlich ein Zeiger auf den Speicherbereich sein, in den bei
Exceptions die Register und Teile des Stacks gerettet werden. TatsÑchlich
wird er aber vom TOS nicht benutzt, und daher muû man direkt auf die
Variablen bei Adresse $380 zugreifen.

!label sav_row
!label Systemvariable, sav_row
!item [sav_row~~~~~~WORD $4ac]
interner Puffer zur Zwischenspeicherung der Cursor-Position (nicht
offiziell dokumentiert).

!label savptr
!label Systemvariable, sav_ptr
!item [savptr~~~~~~~LONG $4a2]
Zeiger auf Register-Zwischenspeicher von BIOS und XBIOS.

!label scr_dump
!label Systemvariable, scr_dump
!label Hardcopy-Routine, Zeiger auf
!item [scr_dump~~~~~LONG $502]
Zeiger auf die Hardcopy-Routine. Wird von der XBIOS-Funktion Scrdmp benutzt.

!label screenpt
!label Systemvariable, screenpt
!item [screenpt~~~~~LONG $45e]
Zeiger auf den Anfang des Bildspeichers. Wird beim nÑchsten Vertical-Blank
in die betreffenden Hardware-Register und nach _v_bas_ad Åbertragen,
anschlieûend aber nicht gelîscht. Daher sollte man stattdessen immer mit
Setscreen arbeiten.

!label seekrate
!label Systemvariable, seekrate
!label Diskettenlaufwerks, Seekrate des
!item [seekrate~~~~~WORD $440]
Seekrate fÅr die beiden Floppies. Es gilt:

0 = ~6 ms (!nl)
1 = 12 ms (!nl)
2 = ~2 ms (!nl)
3 = ~3 ms (!nl)

Die Variable wird gleich nach dem Systemstart vom (!nolink [BIOS]) ausgelesen, und
danach ignoriert. Zum Ñndern der tatsÑchlich benutzten Seekrate muû man
die (!nolink [XBIOS])-Funktion Floprate verwenden.

!label sshiftmd
!label Systemvariable, sshiftmd
!item [sshiftmd~~~~~BYTE $44c]
Kopie des Modus-Registers des Shifters. Es gilt:

0 = ~320 * 200 (vier Planes) (!nl)
1 = ~640 * 200 (zwei Planes) (!nl)
2 = ~640 * 400 (ein Plane) (!nl)
3 = ~640 * 480 (vier Planes, nur TT) (!nl)
4 = 1280 * 960 (ein Plane, nur TT) (!nl)
5 = ~320 * 480 (acht Planes, nur TT)

Alle anderen Werte sind fÅr zukÅnftige Erweiterungen reserviert.

!label swv_vec
!label Systemvariable, swv_vec
!item [swv_vec~~~~~~LONG $46e]
Zeiger auf die Routine, die auf das Anschlieûen eines Schwarz-Weiû bzw.
Farbmonitors reagiert (zeigt zu Beginn auf die normale Reset-Routine).

!label the_env
!label Systemvariable, the_env
!label Environment-Strings, Zeiger auf
!item [the_env~~~~~~LONG $4be]
Zeiger auf die Standard-Environment Strings (unbenutzt).

!label themd
!label Systemvariable, themd
!label MD-Struktur, Zeiger auf
!item [themd~~~~~~~~MD~~ $48e]
Zeiger auf MD-Struktur des GEMDOS. Diese wird ein einziges mal bei der
Initialisierung des Systems gesetzt, und darf nicht verÑndert werden (und
das wÅrde sie bei Benutzung von Getmpb!).

!label trp14ret
!label Systemvariable, trp14ret
!item [trp14ret~~~~~LONG $486]
offiziell nicht dokumentiert, und auch wohl unbenutzt.

!label vblsem
!label Systemvariable, vblsem
!item [vblsem~~~~~~~WORD $452]
ein Wert von 1 bedeutet, daû der Vertical-Blank-Handler aktiviert ist.

!label xconin
!label Systemvariable, xconin
!item [xconin~~~~~~~LONG $53e]
Acht Vektoren fÅr Bconin-Routinen. (ab TOS 1.02)

!label xconout
!label Systemvariable, xconout
!item [xconout~~~~~~LONG $57e]
Acht Vektoren fÅr Bconout-Routinen. (ab TOS 1.02)

!label xconstat
!label Systemvariable, xconstat
!item [xconstat~~~~~LONG $51e]
Acht Vektoren fÅr Bconstat-Routinen. (ab TOS 1.02)

!label xcostat
!label Systemvariable, xcostat
!item [xcostat~~~~~~LONG $55e]
Acht Vektoren fÅr Bcostat-Routinen. (ab TOS 1.02)

!end_xlist

Querverweis: (!nl)
(!link [Reset-Vektor][Einklinken in den Reset-Vektor])
~ (!link [Systemvektoren][Die Systemvektoren]) ~ Programmstart und TPA ~
Systemvariablen, nummerisch sortiert

!begin_node  Systemvariablen, nummerisch sortiert

!begin_xlist [xy_variable~~LONG $___]
!item [Variable~~~~~Adresse]

!item [etv_timer~~~~LONG $400]
!item [etv_critic~~~LONG $404]
!item [etv_term~~~~~LONG $408]
!item [etv_xtra~~~~~LONG $40c]
!item [memvalid~~~~~LONG $420]
!item [memcntrl~~~~~BYTE $424]
!item [resvalid~~~~~LONG $426]
!item [resvector~~~~LONG $42a]
!item [phystop~~~~~~LONG $42e]
!item [_membot~~~~~~LONG $432]
!item [_memtop~~~~~~LONG $436]
!item [memval2~~~~~~LONG $43a]
!item [flock~~~~~~~~WORD $43e]
!item [seekrate~~~~~WORD $440]
!item [_timr_ms~~~~~WORD $442]
!item [_fverify~~~~~WORD $444]
!item [_bootdev~~~~~WORD $446]
!item [palmode~~~~~~WORD $448]
!item [defshiftmd~~~BYTE $44a]
!item [sshiftmd~~~~~BYTE $44c]
!item [_v_bas_ad~~~~LONG $44e]
!item [vblsem~~~~~~~WORD $452]
!item [nvbls~~~~~~~~WORD $454]
!item [_vblqueue~~~~LONG $456]
!item [colorptr~~~~~LONG $45a]
!item [screenpt~~~~~LONG $45e]
!item [_vbclock~~~~~LONG $462]
!item [_frclock~~~~~LONG $466]
!item [hdv_init~~~~~LONG $46a]
!item [swv_vec~~~~~~LONG $46e]
!item [hdv_bpb~~~~~~LONG $472]
!item [hdv_rw~~~~~~~LONG $476]
!item [hdv_boot~~~~~LONG $47a]
!item [hdv_mediach~~LONG $47e]
!item [_cmdload~~~~~WORD $482]
!item [conterm~~~~~~BYTE $484]
!item [trp14ret~~~~~LONG $486]
!item [criticret~~~~LONG $48a]
!item [themd~~~~~~~~MD~~ $48e]
!item [_md~~~~~~~~~~LONG $49e]
!item [savptr~~~~~~~LONG $4a2]
!item [_nflops~~~~~~WORD $4a6]
!item [con_state~~~~LONG $4a8]
!item [sav_row~~~~~~WORD $4ac]
!item [sav_context~~LONG $4ae]
!item [_bufl~~~~~~~~LONG $4b2]
!item [_hz_200~~~~~~LONG $4ba]
!item [the_env~~~~~~LONG $4be]
!item [_drvbits~~~~~LONG $4c2]
!item [_dskbufp~~~~~LONG $4c6]
!item [_autopath~~~~LONG $4ca]
!item [_vbl_list~~~~LONG $4ce]
!item [prt_cnt~~~~~~WORD $4ee]
!item [_prtabt~~~~~~WORD $4f0]
!item [_sysbase~~~~~LONG $4f2]
!item [_shell_p~~~~~LONG $4f6]
!item [end_os~~~~~~~LONG $4fa]
!item [exec_os~~~~~~LONG $4fe]
!item [scr_dump~~~~~LONG $502]
!item [prv_lsto~~~~~LONG $506]
!item [prv_lst~~~~~~LONG $50a]
!item [prv_auxo~~~~~LONG $50e]
!item [prv_aux~~~~~~LONG $512]
!item [pun_ptr~~~~~~LONG $516]
!item [memval3~~~~~~LONG $51a]
!item [xconstat~~~~~LONG $51e]
!item [xconin~~~~~~~LONG $53e]
!item [xcostat~~~~~~LONG $55e]
!item [xconout~~~~~~LONG $57e]
!item [_longframe~~~WORD $59e]
!item [_p_cookies~~~LONG $5a0]
!item [ramtop~~~~~~~LONG $5a4]
!item [ramvalid~~~~~LONG $5a8]
!item [bell_hook~~~~LONG $5ac]
!item [kcl_hook~~~~~LONG $5b0]
!end_xlist

Querverweise: (!link [Systemvariablen][Die Systemvariablen])

!end_node

!end_node
