!iflang [english]

!begin_node The PMMU functions-handler
!html_name pmmu

The (!B)P(!b)aged (!B)M(!b)emory (!B)M(!b)anagement (!B)U(!b)nit functions-handler
can be reached via the (!link [PMMU-Cookie][Cookie, PMMU]), and is created by
programs such as (!I)Outside(!i)
or (!I)VRAM(!i) that can swap blocks of memory to and from a hard drive
when insufficient RAM is available for a given task. These memory
blocks will then lie in so-called 'virtual RAM' divided into 'pages'
on the drive.

The handler can only be called in supervisor-mode, and works via a
function number that is stored in data register d0. Possible return
values will be found in this register as well. Other processor
registers are not altered.

The following functions are available at present:

!begin_itemize !compressed
!item ClearPageMode
!item GetHdv_inuse
!item GetPageSize
!item pmem_size
!item PMMUversion
!item SetPageMode
!item vmem_size
!end_itemize

(!B)Important note:(!b) These functions only have meaning for a few programs
in the region of system software, an have (!I)no place(!i) in user programs.

See also:
Super ~ Supexec



!begin_node ClearPageMode
!html_name pmmu_ClearPageMode

(!begin_liste) [Description]

!item [Name:]
(!rdouble)ClearPageMode(!ldouble) - Clear PMMU mode for a memory block.

!item [Number:]
2

!item [Declaration:]
ULONG ClearPageMode ( ULONG mode, ULONG start_address, ULONG length );

!item [Description:]
The call ClearPagemode clears the PMMU mode for a given
               block of memory. The following apply:

!begin_table [l|l]
Parameter !! Meaning
!hline
(!I)mode(!i) !! Bit-vector as in SetPageMode
(!I)start_address(!i) !! Start address of memory segment
(!I)length(!i) !! Length of desired segment
!end_table

(!B)Note:(!b) All other bits are reserved for future purposes.
A program may only clear those bits that it has set itself previously.

!item [(!nolink [Return]) value:]
The function returns zero on error-free execution. Otherwise a value is returned
in which the bits that could not be manipulated are set.

!item [Group:]
(!link [PMMU functions-handler][The PMMU functions-handler])

!item [See also:]
GetHdv_inuse ~ GetPageSize ~ pmem_size ~ PMMUversion ~
SetPageMode ~ vmem_size

(!ende_liste)
!end_node


!begin_node GetHdv_inuse
!html_name pmmu_GetHdv_inuse

(!begin_liste) [Description]

!item [Name:]
(!rdouble)GetHdv_inuse(!ldouble) - Obtain the activity of the hard disk driver.

!item [Number:]
4

!item [Declaration:]
UWORD *GetHdv_inuse ( VOID );

!item [Description:]
The call GetHdv_inuse enables one to check whether
               the hard disk driver is currently in the process of
               swapping a page from or to RAM.

               (!B)Note:(!b) A check of this WORD (!I)must(!i) be made before the
               virtual RAM is accessed from an interrupt routine. This
               is because the hard disk driver may not be interrupted
               by an access to a non-existing memory page if it is
               currently offloading another page. If the status WORD
               is non-zero, the access has to be delayed.

!item [(!nolink [Return]) value:]
The function returns a pointer to the hdv_inuse WORD.

!item [Group:]
(!link [PMMU functions-handler][The PMMU functions-handler])

!item [See also:]
ClearPageMode ~ GetPageSize ~ pmem_size ~ PMMUversion ~
SetPageMode ~ vmem_size

(!ende_liste)
!end_node



!begin_node GetPageSize
!html_name pmmu_GetPageSize

(!begin_liste) [Description]

!item [Name:]
(!rdouble)GetPageSize(!ldouble) - Obtain size of a memory page.

!item [Number:]
3

!item [Declaration:]
ULONG GetPageSize ( VOID );

!item [Description:]
The call GetPageSize obtains the current size of a memory page.

               (!B)Note:(!b) With a MC-68030 the size can lie between 256
               bytes and 32 kbytes.

!item [(!nolink [Return]) value:]
The function returns the size of a memory page.

!item [Group:]


!item [See also:]
ClearPageMode ~  GetHdv_inuse ~  pmem_size ~  PMMUversion ~
SetPageMode  ~   vmem_size

(!ende_liste)
!end_node



!begin_node pmem_size
!html_name pmmu_pmem_size

(!begin_liste) [Description]

!item [Name:]
(!rdouble)pmem_size(!ldouble) - Obtain total size of the physical memory
               handled by the memory manager.

!item [Number:]
6

!item [Declaration:]
ULONG pmem_size ( VOID );

!item [Description:]
The call pmem_size obtains the total size of the
               physical memory that is being handled by the memory
               manager.

               (!B)Note:(!b) This function is only available as of
               Version 1.01 of the PMMU cookie.

!item [(!nolink [Return]) value:]
The function returns the named size.

!item [Group:]
(!link [PMMU functions-handler][The PMMU functions-handler])

!item [See also:]
ClearPageMode ~  GetHdv_inuse ~  GetPageSize ~
PMMUversion   ~  SetPageMode ~   vmem_size

(!ende_liste)
!end_node



!begin_node PMMUversion
!html_name pmmu_PMMUversion

(!begin_liste) [Description]

!item [Name:]
(!rdouble)PMMUversion(!ldouble) - Obtains the version number of the handler.

!item [Number:]
0

!item [Declaration:]
UWORD PMMUversion ( VOID );

!item [Description:]
The call PMMUversion obtains the version number of the
               PMMU handler. Here the bits 8..15 store the version,
               and the bits 0..7 the revision. A value of 0x102 thus
               represents Version 1.02.

!item [(!nolink [Return]) value:]
The function returns the version number of the handler
               in the above-mentioned format.

!item [Group:]
(!link [PMMU functions-handler][The PMMU functions-handler])

!item [See also:]
ClearPageMode ~   GetHdv_inuse ~  GetPageSize  ~ pmem_size ~
SetPageMode   ~  vmem_size

(!ende_liste)
!end_node



!begin_node SetPageMode
!html_name pmmu_SetPageMode

(!begin_liste) [Description]

!item [Name:]
(!rdouble)SetPageMode(!ldouble) - Set PMMU mode for a memory block.

!item [Number:]
1

!item [Declaration:]
ULONG SetPageMode ( ULONG mode, ULONG start_address, ULONG length );

!item [Description:]
The call SetPageMode sets the PMMU mode for a given
               block of memory. The following apply:

!begin_xlist !compressed [start_address]
!item [Parameter]
Meaning
!item [~]
~
!item [(!I)mode(!i)]
Mode as a bit-vector
!begin_xlist !compressed [Bit-0 =]
!item [Bit 0 =]
(!B)SwapInhibit(!b)
(!nl)
The memory block will not be offloaded
!item [Bit 1 =]
(!B)WriteProtect(!b)
(!nl)
The memory block will be write-protected; attempts to write to it lead to a
bus error
!item [Bit 2 =]
(!B)Used(!b)
(!nl)
The memory block is marked as being in use; by this it
temporarily gets a higher priority and is not offloaded at first
!item [Bit 3 =]
(!B)Modified(!b)
(!nl)
The memory block is marked as having been modified; due to this the block is
written to disk in any case before new data are read into its ophysical address
!item [Bit 4 =]
(!B)CacheInhibit(!b)
(!nl)
The processor caches are switched off for the specified block
!end_xlist
!item [(!I)start_address(!i)]
Start address of memory block
!item [(!I)length(!i)]
Length of the desired block
!end_xlist

               (!B)Note:(!b) The remaining bits are reserved and must be
               set to zero. For the virtual memory management the
               SwapInhibit bit is the most meaningful one, since it
               offers the possibility of protecting given memory
               blocks from being offloaded to disk.

               With write-protection of memory blocks it is imperative
               to note that the memory is subdivided into pages, which
               form the smallest unit that can be write-protected. One
               has to ensure that the write-protection does not extend
               to a block that must not be protected, because it does
               not belong to the program in question, for instance.

!item [(!nolink [Return]) value:]
The function returns zero on error-free execution.
               Otherwise a value is returned in which the bits that
               could not be manipulated are set.

!item [Group:]
(!link [PMMU functions-handler][The PMMU functions-handler])
                       
!item [See also:]
ClearPageMode ~  GetHdv_inuse ~  GetPageSize ~  pmem_size ~
PMMUversion   ~  vmem_size

(!ende_liste)
!end_node



!begin_node vmem_size
!html_name pmmu_vmem_size

(!begin_liste) [Description]

!item [Name:]
(!rdouble)vmem_size(!ldouble) - Inquire total size of the virtual memory.

!item [Number:]
5

!item [Declaration:]
ULONG vmem_size ( VOID );

!item [Description:]
The call vmem_size obtains the total size of the virtual memory.

!item [(!nolink [Return]) value:]
The function returns the named size.

!item [Group:]
(!link [PMMU functions-handler][The PMMU functions-handler])

!item [See also:]
ClearPageMode ~  GetHdv_inuse ~  GetPageSize ~  pmem_size ~
PMMUversion   ~  SetPageMode

(!ende_liste)
!end_node
!end_node

!else

!begin_node Der PMMU-Funktionshandler
!html_name pmmu

Der Funktionshandler ist (!uumlaut)ber den (!link [PMMU-Cookie][Cookie, PMMU]) erreichbar,
und wird von Programmen wie (!I)Outside(!i) oder (!I)VRAM(!i) angelegt. Der Aufruf des
Handlers ist nur im Supervisor-Modus erlaubt, und geschieht (!uumlaut)ber eine
Funktionsnummer, die im Datenregister D0 abgelegt wird. Eventuelle
R(!uumlaut)ckgabewerte finden sich ebenfalls in diesem Register wieder. Andere
Prozessorregister werden nicht ver(!aumlaut)ndert.

Zur Zeit stehen die folgenden Funktionen zur Verf(!uumlaut)gung:

!begin_itemize !compressed
!item ClearPageMode
!item GetHdv_inuse
!item GetPageSize
!item pmem_size
!item PMMUversion
!item SetPageMode
!item vmem_size
!end_itemize

(!B)Wichtiger Hinweis:(!b) Diese Funktionen sind nur f(!uumlaut)r einige wenige
Programme aus dem Bereich der Systemsoftware von Bedeutung, und haben in
Anwenderprogrammen (!I)nichts(!i) zu suchen.

Querverweis:
Super ~  Supexec



!begin_node ClearPageMode
!html_name pmmu_ClearPageMode

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)ClearPageMode(!ldouble) - PMMU Modus f(!uumlaut)r einen Bereich l(!oumlaut)schen.

!item [Nummer:]
2

!item [Deklaration:]
ULONG ClearPageMode ( ULONG mode, ULONG start_address, ULONG length );

!item [Beschreibung:]
Die Funktion l(!oumlaut)scht den PMMU-Modus f(!uumlaut)r einen bestimmten Speicherbereich. Es
gilt:

!begin_table [l|l]
Parameter !! Bedeutung
!hline
(!I)mode(!i) !! Bit-Vektor analog SetPageMode
(!I)start_address(!i) !! Anfangsadresse des Speicherbereichs
(!I)length(!i) !! L(!aumlaut)nge des gew(!uumlaut)nschten Bereichs
!end_table

(!B)Hinweis:(!b) Alle anderen Bits sind f(!uumlaut)r zuk(!uumlaut)nftige Zwecke reserviert.
Ein Programm darf nur die Bits l(!oumlaut)schen, die es vorher selbst gesetzt hat.

!item [Ergebnis:]
Die Funktion liefert bei fehlerfreier Ausf(!uumlaut)hrung den Wert Null zur(!uumlaut)ck.
Anderenfalls wird ein Wert zur(!uumlaut)ckgeliefert, bei dem die Bits gesetzt sind,
die nicht manipuliert werden konnten.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])

!item [Querverweis:]
GetHdv_inuse  ~ GetPageSize ~  pmem_size ~  PMMUversion ~
SetPageMode  ~  vmem_size

(!ende_liste)
!end_node


!begin_node GetHdv_inuse
!html_name pmmu_GetHdv_inuse

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)GetHdv_inuse(!ldouble) - Aktivit(!aumlaut)t des Plattentreibers ermitteln.

!item [Nummer:]
4

!item [Deklaration:]
UWORD *GetHdv_inuse ( VOID );

!item [Beschreibung:]
Die Funktion erm(!oumlaut)glicht es festzustellen, ob der Plattentreiber gerade dabei
ist, eine Seite ein- oder auszuswappen.

(!B)Hinweis:(!b) Eine (!Uumlaut)berpr(!uumlaut)fung dieses Wortes mu(!sharps) erfolgen, bevor aus
einer Interruptroutine heraus ein Zugriff auf das virtuelle RAM stattfindet.
Der Plattentreiber darf n(!aumlaut)mlich nicht durch einen Zugriff auf eine nicht
existente Speicherseite unterbrochen werden, falls gerade eine andere Seite
ausgelagert wird. Ist das Statuswort ungleich Null, mu(!sharps) der Zugriff
verschoben werden.

!item [Ergebnis:]
Die Funktion liefert einen Zeiger auf das hdv_inuse-Wort zur(!uumlaut)ck.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])

!item [Querverweis:]
ClearPageMode ~  GetPageSize ~  pmem_size ~  PMMUversion ~
SetPageMode   ~  vmem_size

(!ende_liste)
!end_node



!begin_node GetPageSize
!html_name pmmu_GetPageSize

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)GetPageSize(!ldouble) - Gr(!oumlaut)(!sharps)e der Speicherseiten ermitteln.

!item [Nummer:]
3

!item [Deklaration:]
ULONG GetPageSize ( VOID );

!item [Beschreibung:]
Die Funktion ermittelt die aktuelle Gr(!oumlaut)(!sharps)e einer Speicherseite.

(!B)Hinweis:(!b) Beim MC-68030 kann die Gr(!oumlaut)(!sharps)e zwischen 256 Bytes und 32
Kbyte liegen.

!item [Ergebnis:]
Die Funktion liefert Gr(!oumlaut)(!sharps)e einer Speicherseite zur(!uumlaut)ck.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])

!item [Querverweis:]
ClearPageMode ~  GetHdv_inuse ~  pmem_size ~  PMMUversion ~
SetPageMode  ~   vmem_size

(!ende_liste)
!end_node



!begin_node pmem_size
!html_name pmmu_pmem_size

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)pmem_size(!ldouble) - Gesamtgr(!oumlaut)(!sharps)e des vom Speichermanagers verwalteten
physikalischen Speichers ermitteln.

!item [Nummer:]
6

!item [Deklaration:]
ULONG pmem_size ( VOID );

!item [Beschreibung:]
Die Funktion ermittelt die Gesamtgr(!oumlaut)(!sharps)e des physikalischen Speichers, der vom
Speichermanager verwaltet wird.

(!B)Hinweis:(!b) Diese Funktion steht erst ab Version 1.01 des PMMU-Cookies
zur Verf(!uumlaut)gung.

!item [Ergebnis:]
Die Funktion liefert die genannte Gr(!oumlaut)(!sharps)e zur(!uumlaut)ck.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])

!item [Querverweis:]
ClearPageMode ~  GetHdv_inuse ~  GetPageSize ~
PMMUversion   ~  SetPageMode ~   vmem_size

(!ende_liste)
!end_node



!begin_node PMMUversion
!html_name pmmu_PMMUversion

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)PMMUversion(!ldouble) - ermittelt die Versionsnummer des Handlers

!item [Nummer:]
0

!item [Deklaration:]
UWORD PMMUversion ( VOID );

!item [Beschreibung:]
Die Funktion ermittelt die Versionsnummer des PMMU-Handlers. Dabei wird in
den Bits 8..15 die Version, und in den Bits 0..7 die Revision abgelegt. Ein
Wert von 0x102 steht demnach f(!uumlaut)r Version 1.02

!item [Ergebnis:]
Die Funktion liefert die Versionsnummer des Handlers im o.g. Format zur(!uumlaut)ck.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])

!item [Querverweis:]
ClearPageMode ~   GetHdv_inuse ~  GetPageSize  ~ pmem_size ~
SetPageMode   ~  vmem_size

(!ende_liste)
!end_node



!begin_node SetPageMode
!html_name pmmu_SetPageMode

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)SetPageMode(!ldouble) - PMMU Modus f(!uumlaut)r einen Bereich setzen.

!item [Nummer:]
1

!item [Deklaration:]
ULONG SetPageMode ( ULONG mode, ULONG start_address, ULONG length );

!item [Beschreibung:]
Die Funktion setzt den PMMU-Modus f(!uumlaut)r einen bestimmten Speicherbereich. Es
gilt:

!begin_xlist !compressed [start_address]
!item [Parameter]
Bedeutung
!item [~]
~
!item [(!I)mode(!i)]
Modus als Bit-Vektor
!begin_xlist !compressed [Bit-0 =]
!item [Bit 0 =]
(!B)SwapInhabit(!b)
(!nl)
Der Speicherbereich wird nicht ausgelagert.
!item [Bit 1 =]
(!B)WriteProtect(!b)
(!nl)
Der Speicherbereich wird schreibgesch(!uumlaut)tzt; Schreibversuche f(!uumlaut)hren zu einem
Busfehler.
!item [Bit 2 =]
(!B)Used(!b)
(!nl)
Der Speicherbereich wird als benutzt gekennzeichnet. Hierdurch erh(!aumlaut)lt er
tempor(!aumlaut)r eine h(!oumlaut)here Priorit(!aumlaut)t, und wird vorerst nicht ausgelagert.
!item [Bit 3 =]
(!B)Modified(!b)
(!nl)
Der Speicherbereich wird als ver(!aumlaut)ndert markiert. Dadurch wird dieser Bereich
auf jeden Fall auf die Platte geschrieben, bevor neue Daten an seine
physikalische Adresse eingelesen werden.
!item [Bit 4 =]
(!B)CacheInhabit(!b)
(!nl)
Die Prozessor-Caches werden f(!uumlaut)r den angegebenen Bereich abgeschaltet.
!end_xlist
!item [(!I)start_address(!i)]
Anfangsadresse des Speicherbereichs
!item [(!I)length(!i)]
L(!aumlaut)nge des gew(!uumlaut)nschten Bereichs
!end_xlist

(!B)Hinweis:(!b) Die restlichen Bits sind reserviert und m(!uumlaut)ssen auf Null
gesetzt werden. F(!uumlaut)r die virtuelle Speicherverwaltung ist in erster Linie das
SwapInhabit-Bit von Bedeutung, da es die M(!oumlaut)glichkeit bietet, bestimmte
Speicherbereiche gegen Auslagern abzusichern.

Beim Schreibsch(!uumlaut)tzen von Speicherbereichen ist unbedingt zu beachten, da(!sharps)
der Speicher in Seiten unterteilt ist, die die kleinste Einheit f(!uumlaut)r einen
Schreibschutz darstellen. Es mu(!sharps) sichergestellt werden, da(!sharps) sich der
Schreibschutz nicht auch auf einen Bereich erstreckt, der nicht gesch(!uumlaut)tzt
werden darf, weil er beispielsweise nicht zum eigenen Programm geh(!oumlaut)rt.

!item [Ergebnis:]
Die Funktion liefert bei fehlerfreier Ausf(!uumlaut)hrung den Wert Null zur(!uumlaut)ck.
Anderenfalls wird ein Wert zur(!uumlaut)ckgeliefert, bei dem die Bits gesetzt sind,
die nicht manipuliert werden konnten.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])
                       
!item [Querverweis:]
ClearPageMode ~  GetHdv_inuse ~  GetPageSize ~  pmem_size ~
PMMUversion   ~  vmem_size

(!ende_liste)
!end_node



!begin_node vmem_size
!html_name pmmu_vmem_size

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)vmem_size(!ldouble) - Gesamtgr(!oumlaut)(!sharps)e des virtuellen Speichers erfragen.

!item [Nummer:]
5

!item [Deklaration:]
ULONG vmem_size ( VOID );

!item [Beschreibung:]
Die Funktion ermittelt die Gesamtgr(!oumlaut)(!sharps)e des virtuellen Speichers.

!item [Ergebnis:]
Die Funktion liefert die genannte Gr(!oumlaut)(!sharps)e zur(!uumlaut)ck.

!item [Gruppe:]
(!link [PMMU-Funktionshandler][Der PMMU-Funktionshandler])

!item [Querverweis:]
ClearPageMode ~  GetHdv_inuse ~  GetPageSize ~  pmem_size ~
PMMUversion   ~  SetPageMode

(!ende_liste)
!end_node
!end_node

!endif
