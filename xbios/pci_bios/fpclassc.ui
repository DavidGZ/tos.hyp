!iflang [english]


!begin_node find_pci_classcode
(!begin_liste) [Availability]

!item [Name:]
Returns a device handle for a device that matches the given class code.

!item [Opcode:]
301

!item [Syntax:]
int32_t find_pci_classcode( int32_t classcode, int16_t index );

!item [Description:]
This functions returns a device handle for a device that matches the given
class code.

A driver can query multiple devices with the same class code by starting with
index = 0,1,2,... and calling this function until PCI_DEVICE_NOT_FOUND
is returned.

!begin_xlist [Parameters]
!item [~] ~
!item [classcode]
class code in bits 23..0 (!nl)
Base class in bits 23..16 (0 - $FF)  (!nl)
Sub class in bits 15..8 (0 - $FF) (!nl)
Prog.If. in bits 7..0 (0 - $FF)

mask in bits 26..24 (!nl)
bit 26: (0: compare base class, 1: ignore it) (!nl)
bit 25: (0: compare sub class, 1: ignore it) (!nl)
bit 24: (0: compare prog.if., 1: ignore it)

!item [index] index of card (0 - number of cards with these IDs)
!end_xlist
          
!item [(!nolink [Return]) Value:]
Device handle for a device or PCI_DEVICE_NOT_FOUND.

!item [Group:]
PCI-BIOS

!item [Availability:]
PCI-(!nolink [BIOS]) V2.00

!item [See Also:]
(!link [Binding] [Bindings for find_pci_classcode])

(!ende_liste)


!begin_node Bindings for find_pci_classcode
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t find_pci_classcode( int32_t classcode, int16_t index );
!item [Assembler:]
!begin_verbatim
move.w    index,-(sp)       ; Offset 6
move.l    classcode,-(sp)   ; Offset 2
move.w    #301,-(sp)        ; Offset 0
trap      #14               ; XBIOS aufrufen
addq.l    #8,sp             ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node  find_pci_classcode
(!begin_liste) [Beschreibung]

!item [Name:]
Liefert ein Devicehandle fÅr ein GerÑt einer bestimmten GerÑteklasse.

!item [Xbiosnummer:]
301

!item [Deklaration:]
int32_t find_pci_classcode( int32_t classcode, int16_t index );

!item [Beschreibung:]
Die Funktion liefert ein Devicehandle fÅr ein GerÑt, das dem angegebenen
GerÑt entspricht.

Der Treiber kann diese Funktion mehrmals fÅr eine GerÑte ID aufrufen und den
index = 0,1,2,... fÅr jeden Aufruf hochzÑhlen, bis die Funktion
PCI_DEVICE_NOT_FOUND liefert.

!begin_xlist [Parameter]
!item [~] ~
!item [classcode]
Class code in Bits 23..0 (!nl)
Base class in Bits 23..16 (0 - $FF)  (!nl)
Sub class in Bits 15..8 (0 - $FF) (!nl)
Prog.If. in Bits 7..0 (0 - $FF)

Maske in Bits 26..24 (!nl)
bit 26: (0: base class testen, 1: ignorieren) (!nl)
bit 25: (0: sub class testen, 1: ignorieren) (!nl)
bit 24: (0: prog.if. testen, 1: ignorieren)

!item [index] Kartenindex (0 - Anzahl Karten mit diesen IDs)
!end_xlist

!item [Ergebnis:]
Devicehandle fÅr das GerÑt oder PCI_DEVICE_NOT_FOUND.

!item [Gruppe:]
PCI-BIOS

!item [VerfÅgbar:]
PCI-(!nolink [BIOS]) V2.00

!item [Querverweis:]
(!link [Binding] [Bindings fÅr find_pci_classcode])

(!ende_liste)


!begin_node Bindings fÅr find_pci_classcode
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <tos.h>

int32_t find_pci_classcode( int32_t classcode, int16_t index );
!item [Assembler:]
!begin_verbatim
move.w    index,-(sp)       ; Offset 6
move.l    classcode,-(sp)   ; Offset 2
move.w    #301,-(sp)        ; Offset 0
trap      #14               ; XBIOS aufrufen
addq.l    #8,sp             ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif