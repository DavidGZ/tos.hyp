!begin_node XBIOS-Strukturen

!subtoc [stg, html]

!begin_node BCONMAP

Diese Struktur ist wie folgt definiert:
!begin_verbatim        
typedef struct
{
  MAPTAB *maptab;      /* Liste der seriellen Schnittstellen */
  WORD    maptabsize;  /* Anzahl der Schnittstellentreiber   */ 
        
} BCONMAP;

Querverweis: Bconmap
!end_verbatim
!end_node

!begin_node CD_DISC_INFO

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    UBYTE disctype;
    UBYTE firsttrack, lasttrack, curtrack;
    UBYTE relposz, relposm, relposs, relposf;
    UBYTE absposz, absposm, absposs, absposf;
    UBYTE endposz, endposm, endposs, endposf;
    UBYTE index, res[3];
    ULONG reserved[123];
} CD_DISC_INFO;
!end_verbatim

Querverweis: Metadiscinfo
!end_node


!begin_node CD_TOC_ENTRY

Die Struktur CD_TOC_ENTRY ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    UBYTE trackno;
    UBYTE minute;
    UBYTE second;
    UBYTE frame;
} CD_TOC_ENTRY;
!end_verbatim

Querverweis: (!link [CD-ROM Opcodes fÅr Fcntl][Fcntl, CD-ROM-Kommandos fÅr])
!end_node 


!begin_node DSPBLOCK
Diese Struktur ist wie folgt definiert:
!begin_verbatim
typedef struct
{
    WORD    blocktype;   /* Typ der Daten im Puffer: */
                         /*   0 : LongInt            */
                         /*   1 : Integer            */
                         /*   2 : Byte               */
    LONG    blocksize;   /* Puffergrîûe              */
    VOID    *blockaddr;  /* Zeiger auf den Puffer    */
    
} DSPBLOCK;

!end_verbatim
Querverweis: Dsp_MultBlocks ~  DSP-Programmierung
!end_node

!begin_node KBDVBASE

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    VOID  (*kb_midivec)();    /* MIDI Interrupt-Vektor    */
    VOID  (*kb_vkbderr)();    /* Tastatur Fehler-Vektor   */
    VOID  (*kb_vmiderr)();    /* MIDI Fehler-Vektor       */
    VOID  (*kb_statvec)();    /* Tastatur-Status          */
    VOID  (*kb_mousevec)();   /* Tastatur-Maus-Status     */
    VOID  (*kb_clockvec)();   /* Tastatur-Zeitgeber       */
    VOID  (*kb_joyvec)();     /* Tastatur-Joystick-Status */
    VOID  (*kb_midisys)();    /* System-Midi-Vektor       */
    VOID  (*kb_kbdsys)();     /* Tastatur-Vektor          */
    BYTE   drvstat;           /* Tastatur-Treiberstatus   */
} KBDVBASE ;
!end_verbatim

(!B)Hinweis:(!b) Bei den Komponenten (!I)kb_clockvec(!i) und
(!I)kb_joyvec(!i) ist zu beachten, daû die Adresse des Paketes im Register
A0 und auf dem Stack Åbergeben wird; die Routinen sollten auûerdem mit einem
RTS abgeschlossen sein, und nach Mîglichkeit nicht lÑnger als 1ms laufen.

Die Komponente (!I)drvstat(!i) enthÑlt einen Wert ungleich Null, wenn der
IKBD gerade eine Paket verschickt.

Querverweis: Kbdvbase
!end_node


!begin_node KEYTAB

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
   BYTE *unshift;   /* Tabelle 'normale' TastendrÅcke */
   BYTE *shift;     /* Tabelle Shift-TastendrÅcke     */
   BYTE *capslock;  /* Tabelle Capslock-TastendrÅcke  */
} KEYTAB;
!end_verbatim

Querverweis: Keytbl
!end_node


!begin_node MAPTAB

Diese Struktur ist wie folgt definiert:
!begin_verbatim
typedef struct
{
  WORD   (*Bconstat)(); 
  LONG   (*Bconin)();
  LONG   (*Bcostat)();
  VOID   (*Bconout)();
  ULONG  (*Rsconf)();
  IOREC  *iorec;

} MAPTAB;
!end_verbatim

Querverweis: Bconmap  ~ BCONMAP   
!end_node


!begin_node META_DRVINFO

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    BYTE  *mdr_name;
    LONG  reserved[3];
} META_DRVINFO;
!end_verbatim

Querverweis: Laufwerksfunktionen ~ Metaopen
!end_node

!begin_node META_INFO_1

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    ULONG drivemap;          /* Bits fÅr MetaDOS Laufwerke.   */
                             /*   (Bit-0 = Laufwerk-A, usw.)  */
    BYTE *version;           /* Name und Version von MetaDOS  */
    LONG reserved;           /* reserviert                    */
    META_INFO_2 *info;       /* Zeiger auf zweite Struktur    */
} META_INFO_1;
!end_verbatim

(!B)Hinweis:(!b) Die Komponente (!I)info(!i) ist erst ab (!nolink [MetaDOS]) V2.30
vorhanden!

Querverweis: Metainit
!end_node


!begin_node META_INFO_2

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    USHORT      mi_version;     /* Versionsnummer (0x230 = '02.30') */
    LONG        mi_magic;       /* Magic-Konstante '_MET'           */
    CONST BYTE  *mi_log2phys;   /* Zuordnung GEMDOS->MetaDOS        */
} META_INFO_2;
!end_verbatim

(!B)Hinweis:(!b) Diese Struktur existiert erst ab (!nolink [MetaDOS]) Version 2.30. Der
Parameter (!I)mi_log2phys(!i) ist ein Zeiger auf ein Feld, das zu jedem
(!nolink [GEMDOS])-GerÑt den dazugehîrigen (!nolink [MetaDOS]) Laufwerksbuchstaben oder Null
enthÑlt. Mit Hilfe dieser Information kann man also feststellen, welcher
(!nolink [MetaDOS]) Laufwerksbuchstabe zu welchem (!nolink [GEMDOS])-Laufwerk gehîrt.

Querverweis: Metainit ~ META_INFO_1
!end_node


!begin_node MOD_DESC
!begin_verbatim
typedef struct
{
  char  Name[34];            /* beschreibender Text                  */
  long  colors;
  int   xres,yres;
  long  fileptr;             /* Zeiger in die Modedatei              */

} MOD_DESC;
!end_verbatim

Querverweis: Crazy-Dots-XBIOS-Erweiterung
!end_node


!begin_node MOUSE

Diese Struktur ist wie folgt definiert:
!begin_verbatim
typedef struct
{
  BYTE    topmode;    /* 0: Y=0 am unteren Rand,    */
                      /* 1: Y=1 am oberen Rand      */
                                 
  BYTE    buttons;    /* analog IKBD                */
  BYTE    x_scale;    /* zusÑtzliche Parameter, vom */
  BYTE    y_scale;    /* gewÑhlten Modus abhÑngig.  */
  WORD    x_max;      /* maximale X-Position        */
  WORD    y_max;      /* maximale Y-Position        */
  WORD    x_start;    /* Anfangsposition X          */
  WORD    y_start;    /* Anfangsposition Y          */
        
} MOUSE;
!end_verbatim

(!B)Hinweis:(!b) Die Komponenten (!I)x_max(!i) und folgende sind nur im absoluten
Modus verfÅgbar.

Querverweis: GEM  ~ Initmouse ~  VDI
!end_node


!begin_node OVERPATCH
Diese Struktur ist wie folgt definiert:
!begin_verbatim
typedef struct
{
  WORD low_w  ,mid_w  ,high_w;   /* Breite in Pixeln                */
  WORD low_h  ,mid_h  ,high_h;   /* Hîhe   in Pixeln                */
  LONG low_off,mid_off,high_off; /* Offset Bildspeicher<>Logbase    */
  LONG mono_add,color_add;       /* ZusÑtzlicher Speicherbedarf     */
  BYTE clear_scan;               /* Scancode  der Clear-Funktion    */
  BYTE clear_shift;              /* Shiftcode der Clear-Funktion    */
  BYTE setup_shift;              /* Shiftcode fÅr Setup (Maske)     */
  BYTE invert_shift;             /* Shiftcode zum Invert. des Modus */
  BYTE abort_shift;              /* Shiftcode zum Abbrechen         */
 
} OVERPATCH;
!end_verbatim
Querverweis: Oscanpatch ~  OverScan-XBIOS-Erweiterungen

!end_node


!begin_node PBDEF

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
  VOID    *pb_scrptr;    /* Zeiger auf Bildschirmanfang     */
  WORD     pb_offset;    /* dazu zu addierender Offset      */
  WORD     pb_width;     /* Bildschirmbreite in Punkten     */
  WORD     pb_height;    /* Bildschirmhîhe in Punkten       */
  WORD     pb_left;      /* Linker Rand in Punkten          */
  WORD     pb_right;     /* Rechter Rand in Punkten         */  
  WORD     pb_screz;     /* Auflîsung                       */
  WORD     pb_prrez;     /* Druckertyp (Atari/Epson)        */
  VOID    *pb_colptr;    /* Zeiger auf Farbpalette          */
  WORD     pb_prtype;    /* 0: Atari Matrix monochrom       
                            1: Atari Matrix farbig          
                            2: Atari Typenrad monochrom     
                            3: Epson Matrix monochrom       */
                                 
  WORD     pb_prport;    /* Schnittstelle Centronics/RS-232 */
  VOID    *pb_mask;      /* Zeiger auf Halbtonmaske         */

} PBDEF;
!end_verbatim

(!B)Hinweis:(!b) Es muû darauf geachtet werden, daû die Summe der Komponenten
(!I)pb_width(!i), (!I)pb_left(!i) und (!I)pb_right(!i) genau die tatsÑchliche Bildschirmbreite
ergibt.

Querverweis: Prtblk  ~ XBIOS

!end_node

!begin_node PMODE
!begin_verbatim
typedef struct  {
  char  name[34];
  int   mode_id;             /* lfd. Nr.                             */
  int   xres,yres;           /* Breite/Hîhe in Pixeln                */
  int   fx,fy;               /* Breite/Hîhe gesamt                   */
  long  colors;              /* Anzahl gleichzeitiger Farben         */
  int   org;                 /* Organisation des Speichers           */
  int   fh10,fv10;           /* Zeilenfreq.*10, Bildfreq*10          */
  int   aspect100;           /* 100*PixelBreite/PixelHîhe            */
  int   disp_scan100;
  long  clk;                 /* Dotclock in Hz                       */
  /*
  * Register des Grafikcontrollers
  */
  int   Clock;               /* Frequenznummer, muû vorm Schreiben in */
                             /* das Clock-Register Åber die IcsLut
                                umgesetzt werden (s. u.)              */
  char  misc_out;
  char  ts[10];              /* Timing Sequencer Regs.                */
  char  crtc[35];            /* CRT-Controller Regs.                  */
  char  gdc[10];             /* Graphics Display Controller           */
  char  atc[24];             /* Attribute Controller                  */
  char  reserved[18];

} PMODE;

static char IcsLut[32] = { 0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,
               30,1,17,9,25,5,21,13,29,3,19,11,27,7,23,15,31 };

!end_verbatim

Querverweis: Crazy-Dots-XBIOS-Erweiterung ~ ReadMode ~ GetActiveModeDesc
!end_node


!begin_node SCREEN
!begin_verbatim
typedef struct 
{
  char xbra_id[4];           /* XBRA-Id: 'CDOT'                      */
  char version[4];           /* z.B.: '1.10'                         */
  char *sm194_addr;          /* Zeiger auf Groûbildschirmspeicher    */
  char *sm124_addr;          /* Zeiger auf SM124 Bildspeicher.       */
  LINEA *line_A;             /* Zeiger auf LINE_A Block.             */
  int  scrn_width;           /* Bildschirmweite                      */
  int  scrn_height;          /* Bildschirmhîhe                       */
  int  scrn_byte_width;      /* Bildschirmweite in Bytes             */
  int  scrn_planes;          /* Bildschirmfarbebenen                 */
  int  PhysMode;             /* Modusmummer                          */
  int  VirtMode;             /* x/16 u. y/16 in je einem Byte cod.   */
  PMODE *ModStruct;          /* Zeiger auf akt. Grafikmodus (s.u.)   */
  int  grau;     /* Flag fÅr den VDI-Treiber (Darstellung: Grau/Farbe)*/
  int  BiosText;             /* Flag fÅr den VDI-Treiber             */
  int  CurText;              /* Flag fÅr den VDI-Treiber             */
  int  BlitMode;             /*           "                          */

} SCREEN;
!end_verbatim

Querverweis: Crazy-Dots-XBIOS-Erweiterung
!end_node


!begin_node SCREEN, OverScan
Diese Struktur ist wie folgt definiert:
!begin_verbatim
typedef struct
{
  WORD  width;             /* Breite in Pixel                     */
  WORD  height;            /* Hîhe   in Pixel                     */
  WORD  bytes_per_line;    /* Bytes pro Bildschirmzeile           */
  LONG  length_of_screen;  /* LÑnge des Bildspeichers in Bytes    */
  LONG  physbase_offset;   /* Offset Start-Bildspeicher<>Physbase */
  LONG  logbase_offset;    /* Offset Start-Bildspeicher<>Logbase  */
  
} SCREEN;
!end_verbatim
Querverweis:  (!link [OverScan-XBIOS-Funktionen] [OverScan-XBIOS-Erweiterungen]) ~
Oscantab
!end_node


!end_node

