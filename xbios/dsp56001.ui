!begin_node Dsp_Available
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_AvailableÆ - Ermitteln des freien x und y Speichers
!item [Xbiosnummer:]
106
!item [Binding:]
(!link [Bindings fÅr Dsp_Available] [Bindings fÅr Dsp_Available])
!item [Beschreibung:]
Die Funktion Dsp_Available ermittelt den freien X- und Y-Speicher. Freier
Speicher beginnt stets an der physikalischen Adresse 0. Die unteren
64 Worte sind fÅr Interrupt-Vektoren reserviert.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Available])   ~ 
               Dsp_Lock  ~    Dsp_Unlock  ~  Dsp_Reserve ~
               Dsp_LoadProg ~ Dsp_ExecProg ~ Dsp_ExecBoot
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Available
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_Available ( LONG *xavailable, LONG *yavailable );
!item [Assembler:]
!begin_verbatim
pea       yavailable   ; Offset 6
pea       xavailable   ; Offset 2
move.w    #106,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
lea       $A(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_BlkBytes
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_BlkBytesÆ - byteweiser Datentransfer zum DSP
!item [Xbiosnummer:]
124
!item [Binding:]
(!link [Bindings fÅr Dsp_BlkBytes] [Bindings fÅr Dsp_BlkBytes])
!item [Beschreibung:]
Die Funktion kopiert (!I)size_in(!i) vorzeichenlose Bytes aus dem Puffer
(!I)data_in(!i) zum DSP. Nachdem alle Daten Åbertragen wurden, wartet die
Prozedur bis die Daten verarbeitet wurden. Dann werden (!I)size_out(!i)
8-Bit-DSP-Worte in den Puffer (!I)data_out(!i) zurÅckkopiert, unabhÑngig
davon, wie viel Daten wirklich vorliegen. Sollen keine Daten gesendet
werden, muû man (!I)size_in(!i) auf Null setzen. Gleiches gilt fÅr das
Empfangen, in diesem Fall wird (!I)size_out(!i) Null zugewiesen.
(!I)size_in(!i) und (!I)size_out(!i) sind auf 64 KByte begrenzt. Daten
werden nur ausgetauscht, wenn der DSP-Prozeû dazu bereit ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_BlkBytes])   ~   
               Dsp_DoBlock  ~  Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~  Dsp_BlkWords ~  Dsp_InStream ~
               Dsp_OutStream    ~  Dsp_IOStream  ~ Dsp_GetWordSize ~
               Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_BlkBytes
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_BlkBytes ( VOID *data_in,  LONG size_in, VOID *data_out,
                    LONG size_out );
!item [Assembler:]
!begin_verbatim
move.l    size_out,-(sp)  ; Offset 14
pea       data_out        ; Offset 10
move.l    size_in,-(sp)   ; Offset  6
pea       data_in         ; Offset  2
move.w    #124,-(sp)      ; Offset  0
trap      #14             ; XBIOS aufrufen
lea       $12(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_BlkHandShake
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDspBlkHandShakeÆ - Datentransfer zum DSP mit Handshake
!item [Xbiosnummer:]
97
!item [Binding:]
(!link [Bindings fÅr Dsp_BlkHandShake] [Bindings fÅr Dsp_BlkHandShake])
!item [Beschreibung:]
Die Funktion kopiert (!I)size_in(!i) DSP-Worte aus dem Puffer
(!I)data_in(!i) zum DSP. Nachdem alle Daten Åbertragen wurden, wartet die
Funktion bis die Daten verarbeitet wurden. Dann werden (!I)size_out(!i)
DSP-Worte in den Puffer data_out zurÅckkopiert, unabhÑngig davon, wieviel
Daten wirklich vorliegen. Sollen keine Daten gesendet werden, muû man
(!I)size_in(!i) auf Null setzen. Gleiches gilt fÅr das Empfangen, in diesem
Fall wird (!I)size_out(!i) Null zugewiesen. (!I)size_in(!i) und
(!I)size_out(!i) sind auf 64 KByte begrenzt. Daten werden nur ausgetauscht,
wenn der DSP-Prozeû dazu bereit ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_BlkHandShake])    ~   
							 Dsp_DoBlock ~  Dsp_BlkUnpacked ~
               Dsp_BlkWords  ~   Dsp_BlkBytes ~   Dsp_InStream ~
               Dsp_OutStream  ~  Dsp_IOStream ~   Dsp_GetWordSize ~
               Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_BlkHandShake
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_BlkHandShake ( BYTE *data_in,  LONG size_in, BYTE *data_out,
                        LONG size_out );
!item [Assembler:]
!begin_verbatim
move.l    size_out,-(sp)  ; Offset 14
pea       data_out        ; Offset 10
move.l    size_in,-(sp)   ; Offset  6
pea       data_in         ; Offset  2
move.w    #97,-(sp)       ; Offset  0
trap      #14             ; XBIOS aufrufen
lea       $12(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_BlkUnpacked
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_BlkUnpackedÆ - Datentransfer von maximal 4 Bytes langen DSP-Worten
!item [Xbiosnummer:]
98
!item [Binding:]
(!link [Bindings fÅr Dsp_BlkUnpacked] [Bindings fÅr Dsp_BlkUnpacked])
!item [Beschreibung:]
Diese Funktion arbeitet nur mit DSP-Worten, die hîchstens 4 Byte lang sind.
Die LÑnge der DSP-Worte kann mit Dsp_GetWordSize bestimmt werden.
(!I)data_in(!i) und (!I)data_out(!i) sind LONG-Felder. (!I)size_in(!i) und
(!I)size_out(!i) beziehen sich auf die Grîûe der Felder in Langworten. Je
nach DSP-WortlÑnge werden nur die unteren Bytes LONGs Åbertragen. Die
Funktion kopiert (!I)size_in(!i) DSP-Worte aus dem Puffer (!I)data_in(!i)
zum DSP. Nachdem alle Daten Åbertragen wurden, wartet die Funktion bis die
Daten verarbeitet wurden. Dann werden (!I)size_out(!i) DSP-Worte in den
Puffer data_out zurÅckkopiert, unabhÑngig davon, wieviel Daten wirklich
vorliegen. Sollen keine Daten gesendet werden, muû man (!I)size_in(!i) auf
Null setzen. Gleiches gilt fÅr das Empfangen, in diesem Fall wird
(!I)size_out(!i) Null zugewiesen. (!I)size_in(!i) und (!I)size_out(!i) sind
auf 64 KByte begrenzt. (!nl)
Es wird nicht garantiert, daû die hîherwertigen Bytes
der empfangenen LONGs Null sind, wenn die DSP-WortlÑnge kleiner als 4 ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_BlkUnpacked])    ~
					     Dsp_DoBlock ~   Dsp_BlkHandShake ~
               Dsp_BlkWords  ~  Dsp_BlkBytes ~  Dsp_InStream ~
               Dsp_OutStream ~  Dsp_IOStream  ~ Dsp_GetWordSize ~
               Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_BlkUnpacked
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_BlkUnpacked ( LONG *data_in,  LONG size_in, LONG *data_out,
                       LONG size_out );
!item [Assembler:]
!begin_verbatim
move.l    size_out,-(sp)  ; Offset 14
pea       data_out        ; Offset 10
move.l    size_in,-(sp)   ; Offset  6
pea       data_in         ; Offset  2
move.w    #98,-(sp)       ; Offset  0
trap      #14             ; XBIOS aufrufen
lea       $12(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_BlkWords
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_BlkWordsÆ - wortweiser Datentransfer zum DSP
!item [Xbiosnummer:]
123
!item [Binding:]
(!link [Bindings fÅr Dsp_BlkWords] [Bindings fÅr Dsp_BlkWords])
!item [Beschreibung:]
Die Funktion kopiert (!I)size_in(!i) vorzeichenbehaftete 16-Bit-Worte aus dem
Puffer (!I)data_in(!i) zum DSP. Die Worte werden vor der öbertragung
vorzeichenrichtig auf DSP-Wortbreite erweitert. Nachdem alle Daten
Åbertragen wurden, wartet die Funktion bis die Daten verarbeitet wurden.
Dann werden (!I)size_out(!i) 16-Bit-DSP-Worte in den Puffer (!I)data_out(!i)
zurÅckkopiert, unabhÑngig davon, wieviel Daten wirklich vorliegen. Sollen
keine Daten gesendet werden, muû man (!I)size_in(!i) auf Null setzen.
Gleiches gilt fÅr das Empfangen, in diesem Fall wird (!I)size_out(!i) Null
zugewiesen. (!I)size_in(!i) und (!I)size_out(!i) sind auf 64 KByte
begrenzt. Daten werden nur ausgetauscht, wenn der DSP-Prozeû dazu bereit
ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_BlkWords])     ~
               Dsp_DoBlock  ~  Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~ Dsp_BlkBytes ~  Dsp_InStream ~
               Dsp_OutStream  ~   Dsp_IOStream ~  Dsp_GetWordSize ~
               Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_BlkWords
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_BlkWords ( VOID *data_in,  LONG size_in, VOID *data_out,
                    LONG size_out );
!item [Assembler:]
!begin_verbatim
move.l    size_out,-(sp)  ; Offset 14
pea       data_out        ; Offset 10
move.l    size_in,-(sp)   ; Offset  6
pea       data_in         ; Offset  2
move.w    #123,-(sp)      ; Offset  0
trap      #14             ; XBIOS aufrufen
lea       $12(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_DoBlock
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_DoBlockÆ - Datentransfer zum DSP
!item [Xbiosnummer:]
96
!item [Binding:]
(!link [Bindings fÅr Dsp_DoBlock] [Bindings fÅr Dsp_DoBlock])
!item [Beschreibung:]
Die Funktion kopiert (!I)size_in(!i) DSP-Worte aus dem Puffer
(!I)data_in(!i) zum DSP. Nachdem alle Daten Åbertragen wurden, wartet die
Funktion bis die Daten verarbeitet wurden. Dann werden (!I)size_out(!i)
DSP-Worte in den Puffer (!I)data_out(!i) zurÅckkopiert, unabhÑngig davon,
wieviel Daten wirklich vorliegen. Sollen keine Daten gesendet werden, muû
man (!I)size_in(!i) auf Null setzen. Gleiches gilt fÅr das Empfangen, in
diesem Fall wird (!I)size_out(!i) Null zugewiesen. (!I)size_in(!i) und
(!I)size_out(!i) sind auf 64 KByte begrenzt.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_DoBlock])  ~
               Dsp_BlkHandShake ~  Dsp_BlkUnpacked ~
               Dsp_BlkWords  ~  Dsp_BlkBytes   ~    Dsp_InStream ~
               Dsp_OutStream  ~ Dsp_IOStream   ~    Dsp_GetWordSize ~
               Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_DoBlock
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_DoBlock ( BYTE *data_in, LONG size_in, BYTE *data_out,
                   LONG size_out );
!item [Assembler:]
!begin_verbatim
move.l    size_out,-(sp)  ; Offset 14
pea       data_out        ; Offset 10
move.l    size_in,-(sp)   ; Offset  6
pea       data_in         ; Offset  2
move.w    #96,-(sp)       ; Offset  0
trap      #14             ; XBIOS aufrufen
lea       $12(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_ExecBoot
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_ExecBootÆ - Bootprogramm fÅr DSP laden
!item [Xbiosnummer:]
110
!item [Binding:]
(!link [Bindings fÅr Dsp_ExecBoot] [Bindings fÅr Dsp_ExecBoot])
!item [Beschreibung:]
Die Funktion Dsp_ExecBoot lÑdt ein Boot-Programm in die 512 Worte des
internen DSP-Speichers. Vor dem Laden wird ein Reset auf dem DSP ausgefÅhrt.
Das DSP-Programm muû im BinÑr-Format vorliegen. Der Parameter
(!I)codeptr(!i) zeigt auf den Programmstart. Die LÑnge des Programms wird
durch den Parameter (!I)codesize(!i) bestimmt. (!I)ability(!i) identifiziert das
Programm.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_ExecBoot])   ~  
               Dsp_Lock  ~    Dsp_Unlock ~   Dsp_Available ~
               Dsp_Reserve ~ Dsp_LoadProg ~ Dsp_ExecProg ~ Dsp_LodToBinary
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_ExecBoot
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_ExecBoot ( BYTE *codeptr, LONG codesize, WORD ability );
!item [Assembler:]
!begin_verbatim
move.w    ability,-(sp)  ; Offset 10
move.l    codesize,-(sp) ; Offset  6
pea       codeptr        ; Offset  2
move.w    #110,-(sp)     ; Offset  0
trap      #14            ; XBIOS aufrufen
lea       $C(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_ExecProg
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_ExecProgÆ - DSP Programm starten
!item [Xbiosnummer:]
109
!item [Binding:]
(!link [Bindings fÅr Dsp_ExecProg] [Bindings fÅr Dsp_ExecProg])
!item [Beschreibung:]
Die Funktion Dsp_ExecProg startet das im BinÑr-Format an der Stelle
(!I)codeptr(!i) vorliegende DSP-Programm der LÑnge codesize. Seine Grîûe
darf den durch Dsp_Reserve reservierten Speicher nicht Åberschreiten. Der
Parameter (!I)ability(!i) identifiziert das Programm.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_ExecProg])  ~
						   Dsp_Lock   ~   Dsp_Unlock  ~  Dsp_Available ~
               Dsp_Reserve ~ Dsp_LoadProg ~ Dsp_ExecBoot ~ Dsp_LodToBinary
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_ExecProg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_ExecProg ( BYTE *codeptr, LONG codesize, WORD ability );
!item [Assembler:]
!begin_verbatim
move.w    ability,-(sp)  ; Offset 10
move.l    codesize,-(sp) ; Offset  6
pea       codeptr        ; Offset  2
move.w    #109,-(sp)     ; Offset  0
trap      #14            ; XBIOS aufrufen
lea       $C(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_FlushSubroutines
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_FlushSubroutinesÆ - Unterprogramme aus dem Speicher des DSP entfernen
!item [Xbiosnummer:]
115
!item [Binding:]
(!link [Bindings fÅr Dsp_FlushSubroutines] [Bindings fÅr Dsp_FlushSubroutines])
!item [Beschreibung:]
Die Funktion Dsp_FlushSubroutines entfernt alle Unterprogramme aus dem
DSP-Speicher und erhîht somit den verfÅgbaren freien Speicher.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]  (!link [Binding] [Bindings fÅr Dsp_FlushSubroutines]) ~
							 Dsp_LoadSubroutine ~
               Dsp_InqSubrAbility ~  Dsp_RunSubroutine
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_FlushSubroutines
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_FlushSubroutines ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #115,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_GetProgAbility
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_GetProgAbilityÆ - Identifikation eines Prozesses ermitteln
!item [Xbiosnummer:]
114
!item [Binding:]
(!link [Bindings fÅr Dsp_GetProgAbility] [Bindings fÅr Dsp_GetProgAbility])
!item [Beschreibung:]
Die Funktion Dsp_GetProgAbility erteilt einem DSP-Prozeû eine
Identifikation, mittels derer man feststellen kann, ob der zum Prozeû
gehîrige Code bereits im DSP vorhanden ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert die fÅr den Prozess gÅltige Kennung zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]  (!link [Binding] [Bindings fÅr Dsp_GetProgAbility]) ~
                      Dsp_RequestUniqueAbility
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_GetProgAbility
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_GetProgAbility ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #114,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_GetWordSize
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_GetWordSizeÆ - LÑnge eines DSP Wortes ermitteln
!item [Xbiosnummer:]
103
!item [Binding:]
(!link [Bindings fÅr Dsp_GetWordSize] [Bindings fÅr Dsp_GetWordSize])
!item [Beschreibung:]
Die Funktion Dsp_GetWordSize ermittelt die Grîûe in Byte, die ein DSP-Wort
lang ist. Diese Funktion ist notwendig, um die Puffer fÅr die
DatenÅbertragung ausreichend zu dimensionieren.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert die Grîûe eines DSP-Wortes zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_GetWordSize])   ~
               Dsp_DoBlock ~   Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~   Dsp_BlkWords ~  Dsp_BlkBytes ~
               Dsp_InStream    ~   Dsp_IOStream ~  Dsp_OutStream ~
               Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_GetWordSize
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_GetWordSize ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #103,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Hf0
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_Hf0Æ - Bit 3 des HSR setzen bzw. lîschen
!item [Xbiosnummer:]
119
!item [Binding:]
(!link [Bindings fÅr Dsp_Hf0] [Bindings fÅr Dsp_Hf0])
!item [Beschreibung:]
Die Funktion Dsp_Hf0 ermittelt bzw. setzt den Wert des Bits 3 des HSR. Der
Parameter (!I)flag(!i) hat die folgende Bedeutung:
!begin_table [c|l]
flag !! Bedeutung
!hline
0 !! Bit 3 des HSR lîschen
1 !! Bit 3 des HSR setzen
-1 !! Bit 3 des HSR unverÑndert lassen
!end_table
(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert den Wert von Bit-3 des HSR zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Hf0]) ~
              Dsp_Hf1 ~  Dsp_Hf2 ~  Dsp_Hf3 ~  Dsp_HStat
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Hf0
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_Hf0 ( WORD flag );
!item [Assembler:]
!begin_verbatim
move.w    flag,-(sp)   ; Offset 2
move.w    #119,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Hf1
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_Hf1Æ - Bit 4 des HSR setzen bzw. lîschen
!item [Xbiosnummer:]
120
!item [Binding:]
(!link [Bindings fÅr Dsp_Hf1] [Bindings fÅr Dsp_Hf1])
!item [Beschreibung:]
Die Funktion Dsp_Hf1 ermittelt bzw. setzt den Wert des Bits 4 des HSR. Der
Parameter (!I)flag(!i) hat die folgende Bedeutung:
!begin_table [c|l]
flag !! Bedeutung
!hline
0 !! Bit 4 des HSR lîschen
1 !! Bit 4 des HSR setzen
-1 !! Bit 4 des HSR unverÑndert lassen
!end_table
(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert den Wert von Bit-4 des HSR zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Hf1])
                      ~  Dsp_Hf0 ~  Dsp_Hf2 ~  Dsp_Hf3 ~  Dsp_HStat
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Hf1
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_Hf1 ( WORD flag );
!item [Assembler:]
!begin_verbatim
move.w    flag,-(sp)   ; Offset 2
move.w    #120,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Hf2
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_Hf2Æ - Bit 3 des HCR ermitteln
!item [Xbiosnummer:]
121
!item [Binding:]
(!link [Bindings fÅr Dsp_Hf2] [Bindings fÅr Dsp_Hf2])
!item [Beschreibung:]
Die Funktion Dsp_Hf2 ermittelt den Wert des Bits 3 des HCR.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert den Wert von Bit-3 des HCR zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Hf2]) ~
                      Dsp_Hf0 ~  Dsp_Hf1 ~  Dsp_Hf3 ~  Dsp_HStat
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Hf2
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_Hf2 ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #121,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Hf3
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_Hf3Æ - Bit 4 des HCR ermitteln
!item [Xbiosnummer:]
122
!item [Binding:]
(!link [Bindings fÅr Dsp_Hf3] [Bindings fÅr Dsp_Hf3])
!item [Beschreibung:]
Die Funktion Dsp_Hf3 ermittelt den Wert des Bits 4 des HCR.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert den Wert von Bit-4 des HCR zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Hf3]) ~
                        Dsp_Hf0 ~  Dsp_Hf1 ~  Dsp_Hf2 ~  Dsp_HStat
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Hf3
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_Hf3 ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #122,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_HStat
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_HStatÆ - Wert des ISR Registers ermitteln
!item [Xbiosnummer:]
125
!item [Binding:]
(!link [Bindings fÅr Dsp_HStat] [Bindings fÅr Dsp_HStat])
!item [Beschreibung:]
Die Funktion Dsp_HStat ermittelt den Wert des ISR-Registers. Somit kann man
feststellen, ob Daten empfangen oder gesendet werden kînnen.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert den Wert des ISR-Registers zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_HStat]) ~
                        Dsp_Hf0 ~  Dsp_Hf1 ~  Dsp_Hf2 ~ Dsp_Hf3
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_HStat
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

BYTE Dsp_HStat ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #125,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_InqSubrAbility
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_InqSubrAbilityÆ - Ermitteln der Kennung eines Unterprogramms
!item [Xbiosnummer:]
117
!item [Binding:]
(!link [Bindings fÅr Dsp_InqSubrAbility] [Bindings fÅr Dsp_InqSubrAbility])
!item [Beschreibung:]
Die Funktion Dsp_InqSubrAbility bestimmt die Kennung des Unterprogramms mit
der FunktionalitÑt (!I)abilitiy(!i).

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert die Kennung des Unterprogramms zurÅck. Ein
RÅckgabewert von Null bedeutet, daû sich das entsprechende Unterprogramm
nicht im DSP-Speicher befindet; in diesem Fall muû das Unterprogramm Åber
(!nolink [Dsp_LoadSubroutine]) installiert werden.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_InqSubrAbility])  ~
                       Dsp_RunSubroutine ~
               Dsp_FlushSubroutines  ~ Dsp_LoadSubroutine
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_InqSubrAbility
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_InqSubrAbility ( WORD ability );
!item [Assembler:]
!begin_verbatim
move.w    ability,-(sp)  ; Offset 2
move.w    #117,-(sp)     ; Offset 0
trap      #14            ; XBIOS aufrufen
addq.l    #4,sp          ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_InStream
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_InStreamÆ - Datentransfer zum DSP via Interrupt
!item [Xbiosnummer:]
99
!item [Binding:]
(!link [Bindings fÅr Dsp_InStream] [Bindings fÅr Dsp_InStream])
!item [Beschreibung:]
Die Funktion kopiert mittels DSP-Interruptbehandlung (!I)num_blocks(!i)
Datenblîcke mit einer Grîûe von (!I)block_size(!i) DSP-Worten aus dem
Puffer (!I)data_in(!i) zum DSP. Bei jedem Interrupt wird ein Block
Åbertragen, unabhÑngig davon, ob der DSP empfangsbereit ist. Gleichzeitig
wird der ZÑhler (!I)blocks_done(!i), der die Anzahl der Åbertragenen Blîcke
wiedergibt, inkrementiert. Da die Daten per Interrupt Åbertragen werden,
muû die Prozedur nicht warten. öber (!I)blocks_done(!i) kann das Programm
im weiteren Verlauf feststellen, ob die öbertragung beendet ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_InStream])  ~
               Dsp_DoBlock      ~     Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~ Dsp_BlkWords     ~     Dsp_BlkBytes ~
               Dsp_OutStream    ~ Dsp_IOStream      ~    Dsp_GetWordSize ~
               Dsp_SetVectors   ~ Dsp_RemoveInterrupts ~ Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_InStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
VOID Dsp_InStream ( BYTE *data_in, LONG block_size, LONG num_blocks,
                    LONG *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done       ; Offset 14
move.l    num_blocks,-(sp)  ; Offset 10
move.l    block_size,-(sp)  ; Offset  6
pea       data_in           ; Offset  2
move.w    #99,-(sp)         ; Offset  0
trap      #14               ; XBIOS aufrufen
lea       $12(sp),sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_IOStream
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_IOStreamÆ - Datentransfer vom und zum DSP via Interrupt
!item [Xbiosnummer:]
101
!item [Binding:]
(!link [Bindings fÅr Dsp_IOStream] [Bindings fÅr Dsp_IOStream])
!item [Beschreibung:]
Die Funktion sendet und empfÑngt gleichzeitig mittels
DSP-Interruptbehandlung (!I)num_blocks(!i) Datenblîcke mit einer Grîûe von
(!I)block_insize(!i) bzw. (!I)block_outsize(!i) DSP-Worten vom DSP. Die
gesendeten Daten werden dem Puffer (!I)data_in(!i) entnommen, die
empfangenen Daten werden im Puffer (!I)data_out(!i) abgelegt. Bei jedem
Interrupt wird ein Block gesendet und einer empfangen (eine Ausnahme bilden
der erste und der letzte Interrupt). Gleichzeitig wird der ZÑhler
(!I)blocks_done(!i), der die Anzahl der Åbertragenen Blîcke wiedergibt,
inkrementiert. Da die Daten per Interrupt Åbertragen werden, muû die
Funktion nicht warten. öber (!I)blocks_done(!i) kann das Programm im
weiteren Verlauf feststellen, ob die öbertragung beendet ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_IOStream])  ~
               Dsp_DoBlock   ~         Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~ Dsp_BlkWords          ~ Dsp_BlkBytes ~
               Dsp_InStream     ~ Dsp_OutStream         ~ Dsp_GetWordSize ~
               Dsp_SetVectors   ~ Dsp_RemoveInterrupts  ~ Dsp_MultBlocks
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_IOStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_IOStream ( BYTE *data_in, BYTE *data_out, LONG block_insize,
                    LONG block_outsize, LONG num_blocks, LONG *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done          ; Offset 22
move.l    num_blocks,-(sp)     ; Offset 18
move.l    block_outsize,-(sp)  ; Offset 14
move.l    block_insize,-(sp)   ; Offset 10
pea       data_out             ; Offset  6
pea       data_in              ; Offset  2
move.w    #101,-(sp)           ; Offset  0
trap      #14                  ; XBIOS aufrufen
lea       $1A(sp),sp           ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_LoadProg
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_LoadProgÆ - DSP Programm laden und starten
!item [Xbiosnummer:]
108
!item [Binding:]
(!link [Bindings fÅr Dsp_LoadProg] [Bindings fÅr Dsp_LoadProg])
!item [Beschreibung:]
Die Funktion Dsp_LoadProg lÑdt das DSP-Programm mit dem Namen
(!I)filename(!i). Das Programm muû im .LOD-Format vorliegen und darf den
durch Dsp_Reserve reservierten Speicher nicht Åberschreiten. Der Parameter
(!I)ability(!i) identifiziert das Programm. (!I)buffer(!i) zeigt auf einen
Speicherbereich, in dem das generierte Programm zwischengespeichert werden
kann. Die Grîûe des Speicherbereichs berechnet sich nach der Formel
!begin_verbatim
  DSP-Wortgrîûe * ( Anzahl der
  Programm- und Datenworte in der
  .LOD-Datei + ( DSP-Wortgrîûe *
  Anzahl der Blîcke in der .LOD-
  Datei ))
!end_verbatim
Danach wird das Programm ausgefÅhrt.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert im positiven Fall den Wert 0, und im Fehlerfall den
Wert -1 zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_LoadProg])  ~  
							 Dsp_Lock   ~    Dsp_Unlock ~   Dsp_Available ~
               Dsp_Reserve ~  Dsp_ExecProg  ~ Dsp_ExecBoot ~ Dsp_LodToBinary
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_LoadProg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_LoadProg ( BYTE *file, WORD ability, BYTE *buffer );
!item [Assembler:]
!begin_verbatim
pea       buffer         ; Offset 8
move.w    ability,-(sp)  ; Offset 6
pea       file           ; Offset 2
move.w    #108,-(sp)     ; Offset 0
trap      #14            ; XBIOS aufrufen
lea       $C(sp),sp      ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_LoadSubroutine
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_LoadSubroutineÆ - Unterprogramm im Speicher des DSP installieren
!item [Xbiosnummer:]
116
!item [Binding:]
(!link [Bindings fÅr Dsp_LoadSubroutine] [Bindings fÅr Dsp_LoadSubroutine])
!item [Beschreibung:]
Die Funktion Dsp_LoadSubroutine installiert das DSP-Unterprogramm aus dem
Puffer (!I)codeptr(!i) im DSP-Speicher. Das Unterprogramm ist
(!I)codesize(!i) DSP-Worte lang und hat die Identifikation (!I)ability(!i).
Das Unterprogramm bleibt solange resident im DSP-Speicher bis kein Platz
mehr fÅr neue Unterprogramme ist und es verdrÑngt wird oder die Funktion
(!nolink [Dsp_FlushSubroutines]) aufgerufen wird.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert im Fehlerfall den Wert 0 zurÅck. Ein positiver Wert
kennzeichnet das Unterprogramm, das per Dsp_RunSubroutine aufgerufen werden
kann.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:] (!link [Binding] [Bindings fÅr Dsp_LoadSubroutine])   ~
               Dsp_RunSubroutine ~
               Dsp_FlushSubroutines ~  Dsp_InqSubrAbility
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_LoadSubroutine
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_LoadSubroutine ( BYTE *codeptr, LONG codesize, WORD ability );
!item [Assembler:]
!begin_verbatim
move.w    ability,-(sp)   ; Offset 10
move.l    codesize,-(sp)  ; Offset  6
pea       codeptr         ; Offset  2
move.w    #116,-(sp)      ; Offset  0
trap      #14             ; XBIOS aufrufen
lea       $C(sp),sp       ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Lock
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_LockÆ - VerfÅgbarkeit des DSP ermitteln
!item [Xbiosnummer:]
104
!item [Binding:]
(!link [Bindings fÅr Dsp_Lock] [Bindings fÅr Dsp_Lock])
!item [Beschreibung:]
Die Funktion Dsp_Lock ermittelt, ob der DSP fÅr Anwendungen verfÅgbar ist
und nicht durch jemand anders blockiert wird.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert den Wert -1, wenn der DSP bereits durch einen anderen
Prozess benutzt wird. Ein RÅckgabe!-wert von Null kennzeichnet hingegen die
VerfÅgbarkeit des DSP und blockiert diesen gleichzeitig fÅr andere, bis ein
Aufruf von (!nolink [Dsp_Unlock]) erfolgt.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Lock])  ~
               Dsp_Unlock   ~ Dsp_Available ~ Dsp_Reserve ~
               Dsp_LoadProg ~ Dsp_ExecProg ~ Dsp_ExecBoot
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Lock
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_Lock ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #104,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_LodToBinary
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_LodToBinaryÆ - Konvertierung einer Datei vom LOD in das BinÑrformat
!item [Xbiosnummer:]
111
!item [Binding:]
(!link [Bindings fÅr Dsp_LodToBinary] [Bindings fÅr Dsp_LodToBinary])
!item [Beschreibung:]
Die Funktion Dsp_LodToBinary konvertiert den Inhalt der .LOD-Datei mit dem
Namen (!I)filename(!i) ins BinÑrformat. Das so erzeugte DSP-Programm wird
an der Adresse codeptr abgelegt. Dieser Speicherbereich muû ausreichend
groû dimensioniert sein. Danach kann das Programm mit (!nolink [Dsp_ExecProg]) oder
Dsp_ExecBoot ausgefÅhrt werden.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert im positiven Fall die LÑnge des Programms in
DSP-Worten, oder im Fehlerfall einen negativen Wert zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_LodToBinary])  ~
               Dsp_Lock   ~  Dsp_Unlock  ~  Dsp_Available ~
               Dsp_Reserve ~ Dsp_LoadProg ~ Dsp_ExecBoot ~ Dsp_ExecProg
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_LodToBinary
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

LONG Dsp_LodToBinary ( BYTE *file, BYTE *codeptr );
!item [Assembler:]
!begin_verbatim
pea       codeptr      ; Offset 6
pea       file         ; Offset 2
move.w    #111,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
lea       $A(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_MultBlocks
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_MultBlocksÆ - Datentransfer vom und zum DSP
!item [Xbiosnummer:]
127
!item [Binding:]
(!link [Bindings fÅr Dsp_MultBlocks] [Bindings fÅr Dsp_MultBlocks])
!item [Beschreibung:]
Die Funktion Dsp_MultBlocks sendet und empfÑngt Daten vom DSP.
(!I)numsend(!i) ist die Anzahl der zu sendenden und (!I)numreceive(!i) die
Anzahl der zu empfangenden Blîcke. (!I)sendblocks(!i) und
(!I)receiveblocks(!i) sind Zeiger auf Strukturen, die die Puffer und
Blîcke beschreiben.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_MultBlocks])     ~
               Dsp_DoBlock  ~  Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~  Dsp_BlkWords ~  Dsp_InStream ~
               Dsp_OutStream    ~  Dsp_IOStream ~  Dsp_GetWordSize ~
               Dsp_BlkBytes
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_MultBlocks
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_MultBlocks ( LONG numsend, LONG numreceive, DSPBLOCK *sendblocks,
                      DSPBLOCK *receiveblocks );
!item [Assembler:]
!begin_verbatim
pea       receiveblocks     ; Offset 14
pea       sendblocks        ; Offset 10
move.l    numreceive,-(sp)  ; Offset  6
move.l    numsend,-(sp)     ; Offset  2
move.w    #127,-(sp)        ; Offset  0
trap      #14               ; XBIOS aufrufen
lea       $12(sp),sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_OutStream
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_OutStreamÆ - Datentransfer vom DSP via Interrupt
!item [Xbiosnummer:]
100
!item [Binding:]
(!link [Bindings fÅr Dsp_OutStream] [Bindings fÅr Dsp_OutStream])
!item [Beschreibung:]
Die Funktion kopiert mittels DSP-Interruptbehandlung (!I)num_blocks(!i)
Datenblîcke mit einer Grîûe von (!I)block_size(!i) DSP-Worten vom DSP in
dem Puffer (!I)data_out(!i). Bei jedem Interrupt wird ein Block Åbertragen.
Gleichzeitig wird der ZÑhler (!I)blocks_done(!i), der die Anzahl der
Åbertragenen Blîcke wiedergibt, inkrementiert. Da die Daten per Interrupt
Åbertragen werden, muû die Funktion nicht warten. öber (!I)blocks_done(!i)
kann das Programm im weiteren Verlauf feststellen, ob die öbertragung
beendet ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_OutStream])     ~
               Dsp_DoBlock   ~        Dsp_BlkUnpacked ~
               Dsp_BlkHandShake ~  Dsp_BlkWords    ~      Dsp_BlkBytes ~
               Dsp_InStream     ~  Dsp_IOStream         ~ Dsp_GetWordSize ~
               Dsp_SetVectors   ~  Dsp_RemoveInterrupts ~ Dsp_MultBlocks ~
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_OutStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_OutStream ( BYTE *data_out,  LONG block_size, LONG num_blocks,
                     LONG *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done       ; Offset 14
move.l    num_blocks,-(sp)  ; Offset 10
move.l    block_size,-(sp)  ; Offset  6
pea       data_out          ; Offset  2
move.w    #100,-(sp)        ; Offset  0
trap      #14               ; XBIOS aufrufen
lea       $12(sp),sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_RemoveInterrupts
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_RemoveInterruptsÆ - Generierung von DSP Interrupts unterbinden
!item [Xbiosnummer:]
102
!item [Binding:]
(!link [Bindings fÅr Dsp_RemoveInterrupts] [Bindings fÅr Dsp_RemoveInterrupts])
!item [Beschreibung:]
Die Funktion Dsp_RemoveInterrupts unterbindet die Generierung von
DSP-Interrupts. Der Parameter (!I)mask(!i) bestimmt, welche Interrupts betroffen
sind:
!begin_xlist [mask]
!item [mask]
Bedeutung
!item [1]
Keine Interrupts zum Senden von Daten durch den DSP
!item [2]
Keine Interrupts zum Empfangen von Daten durch den DSP
!item [3]
Keine Interrupts zum Senden oder Empfangen von Daten durch den DSP
!end_xlist
Die Funktion entfernt ebenfalls Routinen, die mit (!nolink [Dsp_SetVectors])
installiert wurden.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_RemoveInterrupts]) ~
               Dsp_InStream ~    Dsp_OutStream ~
               Dsp_IOStream ~  Dsp_SetVectors
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_RemoveInterrupts
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_RemoveInterrupts ( WORD mask );
!item [Assembler:]
!begin_verbatim
move.w    mask,-(sp)   ; Offset 2
move.w    #102,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #4,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_RequestUniqueAbility
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_RequestUniqueAbilityÆ - Identifikation fÅr Prozess erzeugen
!item [Xbiosnummer:]
113
!item [Binding:]
(!link [Bindings fÅr Dsp_RequestUniqueAbility] [Bindings fÅr Dsp_RequestUniqueAbility])
!item [Beschreibung:]
Die Funktion Dsp_RequestUniqueAbility erteilt einem DSP-Prozeû eine fÅr die
gesamte Systemlaufzeit eindeutige Identifikation, mittels derer man
feststellen kann, ob der zum Prozeû gehîrige Code resident im DSP vorhanden
ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert die fÅr den Prozess erzeugte Kennung zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_RequestUniqueAbility])  ~
                        Dsp_GetProgAbility
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_RequestUniqueAbility
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_RequestUniqueAbility ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #113,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Reserve
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_ReserveÆ - Speicher reservieren
!item [Xbiosnummer:]
107
!item [Binding:]
(!link [Bindings fÅr Dsp_Reserve] [Bindings fÅr Dsp_Reserve])
!item [Beschreibung:]
Die Funktion Dsp_Reserve reserviert (!I)xreserve(!i) Worte X-Speicher und
(!I)yreserve(!i) Worte Y-Speicher. Die Speicheranforderung darf den
verfÅgbaren Speicher auf keinen Fall Åbertreffen. Diese Funktion ist
notwendig, damit DSP-Prozesse nicht durch DSP-Unterprogramme Åberschrieben
werden. Die Reservierung bleibt bis zum nÑchsten Aufruf von Dsp_Reserve
bestehen.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert im positiven Fall den Wert 0, und im Fehlerfall den
Wert -1 zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Reserve])   ~
               Dsp_Lock  ~    Dsp_Unlock ~   Dsp_Available ~
               Dsp_LoadProg ~ Dsp_ExecProg ~ Dsp_ExecBoot
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Reserve
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_Reserve ( LONG xreserve, LONG yreserve );
!item [Assembler:]
!begin_verbatim
move.l    yreserve,-(sp)  ; Offset 6
move.l    xreserve,-(sp)  ; Offset 2
move.w    #107,-(sp)      ; Offset 0
trap      #14             ; XBIOS aufrufen
lea       $A(sp),sp       ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_RunSubroutine
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDspRunSubroutineÆ - Unterprogramm ausfÅhren
!item [Xbiosnummer:]
118
!item [Binding:]
(!link [Bindings fÅr Dsp_RunSubroutine] [Bindings fÅr Dsp_RunSubroutine])
!item [Beschreibung:]
Die Funktion Dsp_RunSubroutine fÅhrt das Unterprogramm mit der Kennung
(!I)handle(!i) aus. Die Kennung fÅr ein Unterprogramm findet man mittels
(!nolink [Dsp_InqSubrAbility]) oder Dsp_LoadSubroutine heraus.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert im positiven Fall den Wert 0, und im Fehlerfall eine
negative Zahl zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_RunSubroutine])    ~
               Dsp_InqSubrAbility ~
               Dsp_FlushSubroutines ~  Dsp_LoadSubroutine
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_RunSubroutine
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

WORD Dsp_RunSubroutine ( WORD handle );
!item [Assembler:]
!begin_verbatim
move.w    handle,-(sp)  ; Offset 2
move.w    #118,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
addq.l    #4,sp         ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_SetVectors
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_SetVectorsÆ - Installation einer eigenen öbertragungsroutine
!item [Xbiosnummer:]
126
!item [Binding:]
(!link [Bindings fÅr Dsp_SetVectors] [Bindings fÅr Dsp_SetVectors])
!item [Beschreibung:]
Die Funktion Dsp_SetVectors installiert Routinen, die aufgerufen werden,
wenn der DSP Åber einen Interrupt Daten Åbertragen will. (!I)receiver(!i)
ist ein Zeiger auf eine Routine, die aufgerufen wird, nachdem der DSP Daten
verschickt hat, und (!I)transmitter(!i) ein Zeiger auf eine Routine, die
aufgerufen wird, bevor der DSP Daten empfÑngt. Die Empfangsroutine
(!I)receiver(!i) erhÑlt als Parameter auf dem Stack einen LONG, der vom DSP
gesendet wurde. Die Senderoutine (!I)transmitter(!i) Åbergibt einen LONG an
den DSP in Register D0. Dieser muû ungleich Null sein, damit er, d.h.
dessen niederwertigen drei Bytes an den DSP Åbertragen wird. Beide Routinen
werden mit dem Assemblerbefehl RTS abgeschlossen. (!nl)
Wird fÅr (!I)receiver(!i)
oder transmitter 0 Åbergeben, so wird der entsprechende Interrupt gesperrt.
Um eine Routine wieder zu entfernen, muû man (!nolink [Dsp_RemoveInterrupts]) aufrufen.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_SetVectors])  ~
               Dsp_InStream  ~        Dsp_OutStream ~
               Dsp_IOStream ~  Dsp_RemoveInterrupts
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_SetVectors
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_SetVectors ( VOID (*receiver)(), LONG (*transmitter)() );
!item [Assembler:]
!begin_verbatim
pea       transmitter  ; Offset 6
pea       receiver     ; Offset 2
move.w    #126,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
lea       $A(sp),sp    ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_TriggerHC
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_TriggerHCÆ - Host Kommando ausfÅhren
!item [Xbiosnummer:]
112
!item [Binding:]
(!link [Bindings fÅr Dsp_TriggerHC] [Bindings fÅr Dsp_TriggerHC])
!item [Beschreibung:]
Die Funktion Dsp_TriggerHC fÅhrt Vector (!I)vector(!i) aus. Nur die zwei
Vektoren $13 und $14 stehen DSP-Programmen zur freien VerfÅgung.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung 
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_TriggerHC])
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_TriggerHC
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_TriggerHC ( WORD vector );
!item [Assembler:]
!begin_verbatim
move.w    vector,-(sp)  ; Offset 2
move.w    #112,-(sp)    ; Offset 0
trap      #14           ; XBIOS aufrufen
addq.l    #4,sp         ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node


!begin_node Dsp_Unlock
(!begin_liste) [Beschreibung:]
!item [Name:]
ØDsp_UnlockÆ - DSP fÅr andere Prozesse freigeben
!item [Xbiosnummer:]
105
!item [Binding:]
(!link [Bindings fÅr Dsp_Unlock] [Bindings fÅr Dsp_Unlock])
!item [Beschreibung:]
Die Funktion Dsp_Unlock gibt den DSP fÅr andere Prozesse frei.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.
!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.
!item [Gruppe:]
DSP-Programmierung
!item [Querverweis:]    (!link [Binding] [Bindings fÅr Dsp_Unlock])  ~
               Dsp_Lock ~     Dsp_Available ~ Dsp_Reserve ~
               Dsp_LoadProg  ~ Dsp_ExecProg  ~ Dsp_ExecBoot
(!ende_liste)
!end_node


!begin_node Bindings fÅr Dsp_Unlock
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
 #include <portab.h> (!nl)
 #include <tos.h>

VOID Dsp_Unlock ( VOID );
!item [Assembler:]
!begin_verbatim
move.w    #105,-(sp)   ; Offset 0
trap      #14          ; XBIOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
!ifdest [html]
!item [GFA-Basic]
!begin_raw
<A HREF="http://www.milanstation.de/at/gfahutil/gfau7xbi.htm">GFA-H-Util XBios</A>
!end_raw
!endif
(!ende_liste)
!end_node
