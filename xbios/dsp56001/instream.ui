!iflang [english]


!begin_node Dsp_InStream
(!begin_liste) [Availability]

!item [Name:]
ØDsp_InStreamÆ - Datentransfer zum DSP via Interrupt

!item [Opcode:]
99

!item [Syntax:]
(!link [Bindings fÅr Dsp_InStream] [Bindings fÅr Dsp_InStream])

!item [Description:]
Die Funktion kopiert mittels DSP-Interruptbehandlung (!I)num_blocks(!i)
Datenblîcke mit einer Grîûe von (!I)block_size(!i) DSP-Worten aus dem
Puffer (!I)data_in(!i) zum DSP. Bei jedem Interrupt wird ein Block
Åbertragen, unabhÑngig davon, ob der DSP empfangsbereit ist. Gleichzeitig
wird der ZÑhler (!I)blocks_done(!i), der die Anzahl der Åbertragenen Blîcke
wiedergibt, inkrementiert. Da die Daten per Interrupt Åbertragen werden,
muû die Prozedur nicht warten. öber (!I)blocks_done(!i) kann das Programm
im weiteren Verlauf feststellen, ob die öbertragung beendet ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.

!item [(!nolink [Return]) Value:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [Group:]
DSP-Programmierung

!item [Availability:]
Die Funktion ist nur auf Computern mit dem Signalprozessor DSP56001
verfÅgbar.

!item [See Also:]
(!link [Binding] [Bindings fÅr Dsp_InStream]) ~ Dsp_DoBlock ~
Dsp_BlkUnpacked ~ Dsp_BlkHandShake ~ Dsp_BlkWords ~ Dsp_BlkBytes ~
Dsp_OutStream ~ Dsp_IOStream ~ Dsp_GetWordSize ~ Dsp_SetVectors ~
Dsp_RemoveInterrupts ~ Dsp_MultBlocks

(!ende_liste)


!begin_node Bindings fÅr Dsp_InStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
void Dsp_InStream( int8_t *data_in, int32_t block_size, int32_t num_blocks,
                   int32_t *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done       ; Offset 14
move.l    num_blocks,-(sp)  ; Offset 10
move.l    block_size,-(sp)  ; Offset  6
pea       data_in           ; Offset  2
move.w    #99,-(sp)         ; Offset  0
trap      #14               ; XBIOS aufrufen
lea       $12(sp),sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Dsp_InStream
(!begin_liste) [Beschreibung]

!item [Name:]
ØDsp_InStreamÆ - Datentransfer zum DSP via Interrupt

!item [Xbiosnummer:]
99

!item [Binding:]
(!link [Bindings fÅr Dsp_InStream] [Bindings fÅr Dsp_InStream])

!item [Beschreibung:]
Die Funktion kopiert mittels DSP-Interruptbehandlung (!I)num_blocks(!i)
Datenblîcke mit einer Grîûe von (!I)block_size(!i) DSP-Worten aus dem
Puffer (!I)data_in(!i) zum DSP. Bei jedem Interrupt wird ein Block
Åbertragen, unabhÑngig davon, ob der DSP empfangsbereit ist. Gleichzeitig
wird der ZÑhler (!I)blocks_done(!i), der die Anzahl der Åbertragenen Blîcke
wiedergibt, inkrementiert. Da die Daten per Interrupt Åbertragen werden,
muû die Prozedur nicht warten. öber (!I)blocks_done(!i) kann das Programm
im weiteren Verlauf feststellen, ob die öbertragung beendet ist.

(!B)Hinweis:(!b) Die Funktion ist nur auf Computern mit dem Signalprozessor
DSP56001 verfÅgbar.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [Gruppe:]
DSP-Programmierung

!item [VerfÅgbar:]
Die Funktion ist nur auf Computern mit dem Signalprozessor DSP56001
verfÅgbar.

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Dsp_InStream]) ~ Dsp_DoBlock ~
Dsp_BlkUnpacked ~ Dsp_BlkHandShake ~ Dsp_BlkWords ~ Dsp_BlkBytes ~
Dsp_OutStream ~ Dsp_IOStream ~ Dsp_GetWordSize ~ Dsp_SetVectors ~
Dsp_RemoveInterrupts ~ Dsp_MultBlocks

(!ende_liste)


!begin_node Bindings fÅr Dsp_InStream
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
void Dsp_InStream( int8_t *data_in, int32_t block_size, int32_t num_blocks,
                   int32_t *blocks_done );
!item [Assembler:]
!begin_verbatim
pea       blocks_done       ; Offset 14
move.l    num_blocks,-(sp)  ; Offset 10
move.l    block_size,-(sp)  ; Offset  6
pea       data_in           ; Offset  2
move.w    #99,-(sp)         ; Offset  0
trap      #14               ; XBIOS aufrufen
lea       $12(sp),sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif