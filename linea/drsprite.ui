!iflang [english]


!begin_node Draw sprite
(!begin_liste) [Availability]

!item [Name:]
ØDraw spriteÆ

!item [Line-A number:]
$A00D

!item [Syntax:]
(!link [Bindings fÅr draw_sprite] [Bindings fÅr draw_sprite])

!item [Description:]
Diese Line-A Funktion zeichnet ein Sprite auf den Bildschirm. Die X Position
wird in D0, die Y Position in D1 Åbergeben. A0 zeigt auf eine Struktur des
Typs SDB, die den Aufbau des Sprites beschreibt. A2 zeigt auf den
Sprite-Save-Puffer, der zur Aufnahme des geretteten Hintergrunds dient und
mindestens die Grîûe 10 + 64 * Anzahl der Farbebenen haben muû. Das Register
A6 wird zerstîrt.

!begin_verbatim
typedef struct
{
   int16_t xhot,       /* X-Offset                   */
           yhot,       /* Y-Offset                   */
           form,       /* Format (1 = VDI, -1 = XOR) */
           bgcol,      /* Hintergrundfarbe           */
           fgcol,      /* Vordergrundfarbe           */
           image[32];  /* Sprite-Image               */
} SDB;
!end_verbatim

!begin_xlist !short [image]
!item [Variable]
Bedeutung
!item [~]
~
!item [xhot]
X-Koordinate des Aktionspunkts des Sprites, wie bei Transform mouse.
!item [yhot]
Y-Koordinate des Aktionspunkts des Sprites, wie bei Transform mouse.
!item [form]
1 fÅr das VDI-Format und -1 fÅr das XOR-Format.
!item [bgcol]
Die Farbe des Hintergrunds
!item [fgcol]
Die Farbe des Vordergrunds.
!item [image]
Die Daten fÅr den Vordergrund und den Hintergrund des 16*16 Pixel groûen
Sprite. Dabei wird abwechselnd zuerst ein Wort des Hintergrunds und dann
ein Wort des Vordergrunds gespeichert.
!end_xlist

Das Ergebnis auf dem Bildschirm ist abhÑngig von dem in form bestimmten
Format und kann fÅr jeweils 1 Bit aus den Vorgergrunddaten und
Hintergrunddaten der folgenden Tabelle entnommen werden. Old ist der
bisherige Bildpunkt, new der neue nach dem Zeichnen des Sprite:

!begin_table [c|c|l|l]
Vordergr. !! Hintergr. !! VDI-Format !! XOR-Format
!hline
0 !! 0 !! new = old   !! new = old
0 !! 1 !! new = bgcol !! new = bgcol
1 !! 0 !! new = fgcol !! new = fgcol xor old
1 !! 1 !! new = fgcol !! new = fgcol
!end_table

!item [(!nolink [Return]) Value:]
Die Funktion liefert keinen Returnwert.

!item [Availability:]
All TOS versions.

!item [See Also:]
(!link [Binding] [Bindings fÅr draw_sprite]) ~
(!link [Transform mouse][Transform mouse]) ~
(!link [Undraw sprite][Undraw sprite])

(!ende_liste)


!begin_node Bindings fÅr draw_sprite
!ignore_index
(!begin_liste) [Turbo-C/Pure-C:]
!item [Turbo-C/Pure-C:]
!begin_verbatim
typedef struct
{
   int16_t xhot,       /* X-Offset                   */
           yhot,       /* Y-Offset                   */
           form,       /* Format (1 = VDI, -1 = XOR) */
           bgcol,      /* Hintergrundfarbe           */
           fgcol,      /* Vordergrundfarbe           */
           image[32];  /* Sprite-Image               */
} SDB;

typedef int16_T SSB[10 + 4 * 64];

void draw_sprite( int16_t x, int16_t y, SDB *pSdb, SSB *pSsb );
!end_verbatim
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2/A6,-(A7) ; Register retten
move.w    x,D0                 ; X-Position nach D0
move.w    y,D1                 ; Y-Position nach D1
move.l    pSdb,A0              ; Pointer Sprite-Definition-Block nach A0
move.l    pSsb,A2              ; Pointer Sprite-Save-Block nach A2
dc.w      $A00D                ; Lina-A Opcode
movem.l   (A7)+,D0-D2/A0-A2/A6 ; Register restaurieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Draw sprite
(!begin_liste) [Beschreibung:]

!item [Name:]
ØDraw spriteÆ

!item [(!nolink [Line-A]) Nummer:]
$A00D

!item [Binding:]
(!link [Bindings fÅr draw_sprite] [Bindings fÅr draw_sprite])

!item [Beschreibung:]
Diese Line-A Funktion zeichnet ein Sprite auf den Bildschirm. Die X Position
wird in D0, die Y Position in D1 Åbergeben. A0 zeigt auf eine Struktur des
Typs SDB, die den Aufbau des Sprites beschreibt. A2 zeigt auf den
Sprite-Save-Puffer, der zur Aufnahme des geretteten Hintergrunds dient und
mindestens die Grîûe 10 + 64 * Anzahl der Farbebenen haben muû. Das Register
A6 wird zerstîrt.

!begin_verbatim
typedef struct
{
   int16_t xhot,       /* X-Offset                   */
           yhot,       /* Y-Offset                   */
           form,       /* Format (1 = VDI, -1 = XOR) */
           bgcol,      /* Hintergrundfarbe           */
           fgcol,      /* Vordergrundfarbe           */
           image[32];  /* Sprite-Image               */
} SDB;
!end_verbatim

!begin_xlist !short [image]
!item [Variable]
Bedeutung
!item [~]
~
!item [xhot]
X-Koordinate des Aktionspunkts des Sprites, wie bei Transform mouse.
!item [yhot]
Y-Koordinate des Aktionspunkts des Sprites, wie bei Transform mouse.
!item [form]
1 fÅr das VDI-Format und -1 fÅr das XOR-Format.
!item [bgcol]
Die Farbe des Hintergrunds
!item [fgcol]
Die Farbe des Vordergrunds.
!item [image]
Die Daten fÅr den Vordergrund und den Hintergrund des 16*16 Pixel groûen
Sprite. Dabei wird abwechselnd zuerst ein Wort des Hintergrunds und dann
ein Wort des Vordergrunds gespeichert.
!end_xlist

Das Ergebnis auf dem Bildschirm ist abhÑngig von dem in form bestimmten
Format und kann fÅr jeweils 1 Bit aus den Vorgergrunddaten und
Hintergrunddaten der folgenden Tabelle entnommen werden. Old ist der
bisherige Bildpunkt, new der neue nach dem Zeichnen des Sprite:

!begin_table [c|c|l|l]
Vordergr. !! Hintergr. !! VDI-Format !! XOR-Format
!hline
0 !! 0 !! new = old   !! new = old
0 !! 1 !! new = bgcol !! new = bgcol
1 !! 0 !! new = fgcol !! new = fgcol xor old
1 !! 1 !! new = fgcol !! new = fgcol
!end_table

!item [Ergebnis:]
Die Funktion liefert keinen Returnwert.

!item [VerfÅgbar:]
Alle TOS-Versionen.

!item [Querverweis:]
(!link [Binding] [Bindings fÅr draw_sprite]) ~
(!link [Transform mouse][Transform mouse]) ~
(!link [Undraw sprite][Undraw sprite])

(!ende_liste)


!begin_node Bindings fÅr draw_sprite
!ignore_index
(!begin_liste) [Turbo-C/Pure-C:]
!item [Turbo-C/Pure-C:]
!begin_verbatim
typedef struct
{
   int16_t xhot,       /* X-Offset                   */
           yhot,       /* Y-Offset                   */
           form,       /* Format (1 = VDI, -1 = XOR) */
           bgcol,      /* Hintergrundfarbe           */
           fgcol,      /* Vordergrundfarbe           */
           image[32];  /* Sprite-Image               */
} SDB;

typedef int16_t SSB[10 + 4 * 64];

void draw_sprite( int16_t x, int16_t y, SDB *pSdb, SSB *pSsb );
!end_verbatim
!item [Assembler:]
!begin_verbatim
movem.l   D0-D2/A0-A2/A6,-(A7) ; Register retten
move.w    x,D0                 ; X-Position nach D0
move.w    y,D1                 ; Y-Position nach D1
move.l    pSdb,A0              ; Pointer Sprite-Definition-Block nach A0
move.l    pSsb,A2              ; Pointer Sprite-Save-Block nach A2
dc.w      $A00D                ; Lina-A Opcode
movem.l   (A7)+,D0-D2/A0-A2/A6 ; Register restaurieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif