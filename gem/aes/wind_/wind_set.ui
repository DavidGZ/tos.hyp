!iflang [english]

!begin_node wind_set

(!begin_liste) [Availability]

!item [Name:]
ØSet WindowÆ - verÑndert einzelne Parameter eines Fensters.

!item [Opcode:]
105

!item [Syntax:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Description:]
Die Funktion verÑndert, abhÑngig von den Åbergebenen Parametern,
verschiedene Eigenschaften des Fensters mit der Kennung (!I)wi_shandle(!i).
Es gilt:

!begin_xlist !short [WF_UNICONIFYXYWH (28)]
!item [wi_sfield]
Bedeutung

!item [~]
~

!item [WF_BEVENT (24)]
erlaubt es, eine WM_TOPPED Message beim Anklicken eines Fensters zu
verhindern (z.B. um Dauerfunktionen in nicht getoppten Fenstern zu
ermîglichen). (!I)wi_sw1(!i) ist ein Bitvektor bei dem bisher lediglich
Bit-0 eine Bedeutung besitzt. Andere Werte als 1 sind also nicht erlaubt.
Der Aufruf wÑre dann: wind_set((!I)wi_shandle(!i), WF_BEVENT, 0x0001, 0, 
0, 0). (!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!nolink [appl_getinfo]) (Opcode 11) ermittelt werden.

!item [WF_BOTTOM (25)]
ermîglicht es, das (geîffnete!) Fenster mit der Kennung (!I)wi_shandle(!i)
in den Hintergrund zu legen, und zwar per wind_set((!I)wi_shandle(!i), 
WF_BOTTOM, 0, 0, 0, 0). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_BOTTOMALL
!item [WF_BOTTOMALL (22368)]
Stellt alle Fenster der Applikation (!I)wi_gw1(!i)> nach hinten.
!begin_xlist !short
!item [wi_gw1 =] Kennung der Applikation
!end_xlist
öbergibt man in (!I)wi_shandle(!i) ein Fensterkennung ungleich DESKWINDOW,
dann wird (!I)wi_shandle(!i) zusÑtzlich ganz nach hinten gestellt (ansonsten
wird die Reihenfolge der Fenster untereinander nicht geÑndert).
(!I)wi_shandle(!i) muû offen sein und der Applikation (!I)wi_gw1(!i) gehîren.

Es ist nicht garantiert, daû eine Applikation WF_BOTTOMALL auf
die Fenster einer anderen Applikation anwenden kann (vorallem in einer
Multitasking-Umgebung). In diesem Fall wird 0 zurÅckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_COLOR
!item [WF_COLOR (18)]
verÑndert die Farbe eines Fensterelements. Dazu wird in (!I)wi_sw1(!i) die
Nummer des Elements angegeben:

!begin_xlist !short [W_BOTTOMER (20)]
!item [Element] Beschreibung
!item [~] ~
!label W_BOTTOMER
!item [W_BOTTOMER (20)] Backdrop-Button
!label W_BOX
!item [W_BOX (0)] Wurzelobjekt des Fensters
!label W_CLOSER
!item [W_CLOSER (2)] Schlieûbox
!label W_DATA
!item [W_DATA (6)] Elternobjekt der restlichen Elemente
!label W_DNARROW
!item [W_DNARROW (11)] Pfeil nach unten
!label W_FULLER
!item [W_FULLER (4)] Zoombox
!label W_HBAR
!item [W_HBAR (14)] Elternobjekt der vertikalen Sliderelemente
!label W_HELEV
!item [W_HELEV (18)] Horizontaler Slider
!label W_HSLIDE
!item [W_HSLIDE (17)] Hintergrund des horiz. Sliders
!label W_INFO
!item [W_INFO (5)] Infozeile
!label W_LFARROW
!item [W_LFARROW (15)] Pfeil nach links
!label W_NAME
!item [W_NAME (3)] Move-Balken
!label W_RTARROW
!item [W_RTARROW (16)] Pfeil nach rechts
!label W_SIZER
!item [W_SIZER (8)] Size-Box
!label W_SMALLER
!item [W_SMALLER (19)] Iconifier-Button
!label W_TITLE
!item [W_TITLE (1)] Elternobjekt der Schlieû- und Zoombox, sowie des Names
!label W_UPARROW
!item [W_UPARROW (10)] Pfeil nach oben
!label W_VBAR
!item [W_VBAR (9)] Elternobjekt der vertikalen Sliderelemente
!label W_VELEV
!item [W_VELEV (13)] Vertikaler Slider
!label W_VSLIDE
!item [W_VSLIDE (12)] Hintergrund des vert. Sliders

!label W_WORK
!item [W_WORK (7)] ArbeitsflÑche

!end_xlist

Im Parameter (!I)wi_sw2(!i) wird die Farbe fÅr den Objekttyp des
Fensterelements Åbergeben, falls das Fenster getoppt ist, in (!I)wi_sw3(!i)
falls es nicht aktiv ist. Ein Wert von -1 behÑlt die aktuelle
Farbeinstellung bei. (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!item [WF_CURRXYWH (5)]
setzt die Fenstergrîûe aus (!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i)
und (!I)wi_sw4(!i) fest.

!item [WF_DCOLOR (19)]
setzt die Standard-Farben fÅr die Fensterelemente. Der Parameter
(!I)wi_shandle(!i) wird ignoriert, und fÅr die Åbrigen Parameter gilt:
!begin_xlist !short [wi_sw1 =]
!item [wi_sw1 =] Fensterelement
!item [wi_sw2 =] Farbe fÅr aktive Fenster
!item [wi_sw3 =] Farbe fÅr inaktive Fenster
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden. Beim VerÑndern der Komponente W_FULLER werden
automatisch W_SMALLER und W_BOTTOMER mit verÑndert; dies macht es notwendig,
zuerst den Fuller, und dann die Åbrigen Komponenten zu setzen.

Ab MagiC-4 ist es mîglich, fÅr jedes einzelne Fensterelement 3D-Flags
festzulegen. Dabei gilt:
!begin_xlist !short [wi_sw1 =]
!item [wi_sw1 =] Fensterelement
!item [wi_sw2 =] Farbe im aktiven Zustand
!item [wi_sw3 =] Farbe im inaktiven Zustand
!item [wi_sw4 =] 3D-Flags
!end_xlist
Der Parameter (!I)wi_shandle(!i) muû dabei den Wert 0 annehmen; die 3D-Flags
werden als Bitvektor beschrieben; es gilt:
!begin_xlist !short [Bit-8+n =]
!item [Bit-0 =] Effekt "3D im Vordergrund"
!item [Bit-1 =] Effekt "3D im Hintergrund"
!item [Bit-2 =] Effekt "selektierbar im Vordergrund"
!item [Bit-3 =] dto. im Hintergrund
!item [Bit-8+n =] Maskenbit fÅr Bit n
!end_xlist
Es werden also nur Bits verÑndert, wenn das zugehîrige Maskenbit gesetzt
ist. Dieses Feature kann z.Zt. noch (!I)nicht(!i) Åber (!nolink [appl_getinfo])
ermittelt werden.

!item [WF_DDELAY (22362)]
Verzîgerungswerte setzen
!begin_xlist !short
!item [wi_gw1 =] Startverzîgerung beim Klick auf Scrollpfeil
!item [wi_gw2 =] Kontinuierliche Verzîgerung beim Klick auf Scrollpfeil
!item [wi_gw3 =] Kontinuierliche Verzîgerung beim Klick auf Closer
!item [wi_gw4 =] Kontinuierliche Verzîgerung beim Klick auf Fuller
!end_xlist
Die Verzîgerungswerte dienen zum Bremsen von Aktionen, falls diese
zu schnell ausgefÅhrt werden (z.B. wegen neuer Hardware).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!item [WF_HSLIDE (8)]
setzt den horizontalen Slider auf die neue Position (!I)wi_sw1(!i) (0 ganz
links, bis 1000 ganz rechts).

!item [WF_HSLSIZE (15)]
setzt die Grîûe des horizontalen Sliders relativ zur Gesamtbreite auf den
Wert (!I)wi_sw1(!i) (-1 kleinste Grîûe, 1 klein bis 1000 Gesamtbreite).

!label WF_ICONIFY
!item [WF_ICONIFY (26)]
das Fenster wird ikonifiziert. Die Parameter (!I)wi_sw1(!i) bis
(!I)wi_sw4(!i) geben Position und Grîûe des Fensters im ikonifizierten
Zustand an; diese Werte erhÑlt man vom AES beim Eintreffen einer WM_ICONIFY
Message. (!B)Tip:(!b) Um ein bereits erzeugtes, aber (!I)noch nicht(!i)
geîffnetes Fenster zu ikonifizieren, Åbergibt man als Koordinaten
(-1,-1,-1,-1). Das Fenster kann dann per wind_open(handle,-1,-1,-1,-1) auf
den Bildschirm gebracht werden. Ab MagiC-4 and XaAES v0.943 funktioniert dies auch,
wenn das
Fenster bereits geîffnet ist. (!B)Achtung:(!b) Das Vorhandensein dieses
Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_INFO
!item [WF_INFO (3)]
schreibt den String, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, in die
Infozeile. GEM benutzt dabei nur den Zeiger und legt (!I)keine(!i) Kopie an.

Unter GEM ist die LÑnge auf 80 Zeichen beschrÑnkt. Bei N.AES sind es maximal 128.

!item [WF_KIND (1)]
legt (!I)wi_sw1(!i) als neue Fensterkomponenten fest, Format wie bei
wind_create.

!label WF_MENU
!item [WF_MENU (33)]
It can attach a menubar to a window. If the window was created without
the MENUBAR attribute, the call is ignored. (!I)wi_sw1(!i) and (!I)wi_sw2(!i) 
must point to the address of the tree. (!nl)
You get MN_SELECTED message in the extended way adopted
from AES 4.1 (!nl)
Only XaAES

!label WF_NAME
!item [WF_NAME (2)]
schreibt den String, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, in die
Titelzeile. GEM benutzt dabei nur den Zeiger und legt (!I)keine(!i) Kopie
an.

Unter GEM ist die LÑnge auf 80 Zeichen beschrÑnkt. Bei N.AES sind es maximal 128.

!item [WF_NEWDESK (14)]
legt den Objektbaum, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, mit
dem Startobjekt (!I)wi_sw3(!i) als neues Desktop fest. Durch öbergabe eines
Nullzeigers kann wieder der Standardhintergrund gesetzt werden.

!item [WF_SHADE (22365)]
Setzt den Shade-Zustand des Fensters
!begin_xlist !short
!item [wi_gw1 =] Zu aktivierender Shade-Zustand
~1: eingeklappt (!nl)
~0: ausgeklappt (!nl)
-1: Zustand umschalten
!end_xlist
Beim Einklappen wird eine WM_SHADED-Nachricht versandt.
Beim Ausklappen WM_UNSHADED und ein WM_REDRAW Åber den kompletten
Ausgabebereichs des Fensters. Setzt man den Zustand vor dem ôffnen
des Fensters, dann wird er beim ôffnen beachtet. Das Schlieûen
eines Fenster setzt es automatisch auf ausgeklappt.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_STACK
!item [WF_STACK (22366)]
Stellt das Fenster (!I)wi_shandle(!i) im Fensterstapel unter das Fenster
(!I)wi_gw1(!i) ohne die Bildschirmposition selbst zu Ñndern.
!begin_xlist !short
!item [wi_gw1 =] offenes Fenster/DESKWINDOW (0)/NOWINDOW (-1)
!end_xlist

Ist (!I)wi_shandle(!i) geschlossen, wird der Positionierungswunsch gespeichert
und beim ôffnen des Fensters mit wind_open berÅcksichtigt.
(!I)wi_gw1(!i) wird erst bei der eigentlichen Positionierung aus-
gewertet. Ist ((!I)wi_gw1(!i) == DESKWINDOW), wird das Fenster nach
ganz hinten gestellt (entspricht WF_BOTTOM). Ist ((!I)wi_gw1(!i) ==
NOWINDOW) oder (!I)wi_gw1(!i) nicht offen, dann wird das Fenster
(!I)wi_shandle(!i) ganz nach vorne gestellt (entspricht WF_TOP).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!item [WF_TOOLBAR (30)]
befestigt eine Toolbar an einem Fenster, Ñndert oder entfernt diese. Es
gilt:
!begin_xlist !short [wi_gw1 =]
!item [wi_gw1 =] High-Word
!item [wi_gw2 =] Low-Word der Adresse der Toolbar.
!end_xlist
Um eine Toolbar zu entfernen, mÅssen die Parameter (!I)wi_gw1(!i) und
(!I)wi_gw2(!i) auf NULL gesetzt werden.

XaAES since v0.942 can handle toolbars. There some mor parameters:
!begin_xlist !short [wi_gw1 =]
!item [wi_gw3 =] Object index of the item where to start drawing.
!item [wi_gw4 =] The current edit object; where the cursor will be placed.
!end_xlist

Beim betÑtigen eines Toolbarobjekt get the event WM_TOOLBAR.

!item [WF_TOP (10)]
das Fenster mit dem Handle (!I)wi_shandle(!i) wird zum neuen oberen Fenster.
Ab MagiC-4 and XaAES v0.943 kann durch wind_set (-1, WF_TOP, id, ...) das MenÅ und der
Desktophintergrund auf die Applikation mit der Kennung id umgeschaltet
werden; ein Wert von -1 fÅr id steht dabei fÅr die aktuelle Applikation.

!label WF_TOPALL
!item [WF_TOPALL (22367)]
Holt alle Fenster der Applikation (!I)wi_gw1(!i) nach vorne.
!begin_xlist !short
!item [wi_gw1 =] Kennung der Applikation
!end_xlist

öbergibt man in (!I)wi_shandle(!i) ein Fensterkennung ungleich DESKWINDOW (0),
dann wird (!I)wi_shandle(!i) zusÑtzlich ganz nach vorne gestellt (ansonsten
wird die Reihenfolge der Fenster untereinander nicht geÑndert).
(!I)wi_shandle(!i) muû offen sein und der Applikation (!I)wi_gw1(!i) gehîren.

Es ist nicht garantiert, daû eine Applikation WF_TOPALL auf
die Fenster einer anderen Applikation anwenden kann (vorallem in einer
Multitasking-Umgebung). In diesem Fall wird 0 zurÅckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_UNICONIFY
!item [WF_UNICONIFY (27)]
das Fenster wird unikonifiziert. (!B)Achtung:(!b) Das Vorhandensein dieses
Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_UNICONIFYXYWH
!item [WF_UNICONIFYXYWH (28)]
das Fenster wird unikonifiziert. Die Parameter (!I)wi_sw1(!i) bis
(!I)wi_sw4(!i) geben Position und Grîûe des Fensters im unikonifizierten
Zustand an. Dieser Opcode ist dann besonders nÅtzlich, wenn ein Fenster
bereits im ikonifizierten Zustand geîffnet worden ist.

!item [WF_VSLIDE (9)]
setzt den vertikalen Slider auf die neue Position (!I)wi_sw1(!i) (0 ganz
oben bis 1000 ganz unten).

!item [WF_VSLSIZE (16)]
setzt die Hîhe des vertikalen Sliders relativ zur Gesamthîhe auf den Wert
(!I)wi_sw1(!i) (-1 kleinste Hîhe, 1 klein bis 1000 Gesamthîhe).

!label WF_WCOLOR
!item [WF_WCOLOR]
z.Zt. keine Informationen bekannt.

!label WF_WHEEL
!item [WF_WHEEL (40)]
Setzt fÅr one window ((!I)wi_shandle(!i)= window handle) or all
application ((!I)wi_shandle(!i)= 0) the WA_WHEEL event.
Is (!I)wi_sw1(!i) = 1 dann sendet XaAES eine spezielle WM_ARROWED (WA_WHEEL)
Nachricht. Bei (!I)wi_sw1(!i) = 1 kommt die normalen Nachricht. (!nl)
since XaAES v0.960

!label WF_WIDGETS
!item [WF_WIDGETS (200)]
Setzt die aktuellen Positionen der Sliderobjekte (W_UPARROW, 
W_DNARROW, etc.) des Fensters mit dem Handle wi_ghandle. In 
den Parametern wi_gw1 und wi_gw2 werden die vertikal Elemente 
des typs rightwidgets, in den Parametern wi_gw3 und wi_gw4 die 
horizontal Elemente des typs bottomwidgets Åbergeben. wi_gw1 
ist das oberste Element, wi_gw2 das unterste Element des 
Vertikalsliders. wi_gw3 ist das linkeste Element, wi_gw4 das 
rechteste Element des Horizontalsliders.

!item [WF_WINXCFG (22361)]
Setzt die globalen und lokalen Schalter der aufrufenden
Applikation, falls dies mîglich ist.
!begin_xlist !short
!item [wi_gw1 =]
Maske der bei diesem Aufruf zu verÑndernden globalen
Schalter (Bit gesetzt bedeutet, Schalter Åbernehmen).
!item [wi_gw2 =]
Neue Schalterstellung der globalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!item [wi_gw3 =]
Maske der bei diesem Aufruf zu verÑndernden lokalen
Schalter (Bit gesetzt bedeutet, Schalter Åbernehmen).
!item [wi_gw4 =]
Neue Schalterstellung der lokalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!end_xlist
Welche Schalter tatsÑchlich verÑndert wurden, kann man nur durch
einen Aufruf von wind_get( WF_WINXCFG) ermitteln.
ACHTUNG: Diese Funktion sollte nur von Konfigurationsprogrammen
aufgerufen werden, die wissen was sie tun (z.B. WINX.CPX).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_sw1, wi_sw2, wi_sw3 und wi_sw4 sind dabei
von der Åber den Parameter (!I)wi_sfield(!i) Åbergebenen Funktionsnummer
abhÑngig.

Bei der Angabe des Fensternamens sollte man aus Ñsthetischen GrÅnden vor und
hinter der Zeichenkette immer ein (!I)Leerzeichen(!i) lassen, da sonst das
Muster im Fensternamen direkt am ersten und am letzten Buchstaben hÑngt.

(!B)Achtung:(!b) Die hier angegebenen Opcodes sind (!I)nicht(!i) mehr
vollstÑndig zum PC-GEM kompatibel, da die Entwicklung dort in eine
(!link [andere Richtung] [wind_set und PC-GEM]) ging.

!item [(!nolink [Return]) Value:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window Library

!item [See Also:]
(!link [Binding] [Bindings for wind_set]) ~  wind_get ~  wind_create ~  OBJECT

(!ende_liste)



!begin_node wind_set und PC-GEM

(!B)Ab PC-(!nolink [GEM]) Version 2.0 gilt:(!b)

(!B)WF_ATTRB (18):(!b) setzt den Fenster-Attributvektor. Es gilt: wi_gw1 = 0
(bzw. 1): Fenster ist oberstes Fenster bzw. nicht; ansonsten (!I)keine(!i)
weiteren Informationen bekannt.

(!B)WF_SIZETOP (19):(!b) Fenster zum aktiven Fenster machen, ohne die
Reihenfolge der anderen Fenster zu verÑndern. Gleichzeitig kînnen die
Position und Grîûe des Fensters neu festgelegt werden: wi_gw1 = x-Position,
wi_gw2 = y-Position wi_gw3 = Breite, wi_gw4 = Hîhe des Fensters.
!end_node



!begin_node Bindings for wind_set
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Binding:]
!begin_verbatim
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 )
{
   int_in[0]  = wi_shandle;
   int_in[1]  = wi_sfield;
   int_in[2]  = wi_sw1;
   int_in[3]  = wi_sw2;
   int_in[4]  = wi_sw3;
   int_in[5]  = wi_sw4;

   return ( crys_if(105) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 105   # Function Opcode
control+2 !! control[1] !! 6     # entry in int_in
control+4 !! control[2] !! 1     # entry in int_out
control+6 !! control[3] !! 0     # entry in addr_in
control+8 !! control[4] !! 0     # entry in addr_out
int_in    !! int_in[0]  !! wi_shandle
int_in+2  !! int_in[1]  !! wi_sfield
int_in+4  !! int_in[2]  !! wi_sw1
int_in+6  !! int_in[3]  !! wi_sw2
int_in+8  !! int_in[4]  !! wi_sw3
int_in+10 !! int_in[5]  !! wi_sw4
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_set

(!begin_liste) [Beschreibung]

!item [Name:]
ØSet WindowÆ - verÑndert einzelne Parameter eines Fensters.

!item [AES-Nummer:]
105

!item [Deklaration:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Beschreibung:]
Die Funktion verÑndert, abhÑngig von den Åbergebenen Parametern,
verschiedene Eigenschaften des Fensters mit der Kennung (!I)wi_shandle(!i).
Es gilt:

!begin_xlist !short [WF_UNICONIFYXYWH (28)]
!item [wi_sfield]
Bedeutung

!item [~]
~

!item [WF_BEVENT (24)]
erlaubt es, eine WM_TOPPED Message beim Anklicken eines Fensters zu
verhindern (z.B. um Dauerfunktionen in nicht getoppten Fenstern zu
ermîglichen). (!I)wi_sw1(!i) ist ein Bitvektor bei dem bisher lediglich
Bit-0 eine Bedeutung besitzt. Andere Werte als 1 sind also nicht erlaubt.
Der Aufruf wÑre dann: wind_set((!I)wi_shandle(!i), WF_BEVENT, 0x0001, 0, 
0, 0). (!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!nolink [appl_getinfo]) (Opcode 11) ermittelt werden.

!item [WF_BOTTOM (25)]
ermîglicht es, das (geîffnete!) Fenster mit der Kennung (!I)wi_shandle(!i)
in den Hintergrund zu legen, und zwar per wind_set((!I)wi_shandle(!i), 
WF_BOTTOM, 0, 0, 0, 0). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_BOTTOMALL
!item [WF_BOTTOMALL (22368)]
Stellt alle Fenster der Applikation (!I)wi_gw1(!i)> nach hinten.
!begin_xlist !short
!item [wi_gw1 =] Kennung der Applikation
!end_xlist
öbergibt man in (!I)wi_shandle(!i) ein Fensterkennung ungleich DESKWINDOW,
dann wird (!I)wi_shandle(!i) zusÑtzlich ganz nach hinten gestellt (ansonsten
wird die Reihenfolge der Fenster untereinander nicht geÑndert).
(!I)wi_shandle(!i) muû offen sein und der Applikation (!I)wi_gw1(!i) gehîren.

Es ist nicht garantiert, daû eine Applikation WF_BOTTOMALL auf
die Fenster einer anderen Applikation anwenden kann (vorallem in einer
Multitasking-Umgebung). In diesem Fall wird 0 zurÅckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_COLOR
!item [WF_COLOR (18)]
verÑndert die Farbe eines Fensterelements. Dazu wird in (!I)wi_sw1(!i) die
Nummer des Elements angegeben:

!begin_xlist !short [W_BOTTOMER (20)]
!item [Element]
Beschreibung
!item [~]
~
!label W_BOTTOMER
!item [W_BOTTOMER (20)] Backdrop-Button
!label W_BOX
!item [W_BOX (0)] Wurzelobjekt des Fensters
!label W_CLOSER
!item [W_CLOSER (2)] Schlieûbox
!label W_DATA
!item [W_DATA (6)] Elternobjekt der restlichen Elemente
!label W_DNARROW
!item [W_DNARROW (11)] Pfeil nach unten
!label W_FULLER
!item [W_FULLER (4)] Zoombox
!label W_HBAR
!item [W_HBAR (14)] Elternobjekt der vertikalen Sliderelemente
!label W_HELEV
!item [W_HELEV (18)] Horizontaler Slider
!label W_HSLIDE
!item [W_HSLIDE (17)] Hintergrund des horiz. Sliders
!label W_INFO
!item [W_INFO (5)] Infozeile
!label W_LFARROW
!item [W_LFARROW (15)] Pfeil nach links
!label W_NAME
!item [W_NAME (3)] Move-Balken
!label W_RTARROW
!item [W_RTARROW (16)] Pfeil nach rechts
!label W_SIZER
!item [W_SIZER (8)] Size-Box
!label W_SMALLER
!item [W_SMALLER (19)] Iconifier-Button
!label W_TITLE
!item [W_TITLE (1)] Elternobjekt der Schlieû- und Zoombox, sowie des Names
!label W_UPARROW
!item [W_UPARROW (10)] Pfeil nach oben
!label W_VBAR
!item [W_VBAR (9)] Elternobjekt der vertikalen Sliderelemente
!label W_VELEV
!item [W_VELEV (13)] Vertikaler Slider
!label W_VSLIDE
!item [W_VSLIDE (12)] Hintergrund des vert. Sliders

!label W_WORK
!item [W_WORK (7)] ArbeitsflÑche

!end_xlist

Im Parameter (!I)wi_sw2(!i) wird die Farbe fÅr den Objekttyp des
Fensterelements Åbergeben, falls das Fenster getoppt ist, in (!I)wi_sw3(!i)
falls es nicht aktiv ist. Ein Wert von -1 behÑlt die aktuelle
Farbeinstellung bei. (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!item [WF_CURRXYWH (5)]
setzt die Fenstergrîûe aus (!I)wi_sw1(!i), (!I)wi_sw2(!i), (!I)wi_sw3(!i)
und (!I)wi_sw4(!i) fest.

!item [WF_DCOLOR (19)]
setzt die Standard-Farben fÅr die Fensterelemente. Der Parameter
(!I)wi_shandle(!i) wird ignoriert, und fÅr die Åbrigen Parameter gilt:
!begin_xlist !short [wi_sw1 =]
!item [wi_sw1 =] Fensterelement
!item [wi_sw2 =] Farbe fÅr aktive Fenster
!item [wi_sw3 =] Farbe fÅr inaktive Fenster
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden. Beim VerÑndern der Komponente W_FULLER werden
automatisch W_SMALLER und W_BOTTOMER mit verÑndert; dies macht es notwendig,
zuerst den Fuller, und dann die Åbrigen Komponenten zu setzen.

Ab MagiC-4 ist es mîglich, fÅr jedes einzelne Fensterelement 3D-Flags
festzulegen. Dabei gilt:
!begin_xlist !short [wi_sw1 =]
!item [wi_sw1 =] Fensterelement
!item [wi_sw2 =] Farbe im aktiven Zustand
!item [wi_sw3 =] Farbe im inaktiven Zustand
!item [wi_sw4 =] 3D-Flags
!end_xlist
Der Parameter (!I)wi_shandle(!i) muû dabei den Wert 0 annehmen; die 3D-Flags
werden als Bitvektor beschrieben; es gilt:
!begin_xlist !short [Bit-8+n =]
!item [Bit-0 =] Effekt "3D im Vordergrund"
!item [Bit-1 =] Effekt "3D im Hintergrund"
!item [Bit-2 =] Effekt "selektierbar im Vordergrund"
!item [Bit-3 =] dto. im Hintergrund
!item [Bit-8+n =] Maskenbit fÅr Bit n
!end_xlist
Es werden also nur Bits verÑndert, wenn das zugehîrige Maskenbit gesetzt
ist. Dieses Feature kann z.Zt. noch (!I)nicht(!i) Åber (!nolink [appl_getinfo])
ermittelt werden.

!item [WF_DDELAY (22362)]
Verzîgerungswerte setzen
!begin_xlist !short
!item [wi_gw1 =] Startverzîgerung beim Klick auf Scrollpfeil
!item [wi_gw2 =] Kontinuierliche Verzîgerung beim Klick auf Scrollpfeil
!item [wi_gw3 =] Kontinuierliche Verzîgerung beim Klick auf Closer
!item [wi_gw4 =] Kontinuierliche Verzîgerung beim Klick auf Fuller
!end_xlist
Die Verzîgerungswerte dienen zum Bremsen von Aktionen, falls diese
zu schnell ausgefÅhrt werden (z.B. wegen neuer Hardware).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!item [WF_HSLIDE (8)]
setzt den horizontalen Slider auf die neue Position (!I)wi_sw1(!i) (0 ganz
links, bis 1000 ganz rechts).

!item [WF_HSLSIZE (15)]
setzt die Grîûe des horizontalen Sliders relativ zur Gesamtbreite auf den
Wert (!I)wi_sw1(!i) (-1 kleinste Grîûe, 1 klein bis 1000 Gesamtbreite).

!label WF_ICONIFY
!item [WF_ICONIFY (26)]
das Fenster wird ikonifiziert. Die Parameter (!I)wi_sw1(!i) bis
(!I)wi_sw4(!i) geben Position und Grîûe des Fensters im ikonifizierten
Zustand an; diese Werte erhÑlt man vom AES beim Eintreffen einer WM_ICONIFY
Message. (!B)Tip:(!b) Um ein bereits erzeugtes, aber (!I)noch nicht(!i)
geîffnetes Fenster zu ikonifizieren, Åbergibt man als Koordinaten
(-1,-1,-1,-1). Das Fenster kann dann per wind_open(handle,-1,-1,-1,-1) auf
den Bildschirm gebracht werden. Ab MagiC-4 und XaAES v0.943 funktioniert dies auch,
wenn das
Fenster bereits geîffnet ist. (!B)Achtung:(!b) Das Vorhandensein dieses
Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_INFO
!item [WF_INFO (3)]
schreibt den String, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, in die
Infozeile. GEM benutzt dabei nur den Zeiger und legt (!I)keine(!i) Kopie an.

Unter GEM ist die LÑnge auf 80 Zeichen beschrÑnkt. Bei N.AES sind es maximal 128.

!item [WF_KIND (1)]
legt (!I)wi_sw1(!i) als neue Fensterkomponenten fest, Format wie bei
wind_create.


!label WF_MENU
!item [WF_MENU (33)]
Es kann eine MenÅzeile in ein Fenster eingehÑngt werden. Wurde das Fenster nicht
mit der Komponente MENUBAR erzeugt, dann wird er Aufruf ignoriert. In
(!I)wi_sw1(!i) und (!I)wi_sw2(!i) wird die Adresse des Baums Åbergeben. (!nl)
Beim anklicken erhÑlt man eine erweiterte MN_SELECTED Nachricht. (!nl)
nur XaAES

!label WF_NAME
!item [WF_NAME (2)]
schreibt den String, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, in die
Titelzeile. GEM benutzt dabei nur den Zeiger und legt (!I)keine(!i) Kopie
an.

Unter GEM ist die LÑnge auf 80 Zeichen beschrÑnkt. Bei N.AES sind es maximal 128.

!item [WF_NEWDESK (14)]
legt den Objektbaum, auf den (!I)wi_sw1(!i) und (!I)wi_sw2(!i) zeigt, mit
dem Startobjekt (!I)wi_sw3(!i) als neues Desktop fest. Durch öbergabe eines
Nullzeigers kann wieder der Standardhintergrund gesetzt werden.

!item [WF_SHADE (22365)]
Setzt den Shade-Zustand des Fensters
!begin_xlist !short
!item [wi_gw1 =] Zu aktivierender Shade-Zustand
~1: eingeklappt (!nl)
~0: ausgeklappt (!nl)
-1: Zustand umschalten
!end_xlist
Beim Einklappen wird eine WM_SHADED-Nachricht versandt.
Beim Ausklappen WM_UNSHADED und ein WM_REDRAW Åber den kompletten
Ausgabebereichs des Fensters. Setzt man den Zustand vor dem ôffnen
des Fensters, dann wird er beim ôffnen beachtet. Das Schlieûen
eines Fenster setzt es automatisch auf ausgeklappt.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_STACK
!item [WF_STACK (22366)]
Stellt das Fenster (!I)wi_shandle(!i) im Fensterstapel unter das Fenster
(!I)wi_gw1(!i) ohne die Bildschirmposition selbst zu Ñndern.
!begin_xlist !short
!item [wi_gw1 =] offenes Fenster/DESKWINDOW (0)/NOWINDOW (-1)
!end_xlist

Ist (!I)wi_shandle(!i) geschlossen, wird der Positionierungswunsch gespeichert
und beim ôffnen des Fensters mit wind_open berÅcksichtigt.
(!I)wi_gw1(!i) wird erst bei der eigentlichen Positionierung aus-
gewertet. Ist ((!I)wi_gw1(!i) == DESKWINDOW), wird das Fenster nach
ganz hinten gestellt (entspricht WF_BOTTOM). Ist ((!I)wi_gw1(!i) ==
NOWINDOW) oder (!I)wi_gw1(!i) nicht offen, dann wird das Fenster
(!I)wi_shandle(!i) ganz nach vorne gestellt (entspricht WF_TOP).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!item [WF_TOOLBAR (30)]
befestigt eine Toolbar an einem Fenster, Ñndert oder entfernt diese. Es
gilt:
!begin_xlist !short [wi_gw1 =]
!item [wi_gw1 =] High-Word
!item [wi_gw2 =] Low-Word der Adresse der Toolbar.
!end_xlist
Um eine Toolbar zu entfernen, mÅssen die Parameter (!I)wi_gw1(!i) und
(!I)wi_gw2(!i) auf NULL gesetzt werden.

XaAES ab v0.942 kennt Toolbars. HiefÅr gibt es zusÑtzliche Parameter:
!begin_xlist !short [wi_gw1 =]
!item [wi_gw3 =] Startobjekt ab dem gezeichnet wird.
!item [wi_gw4 =] Nummer des Editobjekt, in das der Cursor gesetzt wird.
!end_xlist

Beim betÑtigen eines Toolbarobjekt erhÑlt man die Nachricht WM_TOOLBAR.

!item [WF_TOP (10)]
das Fenster mit dem Handle (!I)wi_shandle(!i) wird zum neuen oberen Fenster.
Ab MagiC-4 und XaAES v0.943 kann durch wind_set (-1, WF_TOP, id, ...) das MenÅ und der
Desktophintergrund auf die Applikation mit der Kennung id umgeschaltet
werden; ein Wert von -1 fÅr id steht dabei fÅr die aktuelle Applikation.

!label WF_TOPALL
!item [WF_TOPALL (22367)]
Holt alle Fenster der Applikation (!I)wi_gw1(!i) nach vorne.
!begin_xlist !short
!item [wi_gw1 =] Kennung der Applikation
!end_xlist

öbergibt man in (!I)wi_shandle(!i) ein Fensterkennung ungleich DESKWINDOW (0),
dann wird (!I)wi_shandle(!i) zusÑtzlich ganz nach vorne gestellt (ansonsten
wird die Reihenfolge der Fenster untereinander nicht geÑndert).
(!I)wi_shandle(!i) muû offen sein und der Applikation (!I)wi_gw1(!i) gehîren.

Es ist nicht garantiert, daû eine Applikation WF_TOPALL auf
die Fenster einer anderen Applikation anwenden kann (vorallem in einer
Multitasking-Umgebung). In diesem Fall wird 0 zurÅckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_UNICONIFY
!item [WF_UNICONIFY (27)]
das Fenster wird unikonifiziert. (!B)Achtung:(!b) Das Vorhandensein dieses
Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!label WF_UNICONIFYXYWH
!item [WF_UNICONIFYXYWH (28)]
das Fenster wird unikonifiziert. Die Parameter (!I)wi_sw1(!i) bis
(!I)wi_sw4(!i) geben Position und Grîûe des Fensters im unikonifizierten
Zustand an. Dieser Opcode ist dann besonders nÅtzlich, wenn ein Fenster
bereits im ikonifizierten Zustand geîffnet worden ist.

!item [WF_VSLIDE (9)]
setzt den vertikalen Slider auf die neue Position (!I)wi_sw1(!i) (0 ganz
oben bis 1000 ganz unten).

!item [WF_VSLSIZE (16)]
setzt die Hîhe des vertikalen Sliders relativ zur Gesamthîhe auf den Wert
(!I)wi_sw1(!i) (-1 kleinste Hîhe, 1 klein bis 1000 Gesamthîhe).

!label WF_WCOLOR
!item [WF_WCOLOR]
z.Zt. keine Informationen bekannt.

!label WF_WHEEL
!item [WF_WHEEL (40)]
Setzt fÅr ein Fenster ((!I)wi_shandle(!i)= Fensterkennung) oder alle
Applikationen ((!I)wi_shandle(!i)= 0) die WA_WHEEL Nachricht.
Ist (!I)wi_sw1(!i) = 1 dann sendet XaAES eine spezielle WM_ARROWED (WA_WHEEL)
Nachricht. Bei (!I)wi_sw1(!i) = 1 kommt die normalen Nachricht. (!nl)
ab XaAES v0.960

!label WF_WIDGETS
!item [WF_WIDGETS (200)]
Setzt die aktuellen Positionen der Sliderobjekte (W_UPARROW, 
W_DNARROW, etc.) des Fensters mit dem Handle wi_ghandle. In 
den Parametern wi_gw1 und wi_gw2 werden die vertikal Elemente 
des typs rightwidgets, in den Parametern wi_gw3 und wi_gw4 die 
horizontal Elemente des typs bottomwidgets Åbergeben. wi_gw1 
ist das oberste Element, wi_gw2 das unterste Element des 
Vertikalsliders. wi_gw3 ist das linkeste Element, wi_gw4 das 
rechteste Element des Horizontalsliders.

!item [WF_WINXCFG (22361)]
Setzt die globalen und lokalen Schalter der aufrufenden
Applikation, falls dies mîglich ist.
!begin_xlist !short
!item [wi_gw1 =]
Maske der bei diesem Aufruf zu verÑndernden globalen
Schalter (Bit gesetzt bedeutet, Schalter Åbernehmen).
!item [wi_gw2 =]
Neue Schalterstellung der globalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!item [wi_gw3 =]
Maske der bei diesem Aufruf zu verÑndernden lokalen
Schalter (Bit gesetzt bedeutet, Schalter Åbernehmen).
!item [wi_gw4 =]
Neue Schalterstellung der lokalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!end_xlist
Welche Schalter tatsÑchlich verÑndert wurden, kann man nur durch
einen Aufruf von wind_get( WF_WINXCFG) ermitteln.
ACHTUNG: Diese Funktion sollte nur von Konfigurationsprogrammen
aufgerufen werden, die wissen was sie tun (z.B. WINX.CPX).

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.


!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_sw1, wi_sw2, wi_sw3 und wi_sw4 sind dabei
von der Åber den Parameter (!I)wi_sfield(!i) Åbergebenen Funktionsnummer
abhÑngig.

Bei der Angabe des Fensternamens sollte man aus Ñsthetischen GrÅnden vor und
hinter der Zeichenkette immer ein (!I)Leerzeichen(!i) lassen, da sonst das
Muster im Fensternamen direkt am ersten und am letzten Buchstaben hÑngt.

(!B)Achtung:(!b) Die hier angegebenen Opcodes sind (!I)nicht(!i) mehr
vollstÑndig zum PC-GEM kompatibel, da die Entwicklung dort in eine
(!link [andere Richtung] [wind_set und PC-GEM]) ging.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wind_set]) ~  wind_get ~  wind_create ~  OBJECT

(!ende_liste)



!begin_node wind_set und PC-GEM

(!B)Ab PC-(!nolink [GEM]) Version 2.0 gilt:(!b)

(!B)WF_ATTRB (18):(!b) setzt den Fenster-Attributvektor. Es gilt: wi_gw1 = 0
(bzw. 1): Fenster ist oberstes Fenster bzw. nicht; ansonsten (!I)keine(!i)
weiteren Informationen bekannt.

(!B)WF_SIZETOP (19):(!b) Fenster zum aktiven Fenster machen, ohne die
Reihenfolge der anderen Fenster zu verÑndern. Gleichzeitig kînnen die
Position und Grîûe des Fensters neu festgelegt werden: wi_gw1 = x-Position,
wi_gw2 = y-Position wi_gw3 = Breite, wi_gw4 = Hîhe des Fensters.
!end_node



!begin_node Bindings fÅr wind_set
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_set ( int16_t wi_shandle, int16_t wi_sfield,
                   int16_t wi_sw1, int16_t wi_sw2,
                   int16_t wi_sw3, int16_t wi_sw4 )
{
   int_in[0]  = wi_shandle;
   int_in[1]  = wi_sfield;
   int_in[2]  = wi_sw1;
   int_in[3]  = wi_sw2;
   int_in[4]  = wi_sw3;
   int_in[5]  = wi_sw4;

   return ( crys_if(105) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 105   # Opcode der Funktion
control+2 !! control[1] !! 6     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! wi_shandle
int_in+2  !! int_in[1]  !! wi_sfield
int_in+4  !! int_in[2]  !! wi_sw1
int_in+6  !! int_in[3]  !! wi_sw2
int_in+8  !! int_in[4]  !! wi_sw3
int_in+10 !! int_in[5]  !! wi_sw4
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
