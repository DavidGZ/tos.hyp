!iflang [english]

!begin_node wind_get

(!begin_liste) [Availability]

!item [Name:]
ØGet WindowÆ - ermittelt die Parameter eines Fensters.

!item [Opcode:]
104

!item [Syntax:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield, int16_t *wi_gw1,
                   int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Description:]
Die Funktion liefert abhÑngig von den Åbergebenen Parametern verschiedene
Informationen Åber das Fenster mit der Kennung (!I)wi_ghandle(!i). Es gilt
fÅr (!I)wi_sfield(!i)

Zusammenfassung aller (!link [Unterfunktionen] [öbersicht der wind_get/set Unterfunktionen])

!begin_xlist [WF_TOP]

!label WF_BEVENT, wind_get
!item [WF_BEVENT (24)] 
erfragt den Status des Bitvektors, der per wind_set (..., WF_BEVENT, ...)
gesetzt wurde, und schreibt ihn in den Parameter (!I)wi_gw1(!i).
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!nolink [appl_getinfo])
(Opcode 11) ermittelt werden.

!label WF_BOTTOM, wind_get
!item [WF_BOTTOM (25)] 
erfragt das Handle des untersten Fensters, und schreibt dieses in den
Parameter (!I)wi_gw1(!i). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_CURRXYWH, wind_get
!item [WF_CURRXYWH (05)] 
berechnet die Gesamtgrîûe des Fenster und schreibt sie in die weiteren
Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_DCOLOR, wind_get
!item [WF_DCOLOR (19)] 
liefert die Fensterfarben zurÅck, und zwar wie folgt:

!begin_xlist !short
!item [wi_gw1 =] Fensterelement
!item [wi_gw2 =] Farbe bei aktivem Fenster
!item [wi_gw3 =] Farbe bei inaktivem Fenster
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

Ab MagiC-4 and XaAES v 0.943 kînnen darÅber hinaus fÅr jedes einzelne
Fensterelement 3D-Flags abgefragt werden. Der Aufruf lautet dabei:
wind_get (0, WF_DCOLOR, ...)
Es gilt:

!begin_xlist !short
!item [wi_gw1 =] Fensterelement
!item [wi_gw2 =] Farbe im aktiven Zustand
!item [wi_gw3 =] Farbe im inaktiven Zustand
!item [wi_gw4 =] 3D-Flags
!end_xlist

Die 3D-Flags werden dabei als Bitvektor beschrieben; es gilt:

!begin_xlist !short [Bit-8+n =]
!item [Bit-0 =] "3D in foreground" effect
!item [Bit-1 =] "3D in background" effect
!item [Bit-2 =] "Selectable in foreground" effect
!item [Bit-3 =] "Selectable in background" effect
!item [Bit-8+n =] Mask bit for bit n
!end_xlist

Dieses Feature kann z.Zt. noch (!I)nicht(!i) Åber (!nolink [appl_getinfo]) ermittelt
werden.

!label WF_DDELAY, wind_get
!item [WF_DDELAY (22362)] 
Verzîgerungswerte
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Startverzîgerung beim Klick auf Scrollpfeil
!item [wi_gw2 =] Kontinuierliche Verzîgerung beim Klick auf Scrollpfeil
!item [wi_gw3 =] Kontinuierliche Verzîgerung beim Klick auf Closer
!item [wi_gw4 =] Kontinuierliche Verzîgerung beim Klick auf Fuller
!end_xlist
Alle Werte werden in Millisekunden zurÅckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_FIRSTXYWH, wind_get
!item [WF_FIRSTXYWH (11)] 
berechnet die Koordinaten des ersten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_FTOOLBAR, wind_get
!item [WF_FTOOLBAR (31)] 
ermittelt das erste Rechteck aus der Rechteckliste einer
(!link [Toolbar][Toolbar-Support]).
Es gilt:
!begin_xlist !short
!item [wi_gw1 =] x-Koordinate
!item [wi_gw2 =] y-Koordinate
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hîhe des Rechteckes
!end_xlist

!label WF_FULLXYWH, wind_get
!item [WF_FULLXYWH (07)] 
berechnet die maximale Gesamtgrîûe des Fensters und schreibt sie in die
weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_HSLIDE, wind_get
!item [WF_HSLIDE (08)] 
berechnet die Position des horizontalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz links, bis 1000 ganz rechts).

!label WF_HSLSIZE, wind_get
!item [WF_HSLSIZE (15)]
berechnet die Grîûe des horizontalen Sliders relativ zur Gesamtbreite und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste
Grîûe, 1 klein bis 1000 Gesamtbreite).

!label WF_ICONIFY, wind_get
!item [WF_ICONIFY (26)] 
liefert folgende Werte zurÅck:
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Fenster ist ikonifziert (1) oder nicht (0)
!item [wi_gw2 =] Breite des Fensters
!item [wi_gw3 =] Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_INFO, wind_get
!item [WF_INFO (3)] 
Ermittelt den aktuellen Text der Infozeile des Fensters mit
dem Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in (!nolink [intin])[2] (Highword) und (!nolink [intin])[3] (Lowword)
Åbergeben wurde.

Besitzt das Fenster keinen Infozeile, so ist der RÅckgabewert
der Funktion gleich 0; der Åbergebene Buffer bleibt
unverÑndert.

Da eine Infozeile maximal 128 (N.AES) oder 200 (XaAES) Zeichen lang sein kann, sollte
der Åbergebene Buffer genug Platz bieten, um einen String
dieser LÑnge aufzunehmen.

Steht nur unter N.AES and XaAES zur VerfÅgung.

!label WF_INFOXYWH, wind_get
!item [WF_INFOXYWH (104)] 
Ermittelt die Position des INFO-Fensterelements.

VerfÅgbar ab MagiC 6.10

!label WF_KIND, wind_get
!item [WF_KIND (1)] 
ermittelt die aktuellen
(!link [Komponenten] [Die Komponenten eines Fensters])
des Fensters, und schreibt sie in den Parameter (!I)wi_gw1(!i).

!label WF_MENU, wind_get
!item  [WF_MENU (33)]
liefert die Adresse der OBJECT-Struktur der MenÅzeile im Fenster zurÅck.
Dabei enthÑlt (!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word
der Adresse oder NULL.

!label WF_MINXYWH, wind_get
!item  [WF_MINXYWH (103)]
Fragt die Minimalgrîûe des Fensters ab.

VerfÅgbar ab MagiC 6


!label WF_NAME, wind_get
!item [WF_NAME (2)] 
Ermittelt den aktuellen Fenstertitel des Fensters mit dem
Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in intin[2] (Highword) und intin[3] (Lowword)
Åbergeben wurde.

Besitzt das Fenster keinen Titel, so ist der RÅckgabewert der
Funktion gleich 0; der Åbergebene Buffer bleibt unverÑndert.

Da ein Fenstertitel maximal 128 (N.AES) oder 200 (XaAES) Zeichen lang sein kann, sollte
der Åbergebene Buffer genug Platz bieten, um einen String
dieser LÑnge aufzunehmen.

Steht nur unter MagiC (ab V6.0), N.AES und XaAES zur VerfÅgung.

!label WF_NEWDESK, wind_get
!item [WF_NEWDESK (14)] 
die Funktion liefert folgende Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =] Hi-Word der Desktop-Adresse
!item [wi_gw2 =] Lo-Word der Desktop-Adresse
!item [wi_gw3 =] Index des ersten Objektes
!end_xlist
(!B)Hinweis:(!b) Unter der Desktop-Adresse ist hierbei die Adresse des
aktiven Desktop-Hintergrundes zu verstehen. Die Ausgabe in (!I)wi_gw3(!i)
steht nur unter MagiC zur VerfÅgung. (!nl) 
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden. Ist auch in KAOS 1.4.2 und 
ab MagiC 1 vorhanden.

!label WF_NEXTXYWH, wind_get
!item [WF_NEXTXYWH (12)] 
berechnet die Koordinaten des nÑchsten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_NTOOLBAR, wind_get
!item [WF_NTOOLBAR (32)] 
ermittelt das nÑchste Rechteck aus der Rechteckliste einer Toolbar. Es gilt:
!begin_xlist !short
!item [wi_gw1 =] x-Koordinate
!item [wi_gw2 =] y-Koordinate
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hîhe des Rechteckes
!end_xlist

!label WF_OPTS, wind_get
!item [WF_OPTS (41)] 
Returns the value which set with (!link [wind_set][WF_OPTS, wind_set])
( WF_OPTS ).

The presence should be checked for using (!link [appl_getinfo][%apgi_11]) (Opcode 11).

!label WF_M_OWNER, wind_get
!item [WF_M_OWNER (101)] 
liefert folgende Werte zurÅck:
!begin_xlist !short  [wi_gw1 ]
!item [wi_gw1 =] Applikations-ID des Besitzers
!end_xlist

Nur ab KAOS 1.4.2 (hieû dort noch WF_OWNER) und in MagiC vorhanden.


!label WF_OWNER, wind_get
!item [WF_OWNER (20)] 
liefert folgende Werte zurÅck:
!begin_xlist !short  [wi_gw1 ]
!item [wi_gw1 =] Applikations-ID des Besitzers
!item [wi_gw2 =] Fenster ist geîffnet (1) bzw. geschlossen (0)
!item [wi_gw3 =] Kennung des darÅberliegenden
!item [wi_gw4 =] Kennung des darunterliegenden Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_PREVXYWH, wind_get
!item [WF_PREVXYWH (06)] 
berechnet die Gesamtgrîûe des vorherigen Fensters und schreibt sie in die
weiteren Paramter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_SCREEN, wind_get
!item [WF_SCREEN (17)] 
liefert die Adresse und LÑnge des internen Buffers, in dem das AES den
Hintergrund von DropdownmenÅs und Alertboxen zwischenspeichert und schreibt
sie in die weiteren Parameter (!I)wi_gw1(!i) Highword der Adresse,
(!I)wi_gw2(!i) Lowword der Adresse, (!I)wi_gw3(!i) Highword der LÑnge und
(!I)wi_gw4(!i) Lowword der LÑnge.

Bei TOS 1.02 wird fÅr LÑnge 0 zurÅckgeliefert (obwohl der Puffer 8000 Bytes
faût),

!label WF_SHADE, wind_get
!item [WF_SHADE (22365)] 
Liefert den Shade-Zustand des Fensters.
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Aktueller Shade-Zustand. (!nl)
1: eingeklappt (!nl)
0: ausgeklappt
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_TOOLBAR, wind_get
!item [WF_TOOLBAR (30)] 
liefert die Adresse der OBJECT-Struktur der Toolbar zurÅck. Dabei enthÑlt
(!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word der Adresse.

!label WF_TOP, wind_get
!item [WF_TOP (10)] 
liefert die folgenden Werte zurÅck:
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Kennung des obersten Fensters
!item [Ab AES 3.3] ~
!item [wi_gw2 =] AES-ID of the owner
!item [wi_gw3 =] handle from the window below
!item [wi_gw4 =] Spezialfall fÅr MagiC 2.0
!end_xlist
Wenn kein Fenster geîffnet ist, enthÑlt (!I)wi_gw1(!i) den Wert 0. (!nl)

(!B)Achtung:(!b) (!nolink [MagiC]) 2.0 muû als oberstes Fensterhandle eine negative Zahl
(-2) liefern, falls das Programm einer anderen Applikation gehîrt, sonst
laufen eine Reihe alter Programme nicht. In (!nolink [MagiC]) 2.0 wird das tatsÑchliche
Handle in (!I)wi_gw4(!i) zurÅckgeliefert. Ab (!nolink [MagiC])-3 trifft dies nicht mehr
zu, d.h. das Handle wird wie bisher Åblich, in (!I)wi_gw1(!i) Åbergeben.

XaAES return the AES-ID in (!I)wi_gw4(!i) of the app that owns the window below

!label WF_UNICONIFY, wind_get
!item [WF_UNICONIFY (27)] 
ermittelt die ursprÅnglichen Ausmaûe eines ikonifizierten Fensters.
!begin_xlist !short
!item [wi_gw1 =] x-Position
!item [wi_gw2 =] y-Position
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_VSLIDE, wind_get
!item [WF_VSLIDE (09)] 
berechnet die Position des vertikalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz oben, bis 1000 ganz unten).

!label WF_VSLSIZE, wind_get
!item [WF_VSLSIZE (16)] 
berechnet die Hîhe des vertikalen Sliders relativ zur Gesamthîhe und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste Hîhe,
1 klein bis 1000 Gesamthîhe).

!label WF_WIDGETS, wind_get
!item [WF_WIDGETS (200)] 
Ermittelt die aktuellen Positionen der Sliderobjekte
(W_UPARROW, W_DNARROW, etc.) des Fensters mit dem Handle
wi_ghandle. In den Parametern wi_gw1 und wi_gw2 werden die
vertikal Elemente des typs rightwidgets, in den Parametern
wi_gw3 und wi_gw4 die horizontal Elemente des typs
bottomwidgets geschrieben. wi_gw1 ist das oberste Element,
wi_gw2 das unterste Element des Vertikalsliders. wi_gw3 ist
das linkeste Element, wi_gw4 das rechteste Element des
Horizontalsliders.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_WINDLIST, wind_get
!label WF_M_WINDLIST, wind_get
!item [WF_M_WINDLIST (102)] 
Liefert in (!I)wi_gw1(!i) (High) und (!I)wi_gw2(!i) (Low)  einen Zeiger
auf eine durch 0 abgeschlossene Tabelle der geîffneten Fenster (erstes Element
= oberstes Fenster, d.h. auf die Liste ihrer Handles als Integer-Werte.
Negative Handles gehîren zu eingefrorenen Applikationen. Auf keinen Fall
darf Åber den Zeiger schreibend zugegriffen werden.

Nur in KAOS ab 1.4.2 (WF_WINDLIST) und MagiC vorhanden.

!label WF_WINX, wind_get
!item [WF_WINX (22360)] 
Liefert Informationen zur installierten WINX-Version (ab WINX 2.1).
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Version
!begin_xlist !short
!item [Bit [15..12!]]  beta indicator
!item [Bit [11.. 8!]]  major version number (actually 2)
!item [Bit [~7.. 4!]]  minor version number (actually 3)
!item [Bit [~3.. 0!]]  internal identifier
!end_xlist
!item [wi_gw2 =] creation date GEMDOS format
!item [wi_gw3 =] Pointer (Low) of the WINX-Externals (or NULL)
!item [wi_gw4 =] Pointer (High) of the WINX-Externals (or NULL)
!end_xlist

!label WF_WINXCFG, wind_get
!item [WF_WINXCFG (22361)] 
Returns the application specific configuration switches of the
currently running application.
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =]
Mask of the GLOBAL switches, which are supported by the
currently installed version of WINX
!item [wi_gw2 =]
The current setting of the GLOBAL switches. Applicable are
only those switches, which are set in mask (bit 0 - switch 1)
!item [wi_gw3 =]
Mask of the LOCAL switches, which are supported by the
currently installed version of WINX
!item [wi_gw4 =]
The current setting of the LOCAL switches. Applicable are
only those switches, which are set in mask (bit 0 - switch 1)
!end_xlist
Normalerweise sollten Applikationen darauf verzichten diese Informationen
abzufragen.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_WORKXYWH, wind_get
!item [WF_WORKXYWH (04)] 
berechnet die Koordinaten des Arbeitsbereichs des Fensters und schreibt sie
in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).


!label X_WF_DCOLSTAT, wind_get
!item [X_WF_DCOLSTAT (0x2100)] 
This mode gets  a window gadget's default colors and ob_state
value.  Unlike WF_DCOLOR, this option gives full control over all of
Geneva's extended window gadgets.

The (!I)wi_gw1(!i) parameter must be a pointer to a word
containing the index of the gadget being inquired about, the same way
WF_COLOR and WF_DCOLOR work.

!label XA, wind_get
!item [XA (0x5841)] 
If the (!nolink [Return]) Value is 'XA' (0x5841) then XaAES is installed.
In (!I)wi_gw1(!i) is the version (0x0964 for version V0.964).
(!I)wi_ghandle(!i) must be zero.

!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_gw1, wi_gw2, wi_gw3 und wi_gw4 sind dabei
reine Ausgabe-Parameter.

!item [(!nolink [Return]) Value:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window Library

!item [See Also:]
(!link [Binding] [Bindings for wind_get]) ~ wind_set ~
(!link [UnterfunktionsÅbersicht] [öbersicht der wind_get/set Unterfunktionen])


(!ende_liste)



!begin_node Bindings for wind_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Binding:]
!begin_verbatim
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3)
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;

   crys_if (104);

   *wi_gw1 = int_out[1];
   *wi_gw2 = int_out[2];
   *wi_gw3 = int_out[3];
   *wi_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 104   # Function Opcode
control+2 !! control[1] !! 2     # entry in int_in
control+4 !! control[2] !! 5     # entry in int_out
control+6 !! control[3] !! 0     # entry in addr_in
control+8 !! control[4] !! 0     # entry in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! wi_gw1
int_out+4 !! int_out[2] !! wi_gw2
int_out+6 !! int_out[3] !! wi_gw3
int_out+8 !! int_out[4] !! wi_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_get

(!begin_liste) [Beschreibung]

!item [Name:]
ØGet WindowÆ - ermittelt die Parameter eines Fensters.

!item [AES-Nummer:]
104

!item [Deklaration:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield, int16_t *wi_gw1,
                   int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Beschreibung:]
Die Funktion liefert abhÑngig von den Åbergebenen Parametern verschiedene
Informationen Åber das Fenster mit der Kennung (!I)wi_ghandle(!i). Es gilt
fÅr (!I)wi_sfield(!i).

Zusammenfassung aller (!link [Unterfunktionen] [öbersicht der wind_get/set Unterfunktionen])

!begin_xlist [WF_TOP]

!label WF_BEVENT, wind_get
!item [WF_BEVENT (24)] 
erfragt den Status des Bitvektors, der per wind_set (..., WF_BEVENT, ...)
gesetzt wurde, und schreibt ihn in den Parameter (!I)wi_gw1(!i).
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!nolink [appl_getinfo])
(Opcode 11) ermittelt werden.

!label WF_BOTTOM, wind_get
!item [WF_BOTTOM (25)] 
erfragt das Handle des untersten Fensters, und schreibt dieses in den
Parameter (!I)wi_gw1(!i). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_CURRXYWH, wind_get
!item [WF_CURRXYWH (05)]
berechnet die Gesamtgrîûe des Fenster und schreibt sie in die weiteren
Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_DCOLOR, wind_get
!item [WF_DCOLOR (19)] 
liefert die Fensterfarben zurÅck, und zwar wie folgt:

!begin_xlist !short
!item [wi_gw1 =] Fensterelement
!item [wi_gw2 =] Farbe bei aktivem Fenster
!item [wi_gw3 =] Farbe bei inaktivem Fenster
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

Ab MagiC-4 und XaAES v 0.943 kînnen darÅber hinaus fÅr jedes einzelne
Fensterelement 3D-Flags abgefragt werden. Der Aufruf lautet dabei:
wind_get (0, WF_DCOLOR, ...)
Es gilt:

!begin_xlist !short
!item [wi_gw1 =] Fensterelement
!item [wi_gw2 =] Farbe im aktiven Zustand
!item [wi_gw3 =] Farbe im inaktiven Zustand
!item [wi_gw4 =] 3D-Flags
!end_xlist

Die 3D-Flags werden dabei als Bitvektor beschrieben; es gilt:

!begin_xlist !short [Bit-8+n =]
!item [Bit-0 =] Effekt "3D im Vordergrund"
!item [Bit-1 =] Effekt "3D im Hintergrund"
!item [Bit-2 =] Effekt "selektierbar im Vordergrund"
!item [Bit-3 =] dto. im Hintergrund
!item [Bit-8+n =] Maskenbit fÅr Bit n
!end_xlist

Dieses Feature kann z.Zt. noch (!I)nicht(!i) Åber (!nolink [appl_getinfo]) ermittelt
werden.

!label WF_DDELAY, wind_get
!item [WF_DDELAY (22362)] 
Verzîgerungswerte
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Startverzîgerung beim Klick auf Scrollpfeil
!item [wi_gw2 =] Kontinuierliche Verzîgerung beim Klick auf Scrollpfeil
!item [wi_gw3 =] Kontinuierliche Verzîgerung beim Klick auf Closer
!item [wi_gw4 =] Kontinuierliche Verzîgerung beim Klick auf Fuller
!end_xlist
Alle Werte werden in Millisekunden zurÅckgegeben.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_FIRSTXYWH, wind_get
!item [WF_FIRSTXYWH (11)] 
berechnet die Koordinaten des ersten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_FTOOLBAR, wind_get
!item [WF_FTOOLBAR (31)] 
ermittelt das erste Rechteck aus der Rechteckliste einer
(!link [Toolbar][Toolbar-Support]).
Es gilt:
!begin_xlist !short
!item [wi_gw1 =] x-Koordinate
!item [wi_gw2 =] y-Koordinate
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hîhe des Rechteckes
!end_xlist

!label WF_FULLXYWH, wind_get
!item [WF_FULLXYWH (07)] 
berechnet die maximale Gesamtgrîûe des Fensters und schreibt sie in die
weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_HSLIDE, wind_get
!item [WF_HSLIDE (08)] 
berechnet die Position des horizontalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz links, bis 1000 ganz rechts).

!label WF_HSLSIZE, wind_get
!item [WF_HSLSIZE (15)] 
berechnet die Grîûe des horizontalen Sliders relativ zur Gesamtbreite und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste
Grîûe, 1 klein bis 1000 Gesamtbreite).

!label WF_ICONIFY, wind_get
!item [WF_ICONIFY (26)] 
liefert folgende Werte zurÅck:
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Fenster ist ikonifziert (1) oder nicht (0)
!item [wi_gw2 =] Breite des Fensters
!item [wi_gw3 =] Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_INFO, wind_get
!item [WF_INFO (3)] 
Ermittelt den aktuellen Text der Infozeile des Fensters mit
dem Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in (!nolink [intin])[2] (Highword) und (!nolink [intin])[3] (Lowword)
Åbergeben wurde.

Besitzt das Fenster keinen Infozeile, so ist der RÅckgabewert
der Funktion gleich 0; der Åbergebene Buffer bleibt
unverÑndert.

Da eine Infozeile maximal 128 (N.AES) oder 200 (XaAES) Zeichen lang sein kann, sollte
der Åbergebene Buffer genug Platz bieten, um einen String
dieser LÑnge aufzunehmen.

Steht nur unter N.AES und XaAES zur VerfÅgung.

!label WF_INFOXYWH, wind_get
!item [WF_INFOXYWH (104)] 
Ermittelt die Position des INFO-Fensterelements.

VerfÅgbar ab MagiC 6.10

!label WF_KIND, wind_get
!item [WF_KIND (1)] 
ermittelt die aktuellen
(!link [Komponenten] [Die Komponenten eines Fensters])
des Fensters, und schreibt sie in den Parameter (!I)wi_gw1(!i).

!label WF_MENU, wind_get
!item  [WF_MENU (33)]
liefert die Adresse der OBJECT-Struktur der MenÅzeile im Fenster zurÅck.
Dabei enthÑlt (!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word
der Adresse oder NULL.

!label WF_MINXYWH, wind_get
!item  [WF_MINXYWH (103)] 
Fragt die Minimalgrîûe des Fensters ab.

VerfÅgbar ab MagiC 6

!label WF_NAME, wind_get
!item [WF_NAME (2)] 
Ermittelt den aktuellen Fenstertitel des Fensters mit dem
Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in intin[2] (Highword) und intin[3] (Lowword)
Åbergeben wurde.

Besitzt das Fenster keinen Titel, so ist der RÅckgabewert der
Funktion gleich 0; der Åbergebene Buffer bleibt unverÑndert.

Da ein Fenstertitel maximal 128 (N.AES) oder 200 (XaAES) Zeichen lang sein kann, sollte
der Åbergebene Buffer genug Platz bieten, um einen String
dieser LÑnge aufzunehmen.

Steht nur unter MagiC (ab V6.0), N.AES und XaAES zur VerfÅgung.

!label WF_NEWDESK, wind_get
!item [WF_NEWDESK (14)] 
die Funktion liefert folgende Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =] Hi-Word der Desktop-Adresse
!item [wi_gw2 =] Lo-Word der Desktop-Adresse
!item [wi_gw3 =] Index des ersten Objektes
!end_xlist
(!B)Hinweis:(!b) Unter der Desktop-Adresse ist hierbei die Adresse des
aktiven Desktop-Hintergrundes zu verstehen. Die Ausgabe in (!I)wi_gw3(!i)
steht nur unter MagiC zur VerfÅgung. (!nl)
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden. Ist auch in KAOS 1.4.2 und 
ab MagiC 1 vorhanden.

!label WF_NEXTXYWH, wind_get
!item [WF_NEXTXYWH (12)] 
berechnet die Koordinaten des nÑchsten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_NTOOLBAR, wind_get
!item [WF_NTOOLBAR (32)] 
ermittelt das nÑchste Rechteck aus der Rechteckliste einer Toolbar. Es gilt:
!begin_xlist !short
!item [wi_gw1 =] x-Koordinate
!item [wi_gw2 =] y-Koordinate
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hîhe des Rechteckes
!end_xlist

!label WF_OPTS, wind_get
!item [WF_OPTS (41)] 
Liefert die Einstellungen, welches per (!link [wind_set][WF_OPTS, wind_set])
( WF_OPTS ) gemacht wurden.

Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.


!label WF_M_OWNER, wind_get
!item [WF_M_OWNER (101)] 
liefert folgende Werte zurÅck:
!begin_xlist !short  [wi_gw1 ]
!item [wi_gw1 =] Applikations-ID des Besitzers
!end_xlist

Nur ab KAOS 1.4.2 (hieû dort noch WF_OWNER) und in MagiC vorhanden.

!label WF_OWNER, wind_get
!item [WF_OWNER (20)] 
liefert folgende Werte zurÅck:
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Applikations-ID des Besitzers
!item [wi_gw2 =] Fenster ist geîffnet (1) bzw. geschlossen (0)
!item [wi_gw3 =] Kennung des darÅberliegenden
!item [wi_gw4 =] Kennung des darunterliegenden Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_PREVXYWH, wind_get
!item [WF_PREVXYWH (06)] 
berechnet die Gesamtgrîûe des vorherigen Fensters und schreibt sie in die
weiteren Paramter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_SCREEN, wind_get
!item [WF_SCREEN (17)] 
liefert die Adresse und LÑnge des internen Buffers, in dem das AES den
Hintergrund von DropdownmenÅs und Alertboxen zwischenspeichert und schreibt
sie in die weiteren Parameter (!I)wi_gw1(!i) Highword der Adresse,
(!I)wi_gw2(!i) Lowword der Adresse, (!I)wi_gw3(!i) Highword der LÑnge und
(!I)wi_gw4(!i) Lowword der LÑnge.

Bei TOS 1.02 wird fÅr LÑnge 0 zurÅckgeliefert (obwohl der Puffer 8000 Bytes
faût).

!label WF_SHADE, wind_get
!item [WF_SHADE (22365)] 
Liefert den Shade-Zustand des Fensters.
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Aktueller Shade-Zustand. (!nl)
1: eingeklappt (!nl)
0: ausgeklappt
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_TOOLBAR, wind_get
!item [WF_TOOLBAR (30)] 
liefert die Adresse der OBJECT-Struktur der Toolbar zurÅck. Dabei enthÑlt
(!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word der Adresse.

!label WF_TOP, wind_get
!item [WF_TOP (10)] 
liefert die folgenden Werte zurÅck:
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Kennung des obersten Fensters
!item [Ab AES 3.3] ~
!item [wi_gw2 =] Applikations-ID des Besitzers
!item [wi_gw3 =] Kennung des nÑchsten Fensters
!item [wi_gw4 =] Spezialfall fÅr MagiC 2.0 und XaAES
!end_xlist
Wenn kein Fenster geîffnet ist, enthÑlt (!I)wi_gw1(!i) den Wert 0. (!nl)

(!B)Achtung:(!b) (!nolink [MagiC]) 2.0 muû als oberstes Fensterhandle eine negative Zahl
(-2) liefern, falls das Programm einer anderen Applikation gehîrt, sonst
laufen eine Reihe alter Programme nicht. In (!nolink [MagiC]) 2.0 wird das tatsÑchliche
Handle in (!I)wi_gw4(!i) zurÅckgeliefert. Ab (!nolink [MagiC])-3 trifft dies nicht mehr
zu, d.h. das Handle wird wie bisher Åblich, in (!I)wi_gw1(!i) Åbergeben.

XaAES liefert in (!I)wi_gw4(!i) die Applikations-ID des Besitzers des nÑchsten Fensters.

!label WF_UNICONIFY, wind_get
!item [WF_UNICONIFY (27)] 
ermittelt die ursprÅnglichen Ausmaûe eines ikonifizierten Fensters.
!begin_xlist !short
!item [wi_gw1 =] x-Position
!item [wi_gw2 =] y-Position
!item [wi_gw3 =] Breite
!item [wi_gw4 =] Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_VSLIDE, wind_get
!item [WF_VSLIDE (09)] 
berechnet die Position des vertikalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz oben, bis 1000 ganz unten).

!label WF_VSLSIZE, wind_get
!item [WF_VSLSIZE (16)] 
berechnet die Hîhe des vertikalen Sliders relativ zur Gesamthîhe und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste Hîhe,
1 klein bis 1000 Gesamthîhe).

!label WF_WIDGETS, wind_get
!item [WF_WIDGETS (200)] 
Ermittelt die aktuellen Positionen der Sliderobjekte
(W_UPARROW, W_DNARROW, etc.) des Fensters mit dem Handle
(!I)wi_ghandle(!i). In den Parametern (!I)wi_gw1(!i) und (!I)wi_gw2(!i) werden die
vertikal Elemente des typs rightwidgets, in den Parametern
(!I)wi_gw3(!i) und (!I)wi_gw4(!i) die horizontal Elemente des typs
bottomwidgets geschrieben. (!I)wi_gw1(!i) ist das oberste Element,
(!I)wi_gw2(!i) das unterste Element des Vertikalsliders. (!I)wi_gw3(!i) ist
das linkeste Element, (!I)wi_gw4(!i) das rechteste Element des
Horizontalsliders.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_WINDLIST, wind_get
!label WF_M_WINDLIST, wind_get
!item [WF_M_WINDLIST (102)] 
Liefert in (!I)wi_gw1(!i) (High) und (!I)wi_gw2(!i) (Low)  einen Zeiger
auf eine durch 0 abgeschlossene Tabelle der geîffneten Fenster (erstes Element
= oberstes Fenster, d.h. auf die Liste ihrer Handles als Integer-Werte.
Negative Handles gehîren zu eingefrorenen Applikationen. Auf keinen Fall
darf Åber den Zeiger schreibend zugegriffen werden.

Nur in KAOS ab 1.4.2 (WF_WINDLIST) und MagiC vorhanden.

!label WF_WINX, wind_get
!item [WF_WINX (22360)] 
Liefert Informationen zur installierten WINX-Version (ab WINX 2.1).
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =] Version
!begin_xlist !short [wi_gw1 ]
!item [Bit [15..12!]]  Beta-Kennung
!item [Bit [11.. 8!]]  Major (momentan 2)
!item [Bit [~7.. 4!]]  Minor (momentan 3)
!item [Bit [~3.. 0!]]  Interne Kennung
!end_xlist
!item [wi_gw2 =] Erstellungsdatum im GEMDOS-Format
!item [wi_gw3 =] Zeiger (Low) auf die WINX-Externals (bzw. NULL)
!item [wi_gw4 =] Zeiger (High) auf die WINX-Externals (bzw. NULL)
!end_xlist


!label WF_WINXCFG, wind_get
!item [WF_WINXCFG (22361)] 
Liefert die globalen und lokalen Schalter der aufrufenden Applikation
(Bit n entspricht jeweils Schalter n+1).
!begin_xlist !short [wi_gw1 ]
!item [wi_gw1 =]
Bitmaske der von der aktuellen WINX-Version unterstÅtzten
globalen Schalter (Bit gesetzt bedeutet, Schalter vorhanden).
!item [wi_gw2 =]
Schalterstellung der globalen Schalter (Bit gesetzt
bedeutet, Schalter eingeschaltet).
!item [wi_gw3 =]
Bitmaske der von der aktuellen WINX-Version unterstÅtzten
lokalen Schalter der aktuellen Applikation (Bit gesetzt
bedeutet, Schalter vorhanden).
!item [wi_gw4 =]
Schalterstellung der lokalen Schalter der aktuellen
Applikation (Bit gesetzt bedeutet, Schalter eingeschaltet).
!end_xlist
Normalerweise sollten Applikationen darauf verzichten diese Informationen
abzufragen.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_22360]) (Opcode 22360) ermittelt werden.

!label WF_WORKXYWH, wind_get
!item [WF_WORKXYWH (04)] 
berechnet die Koordinaten des Arbeitsbereichs des Fensters und schreibt sie
in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).


!label X_WF_DCOLSTAT, wind_get
!item [X_WF_DCOLSTAT (0x2100)] 
This mode gets  a window gadget's default colors and ob_state
value.  Unlike WF_DCOLOR, this option gives full control over all of
Geneva's extended window gadgets.

The (!I)wi_gw1(!i) parameter must be a pointer to a word
containing the index of the gadget being inquired about, the same way
WF_COLOR and WF_DCOLOR work.


!label XA, wind_get
!item [XA (0x5841)] 
Wird als Ergebins 'XA' (0x5841) geliefert so ist XaAES installiert und man
erhÑlt in (!I)wi_gw1(!i) die Versionsnummer (0x0964 fÅr Version V0.964).
(!I)wi_ghandle(!i) muû auf Null gesetzt werden.
!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_gw1, wi_gw2, wi_gw3 und wi_gw4 sind dabei
reine Ausgabe-Parameter.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
In allen (!nolink [AES]) Versionen.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wind_get]) ~ wind_set ~
(!link [UnterfunktionsÅbersicht] [öbersicht der wind_get/set Unterfunktionen])

(!ende_liste)



!begin_node Bindings fÅr wind_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3)
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;

   crys_if (104);

   *wi_gw1 = int_out[1];
   *wi_gw2 = int_out[2];
   *wi_gw3 = int_out[3];
   *wi_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 104   # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 5     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! wi_gw1
int_out+4 !! int_out[2] !! wi_gw2
int_out+6 !! int_out[3] !! wi_gw3
int_out+8 !! int_out[4] !! wi_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!endif
