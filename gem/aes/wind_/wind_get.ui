!iflang [english]

!begin_node wind_get

(!begin_liste) [Availability]

!item [Name:]
ØGet WindowÆ - ermittelt die Parameter eines Fensters.

!item [Opcode:]
104

!item [Syntax:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield, int16_t *wi_gw1,
                   int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Description:]
Die Funktion liefert abhÑngig von den Åbergebenen Parametern verschiedene
Informationen Åber das Fenster mit der Kennung (!I)wi_ghandle(!i). Es gilt:

!begin_xlist !short [WF_CURRXYWH (05)]

!item [wi_gfield]
Bedeutung

!item [~]
~

!label WF_BEVENT
!item [WF_BEVENT (24)]
erfragt den Status des Bitvektors, der per wind_set (..., WF_BEVENT, ...)
gesetzt wurde, und schreibt ihn in den Parameter (!I)wi_gw1(!i).
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!nolink [appl_getinfo])
(Opcode 11) ermittelt werden.

!label WF_BOTTOM
!item [WF_BOTTOM (25)]
erfragt das Handle des untersten Fensters, und schreibt dieses in den
Parameter (!I)wi_gw1(!i). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_CURRXYWH
!item [WF_CURRXYWH (05)]
berechnet die Gesamtgrîûe des Fenster und schreibt sie in die weiteren
Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_DCOLOR
!item [WF_DCOLOR (19)]
liefert die Fensterfarben zurÅck, und zwar wie folgt:

!begin_xlist !short
!item [wi_gw1 =]
Fensterelement
!item [wi_gw2 =]
Farbe bei aktivem Fenster
!item [wi_gw3 =]
Farbe bei inaktivem Fenster
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.

Ab MagiC-4 and XaAES v 0.943 kînnen darÅber hinaus fÅr jedes einzelne Fensterelement 3D-Flags
abgefragt werden. Der Aufruf lautet dabei: wind_get (0, WF_DCOLOR, ...)
Es gilt:

!begin_xlist !short
!item [wi_sw1 =]
Fensterelement
!item [wi_sw2 =]
Farbe im aktiven Zustand
!item [wi_sw3 =]
Farbe im inaktiven Zustand
!item [wi_sw4 =]
3D-Flags
!end_xlist

Die 3D-Flags werden dabei als Bitvektor beschrieben; es gilt:

!begin_xlist !short [Bit-8+n =]
!item [Bit-0 =]
Effekt "3D im Vordergrund"
!item [Bit-1 =]
Effekt "3D im Hintergrund"
!item [Bit-2 =]
Effekt "selektierbar im Vordergrund"
!item [Bit-3 =]
dto. im Hintergrund
!item [Bit-8+n =]
Maskenbit fÅr Bit n
!end_xlist

Dieses Feature kann z.Zt. noch (!I)nicht(!i) Åber (!nolink [appl_getinfo]) ermittelt
werden.

!label WF_FIRSTXYWH
!item [WF_FIRSTXYWH (11)]
berechnet die Koordinaten des ersten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_FTOOLBAR
!item [WF_FTOOLBAR (31)]
ermittelt das erste Rechteck aus der Rechteckliste einer (!link [Toolbar][Toolbar-Support]).
Es gilt:
!begin_xlist !short
!item [wi_gw1 =]
x-Koordinate
!item [wi_gw2 =]
y-Koordinate
!item [wi_gw3 =]
Breite
!item [wi_gw4 =]
Hîhe des Rechteckes
!end_xlist

!label WF_FULLXYWH
!item [WF_FULLXYWH (07)]
berechnet die maximale Gesamtgrîûe des Fensters und schreibt sie in die
weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_HSLIDE
!item [WF_HSLIDE (08)]
berechnet die Position des horizontalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz links, bis 1000 ganz rechts).

!label WF_HSLIZE
!item [WF_HSLSIZE (15)]
berechnet die Grîûe des horizontalen Sliders relativ zur Gesamtbreite und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste
Grîûe, 1 klein bis 1000 Gesamtbreite). 

!item [(!nolink [WF_ICONIFY]) (26)]
liefert folgende Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =]
Fenster ist ikonifziert (1) oder nicht (0)
!item [wi_gw2 =]
Breite des Fensters
!item [wi_gw3 =]
Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!item [(!nolink [WF_INFO]) (3)]
Ermittelt den aktuellen Text der Infozeile des Fensters mit 
dem Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in (!nolink [intin])[2] (Highword) und (!nolink [intin])[3] (Lowword) 
Åbergeben wurde.

Besitzt das Fenster keinen Infozeile, so ist der RÅckgabewert 
der Funktion gleich 0; der Åbergebene Buffer bleibt 
unverÑndert.

Da eine Infozeile maximal 128 Zeichen lang sein kann, sollte 
der Åbergebene Buffer genug Platz bieten, um einen String 
dieser LÑnge aufzunehmen.

Steht nur unter N.AES and XaAES zur VerfÅgung.

!label WF_INFOXYWH
!item [WF_INFOXYWH (104)]
Ermittelt die Position des INFO-Fensterelements.

VerfÅgbar ab MagiC 6.10

!label WF_KIND
!item [WF_KIND (1)]
ermittelt die aktuellen
(!link [Komponenten] [Die Komponenten eines Fensters])
des Fensters, und schreibt sie in den Parameter (!I)wi_gw1(!i).

!label WF_MINXYWH
!item  [WF_MINXYWH (103)]
Fragt die Minimalgrîûe des Fensters ab.

VerfÅgbar ab MagiC 6


!item [(!nolink[WF_NAME]) (2)]
Ermittelt den aktuellen Fenstertitel des Fensters mit dem 
Handle wi_ghandle und kopiert diesen in den Buffer, dessen 
Adresse in intin[2] (Highword) und intin[3] (Lowword) 
Åbergeben wurde.

Besitzt das Fenster keinen Titel, so ist der RÅckgabewert der 
Funktion gleich 0; der Åbergebene Buffer bleibt unverÑndert.

Da ein Fenstertitel maximal 128 Zeichen lang sein kann, sollte
der Åbergebene Buffer genug Platz bieten, um einen String 
dieser LÑnge aufzunehmen.

Steht nur unter N.AES zur VerfÅgung.

!label WF_NEWDESK
!item [WF_NEWDESK (14)]
die Funktion liefert folgende Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =]
Hi-Word der Desktop-Adresse
!item [wi_gw2 =]
Lo-Word der Desktop-Adresse
!item [wi_gw3 =]
Index des ersten Objektes
!end_xlist
(!B)Hinweis:(!b) Unter der Desktop-Adresse ist hierbei die Adresse des
aktiven Desktop-Hintergrundes zu verstehen. Die Ausgabe in (!I)wi_gw3(!i)
steht nur unter MagiC zur VerfÅgung. (!B)Achtung:(!b) Das Vorhandensein
dieses Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11)
ermittelt werden.

!label WF_NEXTXYWH
!item [WF_NEXTXYWH (12)]
berechnet die Koordinaten des nÑchsten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_NTOOLBAR
!item [WF_NTOOLBAR (32)]
ermittelt das nÑchste Rechteck aus der Rechteckliste einer Toolbar. Es gilt:
!begin_xlist !short
!item [wi_gw1 =]
x-Koordinate
!item [wi_gw2 =]
y-Koordinate
!item [wi_gw3 =]
Breite
!item [wi_gw4 =]
Hîhe des Rechteckes
!end_xlist

!label WF_OWNER
!item [WF_OWNER (20)]
liefert folgende Werte zurÅck:
!begin_xlist
!item [wi_gw1 =]
Applikations-ID des Besitzers
!item [wi_gw2 =]
Fenster ist geîffnet (1) bzw. geschlossen (0)
!item [wi_gw3 =]
Kennung des darÅberliegenden
!item [wi_gw4 =]
Kennung des darunterliegenden Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_PREVXYWH
!item [WF_PREVXYWH (06)]
berechnet die Gesamtgrîûe des vorherigen Fensters und schreibt sie in die
weiteren Paramter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_SCREEN
!item [WF_SCREEN (17)]
liefert die Adresse und LÑnge des internen Buffers, in dem das AES den
Hintergrund von DropdownmenÅs und Alertboxen zwischenspeichert und schreibt
sie in die weiteren Parameter (!I)wi_gw1(!i) Highword der Adresse,
(!I)wi_gw2(!i) Lowword der Adresse, (!I)wi_gw3(!i) Highword der LÑnge und
(!I)wi_gw4(!i) Lowword der LÑnge.

!label WF_TOOLBAR
!item [WF_TOOLBAR (30)]
liefert die Adresse der OBJECT-Struktur der Toolbar zurÅck. Dabei enthÑlt
(!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word der Adresse.

!label WF_TOP
!item [WF_TOP (10)]
liefert die folgenden Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =]
Kennung des obersten Fensters
!item [Ab AES 3.3] ~
!item [wi_gw2 =]
AES-ID of the owner
!item [wi_gw3 =]
handle from the window below
!item [wi_gw4 =]
Spezialfall fÅr MagiC 2.0
!end_xlist
Wenn kein Fenster geîffnet ist, enthÑlt (!I)wi_gw1(!i) den Wert 0. (!nl)

(!B)Achtung:(!b) (!nolink [MagiC]) 2.0 muû als oberstes Fensterhandle eine negative Zahl
(-2) liefern, falls das Programm einer anderen Applikation gehîrt, sonst
laufen eine Reihe alter Programme nicht. In (!nolink [MagiC]) 2.0 wird das tatsÑchliche
Handle in (!I)wi_gw4(!i) zurÅckgeliefert. Ab (!nolink [MagiC])-3 trifft dies nicht mehr
zu, d.h. das Handle wird wie bisher Åblich, in (!I)wi_gw1(!i) Åbergeben.

XaAES return the AES-ID in (!I)wi_gw1(!i) of the app that owns the window below

!item [WF_UNICONIFY (27)]
ermittelt die ursprÅnglichen Ausmaûe eines ikonifizierten Fensters.
!begin_xlist !short
!item [wi_gw1 =]
x-Position
!item [wi_gw2 =]
y-Position
!item [wi_gw3 =]
Breite
!item [wi_gw4 =]
Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_VSLIDE
!item [WF_VSLIDE (09)]
berechnet die Position des vertikalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz oben, bis 1000 ganz unten).

!label WF_VSLSIZE
!item [WF_VSLSIZE (16)]
berechnet die Hîhe des vertikalen Sliders relativ zur Gesamthîhe und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste Hîhe,
1 klein bis 1000 Gesamthîhe).

!item [(!nolink [WF_WIDGETS]) (200)]
Ermittelt die aktuellen Positionen der Sliderobjekte 
(W_UPARROW, W_DNARROW, etc.) des Fensters mit dem Handle 
wi_ghandle. In den Parametern wi_gw1 und wi_gw2 werden die 
vertikal Elemente des typs rightwidgets, in den Parametern 
wi_gw3 und wi_gw4 die horizontal Elemente des typs 
bottomwidgets geschrieben. wi_gw1 ist das oberste Element, 
wi_gw2 das unterste Element des Vertikalsliders. wi_gw3 ist 
das linkeste Element, wi_gw4 das rechteste Element des 
Horizontalsliders.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.

!label WF_WORKXYWH
!item [WF_WORKXYWH (04)]
berechnet die Koordinaten des Arbeitsbereichs des Fensters und schreibt sie
in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).


!label X_WF_DCOLSTAT
!item [X_WF_DCOLSTAT (0x2100)] 
This mode gets  a window gadget's default colors and ob_state
value.  Unlike WF_DCOLOR, this option gives full control over all of
Geneva's extended window gadgets.

The (!I)wi_gw1(!i) parameter must be a pointer to a word
containing the index of the gadget being inquired about, the same way
WF_COLOR and WF_DCOLOR work.

!label XA
!item [XA (0x5841)]
If the (!nolink [Return]) Value is 'XA' (0x5841) then XaAES is installed.
In (!I)wi_gw1(!i) is the version (0x0964 for version V0.964).
(!I)wi_ghandle(!i) must be zero.

!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_gw1, wi_gw2, wi_gw3 und wi_gw4 sind dabei
reine Ausgabe-Parameter.

!item [(!nolink [Return]) Value:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window Library

!item [See Also:]
(!link [Binding] [Bindings for wind_get]) ~ wind_set

(!ende_liste)



!begin_node Bindings for wind_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Binding:]
!begin_verbatim
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3)
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;

   crys_if (104);

   *wi_gw1 = int_out[1];
   *wi_gw2 = int_out[2];
   *wi_gw3 = int_out[3];
   *wi_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 104   # Function Opcode
control+2 !! control[1] !! 2     # entry in int_in
control+4 !! control[2] !! 5     # entry in int_out
control+6 !! control[3] !! 0     # entry in addr_in
control+8 !! control[4] !! 0     # entry in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! wi_gw1
int_out+4 !! int_out[2] !! wi_gw2
int_out+6 !! int_out[3] !! wi_gw3
int_out+8 !! int_out[4] !! wi_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_get

(!begin_liste) [Beschreibung]

!item [Name:]
ØGet WindowÆ - ermittelt die Parameter eines Fensters.

!item [AES-Nummer:]
104

!item [Deklaration:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield, int16_t *wi_gw1,
                   int16_t *wi_gw2, int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Beschreibung:]
Die Funktion liefert abhÑngig von den Åbergebenen Parametern verschiedene
Informationen Åber das Fenster mit der Kennung (!I)wi_ghandle(!i). Es gilt:

!begin_xlist !short [WF_CURRXYWH (05)]

!item [wi_gfield]
Bedeutung

!item [~]
~

!label WF_BEVENT
!item [WF_BEVENT (24)]
erfragt den Status des Bitvektors, der per wind_set (..., WF_BEVENT, ...)
gesetzt wurde, und schreibt ihn in den Parameter (!I)wi_gw1(!i).
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!nolink [appl_getinfo])
(Opcode 11) ermittelt werden.

!label WF_BOTTOM
!item [WF_BOTTOM (25)]
erfragt das Handle des untersten Fensters, und schreibt dieses in den
Parameter (!I)wi_gw1(!i). (!B)Achtung:(!b) Das Vorhandensein dieses Features
sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!label WF_CURRXYWH
!item [WF_CURRXYWH (05)]
berechnet die Gesamtgrîûe des Fenster und schreibt sie in die weiteren
Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_DCOLOR
!item [WF_DCOLOR (19)]
liefert die Fensterfarben zurÅck, und zwar wie folgt:

!begin_xlist !short
!item [wi_gw1 =]
Fensterelement
!item [wi_gw2 =]
Farbe bei aktivem Fenster
!item [wi_gw3 =]
Farbe bei inaktivem Fenster
!end_xlist

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.

Ab MagiC-4 und XaAES v 0.943 kînnen darÅber hinaus fÅr jedes einzelne
Fensterelement 3D-Flags abgefragt werden. Der Aufruf lautet dabei:
wind_get (0, WF_DCOLOR, ...)
Es gilt:

!begin_xlist !short
!item [wi_sw1 =]
Fensterelement
!item [wi_sw2 =]
Farbe im aktiven Zustand
!item [wi_sw3 =]
Farbe im inaktiven Zustand
!item [wi_sw4 =]
3D-Flags
!end_xlist

Die 3D-Flags werden dabei als Bitvektor beschrieben; es gilt:

!begin_xlist !short [Bit-8+n =]
!item [Bit-0 =]
Effekt "3D im Vordergrund"
!item [Bit-1 =]
Effekt "3D im Hintergrund"
!item [Bit-2 =]
Effekt "selektierbar im Vordergrund"
!item [Bit-3 =]
dto. im Hintergrund
!item [Bit-8+n =]
Maskenbit fÅr Bit n
!end_xlist

Dieses Feature kann z.Zt. noch (!I)nicht(!i) Åber (!nolink [appl_getinfo]) ermittelt
werden.

!label WF_FIRSTXYWH
!item [WF_FIRSTXYWH (11)]
berechnet die Koordinaten des ersten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_FTOOLBAR
!item [WF_FTOOLBAR (31)]
ermittelt das erste Rechteck aus der Rechteckliste einer (!link [Toolbar][Toolbar-Support]).
Es gilt:
!begin_xlist !short
!item [wi_gw1 =]
x-Koordinate
!item [wi_gw2 =]
y-Koordinate
!item [wi_gw3 =]
Breite
!item [wi_gw4 =]
Hîhe des Rechteckes
!end_xlist

!label WF_FULLXYWH
!item [WF_FULLXYWH (07)]
berechnet die maximale Gesamtgrîûe des Fensters und schreibt sie in die
weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_HSLIDE
!item [WF_HSLIDE (08)]
berechnet die Position des horizontalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz links, bis 1000 ganz rechts).

!label WF_HSLIZE
!item [WF_HSLSIZE (15)]
berechnet die Grîûe des horizontalen Sliders relativ zur Gesamtbreite und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste
Grîûe, 1 klein bis 1000 Gesamtbreite). 

!item [(!nolink [WF_ICONIFY]) (26)]
liefert folgende Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =]
Fenster ist ikonifziert (1) oder nicht (0)
!item [wi_gw2 =]
Breite des Fensters
!item [wi_gw3 =]
Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per
(!link [appl_getinfo][%apgi_11]) (Opcode 11) ermittelt werden.

!item [(!nolink [WF_INFO]) (3)]
Ermittelt den aktuellen Text der Infozeile des Fensters mit 
dem Handle wi_ghandle und kopiert diesen in den Buffer, dessen
Adresse in (!nolink [intin])[2] (Highword) und (!nolink [intin])[3] (Lowword) 
Åbergeben wurde.

Besitzt das Fenster keinen Infozeile, so ist der RÅckgabewert 
der Funktion gleich 0; der Åbergebene Buffer bleibt 
unverÑndert.

Da eine Infozeile maximal 128 Zeichen lang sein kann, sollte 
der Åbergebene Buffer genug Platz bieten, um einen String 
dieser LÑnge aufzunehmen.

Steht nur unter N.AES und XaAES zur VerfÅgung.

!label WF_INFOXYWH
!item [WF_INFOXYWH (104)]
Ermittelt die Position des INFO-Fensterelements.

VerfÅgbar ab MagiC 6.10

!label WF_KIND
!item [WF_KIND (1)]
ermittelt die aktuellen
(!link [Komponenten] [Die Komponenten eines Fensters])
des Fensters, und schreibt sie in den Parameter (!I)wi_gw1(!i).

!label WF_MINXYWH
!item  [WF_MINXYWH (103)]
Fragt die Minimalgrîûe des Fensters ab.

VerfÅgbar ab MagiC 6


!item [(!nolink[WF_NAME]) (2)]
Ermittelt den aktuellen Fenstertitel des Fensters mit dem 
Handle wi_ghandle und kopiert diesen in den Buffer, dessen 
Adresse in intin[2] (Highword) und intin[3] (Lowword) 
Åbergeben wurde.

Besitzt das Fenster keinen Titel, so ist der RÅckgabewert der 
Funktion gleich 0; der Åbergebene Buffer bleibt unverÑndert.

Da ein Fenstertitel maximal 128 Zeichen lang sein kann, sollte
der Åbergebene Buffer genug Platz bieten, um einen String 
dieser LÑnge aufzunehmen.

Steht nur unter N.AES zur VerfÅgung.

!label WF_NEWDESK
!item [WF_NEWDESK (14)]
die Funktion liefert folgende Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =]
Hi-Word der Desktop-Adresse
!item [wi_gw2 =]
Lo-Word der Desktop-Adresse
!item [wi_gw3 =]
Index des ersten Objektes
!end_xlist
(!B)Hinweis:(!b) Unter der Desktop-Adresse ist hierbei die Adresse des
aktiven Desktop-Hintergrundes zu verstehen. Die Ausgabe in (!I)wi_gw3(!i)
steht nur unter MagiC zur VerfÅgung. (!B)Achtung:(!b) Das Vorhandensein
dieses Features sollte per (!link [appl_getinfo][%apgi_11]) (Opcode 11)
ermittelt werden.

!label WF_NEXTXYWH
!item [WF_NEXTXYWH (12)]
berechnet die Koordinaten des nÑchsten Rechtecks in der Rechtecksliste und
schreibt sie in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i),
(!I)wi_gw3(!i) und (!I)wi_gw4(!i).

!label WF_NTOOLBAR
!item [WF_NTOOLBAR (32)]
ermittelt das nÑchste Rechteck aus der Rechteckliste einer Toolbar. Es gilt:
!begin_xlist !short
!item [wi_gw1 =]
x-Koordinate
!item [wi_gw2 =]
y-Koordinate
!item [wi_gw3 =]
Breite
!item [wi_gw4 =]
Hîhe des Rechteckes
!end_xlist

!label WF_OWNER
!item [WF_OWNER (20)]
liefert folgende Werte zurÅck:
!begin_xlist
!item [wi_gw1 =]
Applikations-ID des Besitzers
!item [wi_gw2 =]
Fenster ist geîffnet (1) bzw. geschlossen (0)
!item [wi_gw3 =]
Kennung des darÅberliegenden
!item [wi_gw4 =]
Kennung des darunterliegenden Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_PREVXYWH
!item [WF_PREVXYWH (06)]
berechnet die Gesamtgrîûe des vorherigen Fensters und schreibt sie in die
weiteren Paramter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).

!label WF_SCREEN
!item [WF_SCREEN (17)]
liefert die Adresse und LÑnge des internen Buffers, in dem das AES den
Hintergrund von DropdownmenÅs und Alertboxen zwischenspeichert und schreibt
sie in die weiteren Parameter (!I)wi_gw1(!i) Highword der Adresse,
(!I)wi_gw2(!i) Lowword der Adresse, (!I)wi_gw3(!i) Highword der LÑnge und
(!I)wi_gw4(!i) Lowword der LÑnge.

!label WF_TOOLBAR
!item [WF_TOOLBAR (30)]
liefert die Adresse der OBJECT-Struktur der Toolbar zurÅck. Dabei enthÑlt
(!I)wi_gw1(!i) das High-Word, und (!I)wi_gw2(!i) das Low-Word der Adresse.

!label WF_TOP
!item [WF_TOP (10)]
liefert die folgenden Werte zurÅck:
!begin_xlist !short
!item [wi_gw1 =]
Kennung des obersten Fensters
!item [Ab AES 3.3] ~
!item [wi_gw2 =]
Applikations-ID des Besitzers
!item [wi_gw3 =]
Kennung des nÑchsten Fensters
!item [wi_gw4 =]
Spezialfall fÅr MagiC 2.0
!end_xlist
Wenn kein Fenster geîffnet ist, enthÑlt (!I)wi_gw1(!i) den Wert 0. (!nl)
(!B)Achtung:(!b) (!nolink [MagiC]) 2.0 muû als oberstes Fensterhandle eine negative Zahl
(-2) liefern, falls das Programm einer anderen Applikation gehîrt, sonst
laufen eine Reihe alter Programme nicht. In (!nolink [MagiC]) 2.0 wird das tatsÑchliche
Handle in (!I)wi_gw4(!i) zurÅckgeliefert. Ab (!nolink [MagiC])-3 trifft dies nicht mehr
zu, d.h. das Handle wird wie bisher Åblich, in (!I)wi_gw1(!i) Åbergeben.

XaAES liefert in (!I)wi_gw1(!i) die Applikations-ID des Besitzers des nÑchsten Fensters.

!item [WF_UNICONIFY (27)]
ermittelt die ursprÅnglichen Ausmaûe eines ikonifizierten Fensters.
!begin_xlist !short
!item [wi_gw1 =]
x-Position
!item [wi_gw2 =]
y-Position
!item [wi_gw3 =]
Breite
!item [wi_gw4 =]
Hîhe des Fensters
!end_xlist
(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per appl_getinfo
(Opcode 11) ermittelt werden.

!label WF_VSLIDE
!item [WF_VSLIDE (09)]
berechnet die Position des vertikalen Sliders und schreibt sie in den
weiteren Parameter (!I)wi_gw1(!i) (0 ganz oben, bis 1000 ganz unten).

!label WF_VSLSIZE
!item [WF_VSLSIZE (16)]
berechnet die Hîhe des vertikalen Sliders relativ zur Gesamthîhe und
schreibt sie in den zusÑtzlichen Parameter (!I)wi_gw1(!i) (-1 kleinste Hîhe,
1 klein bis 1000 Gesamthîhe).

!item [(!nolink [WF_WIDGETS]) (200)]
Ermittelt die aktuellen Positionen der Sliderobjekte 
(W_UPARROW, W_DNARROW, etc.) des Fensters mit dem Handle 
wi_ghandle. In den Parametern wi_gw1 und wi_gw2 werden die 
vertikal Elemente des typs rightwidgets, in den Parametern 
wi_gw3 und wi_gw4 die horizontal Elemente des typs 
bottomwidgets geschrieben. wi_gw1 ist das oberste Element, 
wi_gw2 das unterste Element des Vertikalsliders. wi_gw3 ist 
das linkeste Element, wi_gw4 das rechteste Element des 
Horizontalsliders.

(!B)Achtung:(!b) Das Vorhandensein dieses Features sollte per (!link [appl_getinfo][%apgi_11])
(Opcode 11) ermittelt werden.

!label WF_WORKXYWH
!item [WF_WORKXYWH (04)]
berechnet die Koordinaten des Arbeitsbereichs des Fensters und schreibt sie
in die weiteren Parameter (!I)wi_gw1(!i), (!I)wi_gw2(!i), (!I)wi_gw3(!i) und
(!I)wi_gw4(!i).


!label X_WF_DCOLSTAT
!item [X_WF_DCOLSTAT (0x2100)] 
This mode gets  a window gadget's default colors and ob_state
value.  Unlike WF_DCOLOR, this option gives full control over all of
Geneva's extended window gadgets.

The (!I)wi_gw1(!i) parameter must be a pointer to a word
containing the index of the gadget being inquired about, the same way
WF_COLOR and WF_DCOLOR work.


!label XA
!item [XA (0x5841)]
Wird als Ergebins 'XA' (0x5841) geliefert so ist XaAES installiert und man
erhÑlt in (!I)wi_gw1(!i) die Versionsnummer (0x0964 fÅr Version V0.964).
(!I)wi_ghandle(!i) muû auf Null gesetzt werden.
!end_xlist

(!B)Hinweis:(!b) Die Parameter wi_gw1, wi_gw2, wi_gw3 und wi_gw4 sind dabei
reine Ausgabe-Parameter.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wind_get]) ~ wind_set

(!ende_liste)



!begin_node Bindings fÅr wind_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3 );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_get ( int16_t wi_ghandle, int16_t wi_gfield,
                   int16_t *wi_gw1, int16_t *wi_gw2,
                   int16_t *wi_gw3, int16_t *wi_gw3)
{
   int_in[0]  = wi_ghandle;
   int_in[1]  = wi_gfield;

   crys_if (104);

   *wi_gw1 = int_out[1];
   *wi_gw2 = int_out[2];
   *wi_gw3 = int_out[3];
   *wi_gw4 = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 104   # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 5     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! wi_ghandle
int_in+2  !! int_in[1]  !! wi_gfield
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! wi_gw1
int_out+4 !! int_out[2] !! wi_gw2
int_out+6 !! int_out[3] !! wi_gw3
int_out+8 !! int_out[4] !! wi_gw4
!end_table

(!ende_liste)
!end_node
!end_node

!endif
