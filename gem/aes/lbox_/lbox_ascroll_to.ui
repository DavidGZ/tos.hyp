!iflang [english]

!begin_node lbox_ascroll_to
!label lbox_scroll_to

(!begin_liste) [Availability]

!item [Name:]
ØList Box Scroll To, Slider AÆ - Slider der Listbox setzen.

!item [Opcode:]
175 (Sub-Opcode 4)

!item [Syntax:]
void lbox_ascroll_to ( LIST_BOX *box, int16_t first, GRECT *box_rect,
                       GRECT *slider_rect );

!item [Description:]
Die Funktion positioniert den Slider-A in einer Listbox. Es gilt:

!begin_xlist !short [slider_rect]
!item [Parameter]
Bedeutung
!item [~]
~
!item [box]
Zeiger auf Listbox-Struktur
!item [first]
Index des ersten sichbaren Eintrags
!item [box_rect]
Redraw-Rechteck der Listbox (oder NULL)
!item [slider_rect]
Redraw-Rechteck des Sliders (oder NULL)
!end_xlist

(!B)Hinweis:(!b) Die Funktion arbeitet im Prinzip wie ein Aufruf von
lbox_set_slider mit anschlieûendem lbox_update. Der Unterschied liegt darin,
daû (falls mîglich) gescrollt wird, um mîglichst wenig neu zeichnen zu
mÅssen. Sollte sich die Elemenliste der Listbox geÑndert haben, darf diese
Funktion daher (!I)nicht(!i) benutzt werden.

!item [(!nolink [Return]) Value:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [Availability:]
Das Vorhandensein dieser Funktion kann per (!link [appl_getinfo][%apgi_7]) (Opcode 7)
festgestellt werden.

!item [Group:]
Listboxen

!item [See Also:]
(!link [Binding] [Bindings for lbox_ascroll_to]) ~  lbox_do ~  lbox_set_slider

(!ende_liste)



!begin_node Bindings for lbox_ascroll_to
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void lbox_ascroll_to ( LIST_BOX *box, int16_t first, GRECT *box_rect,
                       GRECT *slider_rect );

oder

void lbox_scroll_to ( ... );

!item [Binding:]
!begin_verbatim
void lbox_ascroll_to ( LIST_BOX *box, int16_t first,
                       GRECT *box_rect,
                       GRECT *slider_rect )

oder

void lbox_scroll_to ( ... )                       
{
   addr_in[0] = box;
   addr_in[1] = box_rect;
   addr_in[2] = slider_rect;

   int_in[0] = 4;
   int_in[1] = first;
   crys_if (175);
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 175   # Function Opcode
control+2 !! control[1] !! 2     # entry in int_in
control+4 !! control[2] !! 0     # entry in int_out
control+6 !! control[3] !! 3     # entry in addr_in
control+8 !! control[4] !! 0     # entry in addr_out
addr_in   !! addr_in[0] !! box
addr_in+4 !! addr_in[1] !! box_rect
addr_in+8 !! addr_in[2] !! slider_rect
int_in    !! int_in[0]  !! 4     # Sub-Opcode
int_in+2  !! int_in[1]  !! first
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node lbox_ascroll_to
!label lbox_scroll_to

(!begin_liste) [Beschreibung]

!item [Name:]
ØList Box Scroll To, Slider AÆ - Slider der Listbox setzen.

!item [AES-Nummer:]
175 (Unterfunktion 4)

!item [Deklaration:]
void lbox_ascroll_to ( LIST_BOX *box, int16_t first, GRECT *box_rect,
                       GRECT *slider_rect );

!item [Beschreibung:]
Die Funktion positioniert den Slider-A in einer Listbox. Es gilt:

!begin_xlist !short [slider_rect]
!item [Parameter]
Bedeutung
!item [~]
~
!item [box]
Zeiger auf Listbox-Struktur
!item [first]
Index des ersten sichbaren Eintrags
!item [box_rect]
Redraw-Rechteck der Listbox (oder NULL)
!item [slider_rect]
Redraw-Rechteck des Sliders (oder NULL)
!end_xlist

(!B)Hinweis:(!b) Die Funktion arbeitet im Prinzip wie ein Aufruf von
lbox_set_slider mit anschlieûendem lbox_update. Der Unterschied liegt darin,
daû (falls mîglich) gescrollt wird, um mîglichst wenig neu zeichnen zu
mÅssen. Sollte sich die Elemenliste der Listbox geÑndert haben, darf diese
Funktion daher (!I)nicht(!i) benutzt werden.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [VerfÅgbar:]
Das Vorhandensein dieser Funktion kann per (!link [appl_getinfo][%apgi_7]) (Opcode 7)
festgestellt werden.

!item [Gruppe:]
Listboxen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr lbox_ascroll_to]) ~  lbox_do ~  lbox_set_slider

(!ende_liste)



!begin_node Bindings fÅr lbox_ascroll_to
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void lbox_ascroll_to ( LIST_BOX *box, int16_t first, GRECT *box_rect,
                       GRECT *slider_rect );

oder

void lbox_scroll_to ( ... );

!item [Umsetzung:]
!begin_verbatim
void lbox_ascroll_to ( LIST_BOX *box, int16_t first,
                       GRECT *box_rect,
                       GRECT *slider_rect )

oder

void lbox_scroll_to ( ... )                       
{
   addr_in[0] = box;
   addr_in[1] = box_rect;
   addr_in[2] = slider_rect;

   int_in[0] = 4;
   int_in[1] = first;
   crys_if (175);
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 175   # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 0     # EintrÑge in int_out
control+6 !! control[3] !! 3     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0] !! box
addr_in+4 !! addr_in[1] !! box_rect
addr_in+8 !! addr_in[2] !! slider_rect
int_in    !! int_in[0]  !! 4     # Unterfunktion
int_in+2  !! int_in[1]  !! first
!end_table

(!ende_liste)
!end_node
!end_node

!endif
