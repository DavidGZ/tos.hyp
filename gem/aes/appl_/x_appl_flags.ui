!iflang [english]

!begin_node x_appl_flags
(!begin_liste) [Availability]
!item [Name:]
ØÆ -
!item [Opcode:]
28928
!item [Syntax:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );

!item [Description:]
This function controls the execution flags that are used when determining how
an application gets run. It works in two modes, globally and for a particular
application.
!begin_xlist [Mode 0]
!item [Mode 0:]  Get by index (!nl)
         Get the "Nth  block of global application flags. If index is zero,
         the Default flags will be retrieved. If flags is not NULL, the flags
         will be copied into the (!nolink [APPFLAGS]) structure pointed to by the
         flags parameter.

!item [Mode 1:]  Set by index (!nl)
         Set the "Nth" block of global application flags. If flags is not NULL,
         the flags will be copied from the (!nolink [APPFLAGS]) structure pointed to by the
         flags parameter. If index is zero, the Default flags will be set, in
         which case the name and desc fields of the APPFLAGS are not altered. If
         index is less than zero, a new APPFLAGS structure will be added to the
         end of the global list, and it will be given the contents of flags.

!item [Mode 2:]  Delete by index (!nl)
         Delete the "Nth" block of global application flags. The inde parameter
         must be a number greater than zero (since the Default flags cannot be
         deleted.) The flags parameter is not used in this mode.

!item [Mode 3:]  Get by application ID (!nl)
         Get the application flags for a particular process. index must be a
         valid application ID. If flags is not NULL, the flags will be copied
         into the (!nolink [APPFLAGS]) structure pointed to by the flags parameter.

!item [Mode 4:]  Set by application ID (!nl)
         Set the application flags for a particular process. index must be a
         valid application ID. If flags is not NULL, the flags will be set for
         the application.

!label X_APF_SEARCH
!item [Mode 5:] (X_APF_SEARCH) (since Update 004) (!nl)
         Use the (!nolink [APPFLAGS]) "name" element to search for the set of flags that
         would be used by Geneva were it to run the application with that name.
         Note that the "name" element is overwritten in the process.  The
         "index" parameter is not used.

         Example: Get the flags for FOO.PRG and force it to run in
                  single-tasking mode
!begin_verbatim
           APPFLAGS a;
           SHWRCMD shwrcmd;

           strcpy( a.name, "FOO.PRG" );
           x_appl_flags( X_APF_SEARCH, 0, &a );
           a.flags.s.multitask = 0;
           shwrcmd.name = "FOO.PRG";
           shwrcmd.app_flags = a.flags.l;
           shel_write( XSHD_FLAGS|XSHW_RUNANY, 0, 0, (char *)&shwrcmd, "" );
!end_verbatim
!end_xlist
Note: Changing the multitask attribute of an application in this manner will have
no effect, since this can only be changed before the application is launched.

Descriptions of each of the available flags can be found in the section of the
manual describing the Task Manager's"Flags" dialog.

!item [(!nolink [Return]) Value:]
0: Out of memory (mode 1) (!nl)
   Flags not found (all modes)

!item [Availability:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Group:]
Application Library

!item [See Also:]
(!link [Binding] [Bindings for x_appl_flags])
(!ende_liste)



!begin_node Bindings for x_appl_flags
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );
!item [Binding:]
!begin_verbatim
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags )
{
   int_in[0]  = getset;
   int_in[1]  = index;
   addr_in[0] = flags;
   return ( crys_if(28928) );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0] !! 28928  # Function Opcode
control+2 !! control[1] !! 2      # entry in int_in
control+4 !! control[2] !! 1      # entry in int_out
control+6 !! control[3] !! 1      # entry in addr_in
control+8 !! control[4] !! 0      # entry in addr_out
int_in !! int_in[0] !! getset
int_in+2 !! int_in[1] !! index
addr_in  !! addr_in[0] !! flags
int_out !! int_out[0] !! Return value
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node x_appl_flags
(!begin_liste) [Beschreibung]
!item [Name:]
ØÆ -
!item [AES-Nummer:]
28928
!item [Deklaration:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );

!item [Beschreibung:]
This function controls the execution flags that are used when determining how
an application gets run. It works in two modes, globally and for a particular
application.
!begin_xlist [Mode 0]
!item [Mode 0:]  Get by index (!nl)
         Get the "Nth  block of global application flags. If index is zero,
         the Default flags will be retrieved. If flags is not NULL, the flags
         will be copied into the (!nolink [APPFLAGS]) structure pointed to by the
         flags parameter.

!item [Mode 1:]  Set by index (!nl)
         Set the "Nth" block of global application flags. If flags is not NULL,
         the flags will be copied from the (!nolink [APPFLAGS]) structure pointed to by the
         flags parameter. If index is zero, the Default flags will be set, in
         which case the name and desc fields of the APPFLAGS are not altered. If
         index is less than zero, a new APPFLAGS structure will be added to the
         end of the global list, and it will be given the contents of flags.

!item [Mode 2:]  Delete by index (!nl)
         Delete the "Nth" block of global application flags. The inde parameter
         must be a number greater than zero (since the Default flags cannot be
         deleted.) The flags parameter is not used in this mode.

!item [Mode 3:]  Get by application ID (!nl)
         Get the application flags for a particular process. index must be a
         valid application ID. If flags is not NULL, the flags will be copied
         into the (!nolink [APPFLAGS]) structure pointed to by the flags parameter.

!item [Mode 4:]  Set by application ID (!nl)
         Set the application flags for a particular process. index must be a
         valid application ID. If flags is not NULL, the flags will be set for
         the application.

!label X_APF_SEARCH
!item [Mode 5:] (X_APF_SEARCH) (since Update 004) (!nl)
         Use the (!nolink [APPFLAGS]) "name" element to search for the set of flags that
         would be used by Geneva were it to run the application with that name.
         Note that the "name" element is overwritten in the process.  The
         "index" parameter is not used.

         Example: Get the flags for FOO.PRG and force it to run in
                  single-tasking mode
!begin_verbatim
           APPFLAGS a;
           SHWRCMD shwrcmd;

           strcpy( a.name, "FOO.PRG" );
           x_appl_flags( X_APF_SEARCH, 0, &a );
           a.flags.s.multitask = 0;
           shwrcmd.name = "FOO.PRG";
           shwrcmd.app_flags = a.flags.l;
           shel_write( XSHD_FLAGS|XSHW_RUNANY, 0, 0, (char *)&shwrcmd, "" );
!end_verbatim
!end_xlist
Note: Changing the multitask attribute of an application in this manner will have
no effect, since this can only be changed before the application is launched.

Descriptions of each of the available flags can be found in the section of the
manual describing the Task Manager's"Flags" dialog.

!item [Ergebnis:]
0: Out of memory (mode 1) (!nl)
   Flags not found (all modes)

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
(!link [Applikationen][Applikationsfunktionen])
!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_appl_flags])
(!ende_liste)



!begin_node Bindings fÅr x_appl_flags
!ignore_index
(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags );
!item [Umsetzung:]
!begin_verbatim
int16_t x_appl_flags( int16_t getset, int16_t index, APPFLAGS *flags )
{
   int_in[0]  = getset;
   int_in[1]  = index;
   addr_in[0] = flags;
   return ( crys_if(28928) );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0] !! 28928  # Opcode der Funktion
control+2 !! control[1] !! 2      # EintrÑge in int_in
control+4 !! control[2] !! 1      # EintrÑge in int_out
control+6 !! control[3] !! 1      # EintrÑge in addr_in
control+8 !! control[4] !! 0      # EintrÑge in addr_out
int_in !! int_in[0] !! getset
int_in+2 !! int_in[1] !! index
addr_in  !! addr_in[0] !! flags
int_out !! int_out[0] !! Return-Wert
!end_table
(!ende_liste)
!end_node
!end_node

!endif
