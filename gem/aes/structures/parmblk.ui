!iflang [english]

!begin_node PARMBLK

!begin_verbatim
typedef struct
{
   OBJECT   *pb_tree;        /* Zeiger auf den Objektbaum        */
   int16_t  pb_obj;          /* Nummer des Objekts               */
   int16_t  pb_prevstate;    /* vorheriger Objektstatus          */
   int16_t  pb_currstate;    /* neuer Objektstatus               */
   int16_t  pb_x;            /* x-Position des Objektes          */
   int16_t  pb_y;            /* y-Position des Objektes          */
   int16_t  pb_w;            /* Breite des Objektes              */
   int16_t  pb_h;            /* Hîhe des Objektes                */
   int16_t  pb_xc;           /* x-Position des Clipping-Bereichs */
   int16_t  pb_yc;           /* y-Position des Clipping-Bereichs */
   int16_t  pb_wc;           /* Breite des Clipping-Bereichs     */
   int16_t  pb_hc;           /* Hîhe des Clipping-Bereichs       */
   int32_t  pb_parm;         /* Parameter der USERBLK-Struktur   */
} PARMBLK;
!end_verbatim

(!B)Hinweis:(!b) Das Objekt muû nur neu gezeichnet werden, wenn alter und
neuer Status identisch sind; anderenfalls reicht ein 'Update' des
Objektbaums aus. Ferner sollten folgende Punkte beachtet werden:

!begin_itemize
!item die eigene Funktion muû im Datenregister d0 dem (!nolink [AES]) zurÅckliefern,
      welche Aspekte des Objektstatus noch aktualisiert werden mÅssen. Damit
      ist es nicht unbedingt nîtig, in der eigenen Ausgabefunktion den Code
      zum invertieren des Objektes auszuprogrammieren. Im allgemeinen wird
      man einige Bits des Objektstatus selbst bearbeiten wollen, und andere
      dem (!nolink [AES]) Åberlassen.
!item die Funktion erhÑlt den PARMBLK-Zeiger auf dem Stack, und muû daher in
      Pure-C als 'cdecl' deklariert werden.
!item ein vollstÑndiges Neuzeichnen des Objektes ist nur dann nîtig, wenn
      die Komponenten (!I)pb_prevstate(!i) und (!I)pb_currstate(!i) gleich
      sind; anderenfalls hat sich nur der Objektstatus geÑndert (zum
      Beispiel durch Anklicken).
!item die eigene Funktion wird de facto als Unterprogramm der (!nolink [AES])
      ausgefÅhrt. Daher sollte man im Hinblick auf die Stackbenutzung
      vorsichtig sein. Auûerdem darf man natÅrlich (!I)keine(!i) weiteren
      (!nolink [AES])-Aufrufe machen, da das (!nolink [AES]) (!I)nicht(!i) re-entrant ist.
      Aufrufe
      der VDI-Eingabefunktionen sind hingegen an dieser Stelle erlaubt.
!item die Komponente (!I)pb_parm(!i) dient dazu, der eigenen Funktion
      weitere Informationen (wie etwa einen Zeiger auf einen String) mit auf
      den Weg zu geben.
!item man sollte sich nie zu weit von der ursprÅnglichen Optik von (!nolink [GEM])
      entfernen. Abgerundete Rechtecke oder kursive Texte passen sicherlich
      nicht in das normale Erscheinungsbild einer (!nolink [GEM])-Applikation.
!end_itemize

See Also: AES ~ GEM ~ USERBLK
!end_node

!else

!begin_node PARMBLK

!begin_verbatim
typedef struct
{
   OBJECT   *pb_tree;        /* Zeiger auf den Objektbaum        */
   int16_t  pb_obj;          /* Nummer des Objekts               */
   int16_t  pb_prevstate;    /* vorheriger Objektstatus          */
   int16_t  pb_currstate;    /* neuer Objektstatus               */
   int16_t  pb_x;            /* x-Position des Objektes          */
   int16_t  pb_y;            /* y-Position des Objektes          */
   int16_t  pb_w;            /* Breite des Objektes              */
   int16_t  pb_h;            /* Hîhe des Objektes                */
   int16_t  pb_xc;           /* x-Position des Clipping-Bereichs */
   int16_t  pb_yc;           /* y-Position des Clipping-Bereichs */
   int16_t  pb_wc;           /* Breite des Clipping-Bereichs     */
   int16_t  pb_hc;           /* Hîhe des Clipping-Bereichs       */
   int32_t  pb_parm;         /* Parameter der USERBLK-Struktur   */
} PARMBLK;
!end_verbatim

(!B)Hinweis:(!b) Das Objekt muû nur neu gezeichnet werden, wenn alter und
neuer Status identisch sind; anderenfalls reicht ein 'Update' des
Objektbaums aus. Ferner sollten folgende Punkte beachtet werden:

!begin_itemize
!item die eigene Funktion muû im Datenregister d0 dem (!nolink [AES]) zurÅckliefern,
      welche Aspekte des Objektstatus noch aktualisiert werden mÅssen. Damit
      ist es nicht unbedingt nîtig, in der eigenen Ausgabefunktion den Code
      zum invertieren des Objektes auszuprogrammieren. Im allgemeinen wird
      man einige Bits des Objektstatus selbst bearbeiten wollen, und andere
      dem (!nolink [AES]) Åberlassen.
!item die Funktion erhÑlt den PARMBLK-Zeiger auf dem Stack, und muû daher in
      Pure-C als 'cdecl' deklariert werden.
!item ein vollstÑndiges Neuzeichnen des Objektes ist nur dann nîtig, wenn
      die Komponenten (!I)pb_prevstate(!i) und (!I)pb_currstate(!i) gleich
      sind; anderenfalls hat sich nur der Objektstatus geÑndert (zum
      Beispiel durch Anklicken).
!item die eigene Funktion wird de facto als Unterprogramm der (!nolink [AES])
      ausgefÅhrt. Daher sollte man im Hinblick auf die Stackbenutzung
      vorsichtig sein. Auûerdem darf man natÅrlich (!I)keine(!i) weiteren
      (!nolink [AES])-Aufrufe machen, da das (!nolink [AES]) (!I)nicht(!i) re-entrant ist.
      Aufrufe
      der VDI-Eingabefunktionen sind hingegen an dieser Stelle erlaubt.
!item die Komponente (!I)pb_parm(!i) dient dazu, der eigenen Funktion
      weitere Informationen (wie etwa einen Zeiger auf einen String) mit auf
      den Weg zu geben.
!item man sollte sich nie zu weit von der ursprÅnglichen Optik von (!nolink [GEM])
      entfernen. Abgerundete Rechtecke oder kursive Texte passen sicherlich
      nicht in das normale Erscheinungsbild einer (!nolink [GEM])-Applikation.
!end_itemize

Querverweis: AES ~ GEM ~ USERBLK
!end_node

!endif
