!iflang [english]

!begin_node v_curtext

(!begin_liste) [Availability]

!item [Name:]
ØOutput Cursor Addressable Alpha TextÆ - gibt einen Text ab dem Alphacursor
aus.

!item [Opcode:]
5 (Escape 12)

!item [Syntax:]
void v_curtext ( int16_t handle, int8_t *string );

!item [Description:]
Die Funktion gibt einen Text an der aktuellen Cursorposition aus. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [string]
Adresse der Zeichenkette
!end_xlist

Der Cursor wird bei der Ausgabe fÅr jedes Zeichen um eine Stelle
weitergerÅckt (Alpha-Modus).

(!B)Hinweis:(!b) Textausgabe kann Åber diese Funktion (!I)schneller(!i) als
Åber das GEMDOS erfolgen.

!item [(!nolink [Return]) Value:]
Die Funktion liefert kein Ergebnis.  

!item [Availability:]
Supported by all screen drivers.

!item [Group:]
Text function

!item [See Also:]
(!link [Binding] [Bindings for v_curtext])  ~   v_enter_cur   v_curup   ~  v_curdown ~
v_curright ~ v_curleft ~   v_curhome ~   vs_curaddress
               
(!ende_liste)
!end_node



!begin_node Bindings for v_curtext
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void v_curtext ( int16_t handle, int8_t *string );

!item [Binding:]
!begin_verbatim
void v_curtext (int16_t handle, int8_t *string)
{
   int16_t *tmp;

   tmp = intin;
   while (*tmp++ = *string++)
      ;

   contrl[0] = 5;
   contrl[1] = 0;
   contrl[3] = ((int16_t) (tmp-intin)-1);
   contrl[5] = 12;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]     !! 5     Function Opcode
contrl+2  !! contrl[1]     !! 0     # entry in ptsin
contrl+4  !! contrl[2]     !! 0     # entry in ptsout
contrl+6  !! contrl[3]     !! n     # entry in intin
contrl+8  !! contrl[4]     !! 0     # entry in intout
contrl+10 !! contrl[5]     !! 12
contrl+12 !! contrl[6]     !! handle
intin     !! intin[0..n-1] !! string[0..n-1]
!end_table

(!ende_liste)
!end_node

!else

!begin_node v_curtext

(!begin_liste) [Beschreibung]

!item [Name:]
ØOutput Cursor Addressable Alpha TextÆ - gibt einen Text ab dem Alphacursor
aus.

!item [VDI-Nummer:]
5 (Escape 12)

!item [Deklaration:]
void v_curtext ( int16_t handle, int8_t *string );

!item [Beschreibung:]
Die Funktion gibt einen Text an der aktuellen Cursorposition aus. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [string]
Adresse der Zeichenkette
!end_xlist

Der Cursor wird bei der Ausgabe fÅr jedes Zeichen um eine Stelle
weitergerÅckt (Alpha-Modus).

(!B)Hinweis:(!b) Textausgabe kann Åber diese Funktion (!I)schneller(!i) als
Åber das GEMDOS erfolgen.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.  

!item [VerfÅgbar:]
Supported by all screen drivers.

!item [Gruppe:]
Text-Funktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr v_curtext])  ~   v_enter_cur   v_curup   ~  v_curdown ~
v_curright ~ v_curleft ~   v_curhome ~   vs_curaddress
               
(!ende_liste)
!end_node



!begin_node Bindings fÅr v_curtext
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void v_curtext ( int16_t handle, int8_t *string );

!item [Umsetzung:]
!begin_verbatim
void v_curtext (int16_t handle, int8_t *string)
{
   int16_t *tmp;

   tmp = intin;
   while (*tmp++ = *string++)
      ;

   contrl[0] = 5;
   contrl[1] = 0;
   contrl[3] = ((int16_t) (tmp-intin)-1);
   contrl[5] = 12;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]     !! 5     Opcode der Funktion
contrl+2  !! contrl[1]     !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]     !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]     !! n     # EintrÑge in intin
contrl+8  !! contrl[4]     !! 0     # EintrÑge in intout
contrl+10 !! contrl[5]     !! 12
contrl+12 !! contrl[6]     !! handle
intin     !! intin[0..n-1] !! string[0..n-1]
!end_table

(!ende_liste)
!end_node

!endif
