!iflang [english]

!begin_node COLOR_RGB

!begin_verbatim
typedef struct
{
   uint16   reserved;     /* auf 0 oder den Index des Eintrags setzen */
   uint16   red;          /* Rot:  0<->65535 */
   uint16   green;        /* Gr］: 0<->65535 */
   uint16   blue;         /* Blau: 0<->65535 */
} COLOR_RGB;
!end_verbatim
Falls in einem Programm die Farbdaten bereits in einem
vern］ftigen Format (z.B. 8 Bit pro Kanal) vorliegen, kann man
sich eine Umwandlung mit Multiplikation und Division ersparen. Die
Shift- und OR-Funktion des Prozessors erledigt das dann schneller und
eleganter.

Beispiel: Der Farbwert sei durch die Byte-Variablen r,
g, b beschrieben. Die korrekte Umsetzung auf das
16-Bit-Format der COLOR_RGB-Struktur erfolgt dann so:

!begin_verbatim
COLOR_RGB color; 

color.reserved = 0;

color.red = r;
color.red |= (color.red << 8);

color.green = g;
color.green |= (color.green << 8);

color.blue = b;
color.blue |= (color.blue << 8);
!end_verbatim
Das Strukturelement reserved sollte auf 0 gesetzt werden
oder (beim Aufbau einer Farbtabelle) den Index des Eintrags enthalten.
In jedem Fall m《sen aber die oberen 8 Bits von reserved
auf 0 gesetzt werden, da sie von den Farbroutinen ggf. f〉 Flags
verwendet werden.
!end_node

!else

!begin_node COLOR_RGB

!begin_verbatim
typedef struct
{
   uint16   reserved;     /* auf 0 oder den Index des Eintrags setzen */
   uint16   red;          /* Rot:  0<->65535 */
   uint16   green;        /* Gr］: 0<->65535 */
   uint16   blue;         /* Blau: 0<->65535 */
} COLOR_RGB;
!end_verbatim
Falls in einem Programm die Farbdaten bereits in einem
vern］ftigen Format (z.B. 8 Bit pro Kanal) vorliegen, kann man
sich eine Umwandlung mit Multiplikation und Division ersparen. Die
Shift- und OR-Funktion des Prozessors erledigt das dann schneller und
eleganter.

Beispiel: Der Farbwert sei durch die Byte-Variablen r,
g, b beschrieben. Die korrekte Umsetzung auf das
16-Bit-Format der COLOR_RGB-Struktur erfolgt dann so:

!begin_verbatim
COLOR_RGB color; 

color.reserved = 0;

color.red = r;
color.red |= (color.red << 8);

color.green = g;
color.green |= (color.green << 8);

color.blue = b;
color.blue |= (color.blue << 8);
!end_verbatim
Das Strukturelement reserved sollte auf 0 gesetzt werden
oder (beim Aufbau einer Farbtabelle) den Index des Eintrags enthalten.
In jedem Fall m《sen aber die oberen 8 Bits von reserved
auf 0 gesetzt werden, da sie von den Farbroutinen ggf. f〉 Flags
verwendet werden.
!end_node


!endif
